In archive libArduinoUnoFreeRTOS.a:

heap_1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pvPortMalloc 00000064  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vPortFree 00000002  00000000  00000000  00000098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.vPortInitialiseBlocks 0000000a  00000000  00000000  0000009a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xPortGetFreeHeapSize 00000012  00000000  00000000  000000a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .bss.pucAlignedHeap.1898 00000002  00000000  00000000  000000b6  2**0
                  ALLOC
  8 .bss.xNextFreeByte 00000002  00000000  00000000  000000b6  2**0
                  ALLOC
  9 .bss.ucHeap   000005dc  00000000  00000000  000000b6  2**0
                  ALLOC
 10 .comment      00000012  00000000  00000000  000000b6  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pvPortMalloc:

00000000 <pvPortMalloc>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	89 2b       	or	r24, r25
  14:	01 f4       	brne	.+0      	; 0x16 <pvPortMalloc+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	90 93 00 00 	sts	0x0000, r25
  1e:	80 93 00 00 	sts	0x0000, r24
  22:	20 91 00 00 	lds	r18, 0x0000
  26:	30 91 00 00 	lds	r19, 0x0000
  2a:	ce 01       	movw	r24, r28
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	8b 3d       	cpi	r24, 0xDB	; 219
  32:	45 e0       	ldi	r20, 0x05	; 5
  34:	94 07       	cpc	r25, r20
  36:	00 f4       	brcc	.+0      	; 0x38 <pvPortMalloc+0x38>
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	00 f4       	brcc	.+0      	; 0x3e <pvPortMalloc+0x3e>
  3e:	c0 91 00 00 	lds	r28, 0x0000
  42:	d0 91 00 00 	lds	r29, 0x0000
  46:	c2 0f       	add	r28, r18
  48:	d3 1f       	adc	r29, r19
  4a:	90 93 00 00 	sts	0x0000, r25
  4e:	80 93 00 00 	sts	0x0000, r24
  52:	00 c0       	rjmp	.+0      	; 0x54 <pvPortMalloc+0x54>
  54:	c0 e0       	ldi	r28, 0x00	; 0
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
  5c:	ce 01       	movw	r24, r28
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	08 95       	ret

Disassembly of section .text.vPortFree:

00000064 <vPortFree>:
  64:	08 95       	ret

Disassembly of section .text.vPortInitialiseBlocks:

000000ca <vPortInitialiseBlocks>:
  ca:	10 92 00 00 	sts	0x0000, r1
  ce:	10 92 00 00 	sts	0x0000, r1
  d2:	08 95       	ret

Disassembly of section .text.xPortGetFreeHeapSize:

0000019e <xPortGetFreeHeapSize>:
 19e:	20 91 00 00 	lds	r18, 0x0000
 1a2:	30 91 00 00 	lds	r19, 0x0000
 1a6:	8b ed       	ldi	r24, 0xDB	; 219
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	82 1b       	sub	r24, r18
 1ac:	93 0b       	sbc	r25, r19
 1ae:	08 95       	ret

heap_2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pvPortMalloc 00000124  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vPortFree 00000058  00000000  00000000  00000158  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xPortGetFreeHeapSize 0000000a  00000000  00000000  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.vPortInitialiseBlocks 00000002  00000000  00000000  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss.xHeapHasBeenInitialised.1909 00000001  00000000  00000000  000001bc  2**0
                  ALLOC
  8 .data.xFreeBytesRemaining 00000002  00000000  00000000  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss.xEnd     00000004  00000000  00000000  000001be  2**0
                  ALLOC
 10 .bss.xStart   00000004  00000000  00000000  000001be  2**0
                  ALLOC
 11 .bss.ucHeap   000005dc  00000000  00000000  000001be  2**0
                  ALLOC
 12 .comment      00000012  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pvPortMalloc:

00000000 <pvPortMalloc>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
   e:	80 91 00 00 	lds	r24, 0x0000
  12:	81 11       	cpse	r24, r1
  14:	00 c0       	rjmp	.+0      	; 0x16 <pvPortMalloc+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	90 93 00 00 	sts	0x0000, r25
  1e:	80 93 00 00 	sts	0x0000, r24
  22:	10 92 00 00 	sts	0x0000, r1
  26:	10 92 00 00 	sts	0x0000, r1
  2a:	8b ed       	ldi	r24, 0xDB	; 219
  2c:	95 e0       	ldi	r25, 0x05	; 5
  2e:	90 93 00 00 	sts	0x0000, r25
  32:	80 93 00 00 	sts	0x0000, r24
  36:	10 92 00 00 	sts	0x0000, r1
  3a:	10 92 00 00 	sts	0x0000, r1
  3e:	90 93 00 00 	sts	0x0000, r25
  42:	80 93 00 00 	sts	0x0000, r24
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	90 93 00 00 	sts	0x0000, r25
  4e:	80 93 00 00 	sts	0x0000, r24
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	80 93 00 00 	sts	0x0000, r24
  58:	20 97       	sbiw	r28, 0x00	; 0
  5a:	01 f0       	breq	.+0      	; 0x5c <pvPortMalloc+0x5c>
  5c:	24 96       	adiw	r28, 0x04	; 4
  5e:	ce 01       	movw	r24, r28
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	8a 3d       	cpi	r24, 0xDA	; 218
  64:	95 40       	sbci	r25, 0x05	; 5
  66:	00 f0       	brcs	.+0      	; 0x68 <pvPortMalloc+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <pvPortMalloc+0x6a>
  6a:	e0 91 00 00 	lds	r30, 0x0000
  6e:	f0 91 00 00 	lds	r31, 0x0000
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	82 81       	ldd	r24, Z+2	; 0x02
  78:	93 81       	ldd	r25, Z+3	; 0x03
  7a:	8c 17       	cp	r24, r28
  7c:	9d 07       	cpc	r25, r29
  7e:	00 f0       	brcs	.+0      	; 0x80 <pvPortMalloc+0x80>
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	e0 30       	cpi	r30, 0x00	; 0
  84:	f2 07       	cpc	r31, r18
  86:	01 f4       	brne	.+0      	; 0x88 <pvPortMalloc+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <pvPortMalloc+0x8a>
  8a:	20 81       	ld	r18, Z
  8c:	31 81       	ldd	r19, Z+1	; 0x01
  8e:	21 15       	cp	r18, r1
  90:	31 05       	cpc	r19, r1
  92:	01 f0       	breq	.+0      	; 0x94 <pvPortMalloc+0x94>
  94:	df 01       	movw	r26, r30
  96:	f9 01       	movw	r30, r18
  98:	00 c0       	rjmp	.+0      	; 0x9a <pvPortMalloc+0x9a>
  9a:	0d 91       	ld	r16, X+
  9c:	1c 91       	ld	r17, X
  9e:	11 97       	sbiw	r26, 0x01	; 1
  a0:	0c 5f       	subi	r16, 0xFC	; 252
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	2d 93       	st	X+, r18
  aa:	3c 93       	st	X, r19
  ac:	8c 1b       	sub	r24, r28
  ae:	9d 0b       	sbc	r25, r29
  b0:	89 30       	cpi	r24, 0x09	; 9
  b2:	91 05       	cpc	r25, r1
  b4:	00 f0       	brcs	.+0      	; 0xb6 <pvPortMalloc+0xb6>
  b6:	df 01       	movw	r26, r30
  b8:	ac 0f       	add	r26, r28
  ba:	bd 1f       	adc	r27, r29
  bc:	13 96       	adiw	r26, 0x03	; 3
  be:	9c 93       	st	X, r25
  c0:	8e 93       	st	-X, r24
  c2:	12 97       	sbiw	r26, 0x02	; 2
  c4:	d3 83       	std	Z+3, r29	; 0x03
  c6:	c2 83       	std	Z+2, r28	; 0x02
  c8:	12 96       	adiw	r26, 0x02	; 2
  ca:	2d 91       	ld	r18, X+
  cc:	3c 91       	ld	r19, X
  ce:	13 97       	sbiw	r26, 0x03	; 3
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	eb 01       	movw	r28, r22
  d6:	88 81       	ld	r24, Y
  d8:	99 81       	ldd	r25, Y+1	; 0x01
  da:	ec 01       	movw	r28, r24
  dc:	4a 81       	ldd	r20, Y+2	; 0x02
  de:	5b 81       	ldd	r21, Y+3	; 0x03
  e0:	42 17       	cp	r20, r18
  e2:	53 07       	cpc	r21, r19
  e4:	00 f4       	brcc	.+0      	; 0xe6 <pvPortMalloc+0xe6>
  e6:	bc 01       	movw	r22, r24
  e8:	00 c0       	rjmp	.+0      	; 0xea <pvPortMalloc+0xea>
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	9c 93       	st	X, r25
  ee:	8e 93       	st	-X, r24
  f0:	eb 01       	movw	r28, r22
  f2:	b9 83       	std	Y+1, r27	; 0x01
  f4:	a8 83       	st	Y, r26
  f6:	80 91 00 00 	lds	r24, 0x0000
  fa:	90 91 00 00 	lds	r25, 0x0000
  fe:	22 81       	ldd	r18, Z+2	; 0x02
 100:	33 81       	ldd	r19, Z+3	; 0x03
 102:	82 1b       	sub	r24, r18
 104:	93 0b       	sbc	r25, r19
 106:	90 93 00 00 	sts	0x0000, r25
 10a:	80 93 00 00 	sts	0x0000, r24
 10e:	00 c0       	rjmp	.+0      	; 0x110 <pvPortMalloc+0x110>
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
 118:	c8 01       	movw	r24, r16
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

Disassembly of section .text.vPortFree:

00000124 <vPortFree>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	01 f0       	breq	.+0      	; 0x12c <vPortFree+0x8>
 12c:	ec 01       	movw	r28, r24
 12e:	24 97       	sbiw	r28, 0x04	; 4
 130:	0e 94 00 00 	call	0	; 0x0 <xEnd>
 134:	2a 81       	ldd	r18, Y+2	; 0x02
 136:	3b 81       	ldd	r19, Y+3	; 0x03
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	a0 81       	ld	r26, Z
 13e:	b1 81       	ldd	r27, Z+1	; 0x01
 140:	12 96       	adiw	r26, 0x02	; 2
 142:	8d 91       	ld	r24, X+
 144:	9c 91       	ld	r25, X
 146:	13 97       	sbiw	r26, 0x03	; 3
 148:	82 17       	cp	r24, r18
 14a:	93 07       	cpc	r25, r19
 14c:	00 f4       	brcc	.+0      	; 0x14e <vPortFree+0x2a>
 14e:	fd 01       	movw	r30, r26
 150:	00 c0       	rjmp	.+0      	; 0x152 <vPortFree+0x2e>
 152:	b9 83       	std	Y+1, r27	; 0x01
 154:	a8 83       	st	Y, r26
 156:	d1 83       	std	Z+1, r29	; 0x01
 158:	c0 83       	st	Z, r28
 15a:	80 91 00 00 	lds	r24, 0x0000
 15e:	90 91 00 00 	lds	r25, 0x0000
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	90 93 00 00 	sts	0x0000, r25
 16a:	80 93 00 00 	sts	0x0000, r24
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	0c 94 00 00 	jmp	0	; 0x0 <xEnd>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

Disassembly of section .text.xPortGetFreeHeapSize:

000002a0 <xPortGetFreeHeapSize>:
 2a0:	80 91 00 00 	lds	r24, 0x0000
 2a4:	90 91 00 00 	lds	r25, 0x0000
 2a8:	08 95       	ret

Disassembly of section .text.vPortInitialiseBlocks:

0000054a <vPortInitialiseBlocks>:
 54a:	08 95       	ret

heap_3.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pvPortMalloc 00000034  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vPortFree 00000034  00000000  00000000  00000068  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .comment      00000012  00000000  00000000  0000009c  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pvPortMalloc:

00000000 <pvPortMalloc>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	00 d0       	rcall	.+0      	; 0xa <pvPortMalloc+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	9a 83       	std	Y+2, r25	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
  1e:	8c 01       	movw	r16, r24
  20:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
  24:	c8 01       	movw	r24, r16
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text.vPortFree:

00000034 <vPortFree>:
  34:	cf 93       	push	r28
  36:	df 93       	push	r29
  38:	00 d0       	rcall	.+0      	; 0x3a <vPortFree+0x6>
  3a:	cd b7       	in	r28, 0x3d	; 61
  3c:	de b7       	in	r29, 0x3e	; 62
  3e:	00 97       	sbiw	r24, 0x00	; 0
  40:	01 f0       	breq	.+0      	; 0x42 <vPortFree+0xe>
  42:	89 83       	std	Y+1, r24	; 0x01
  44:	9a 83       	std	Y+2, r25	; 0x02
  46:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  5e:	0f 90       	pop	r0
  60:	0f 90       	pop	r0
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	08 95       	ret

heap_4.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvInsertBlockIntoFreeList 00000088  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.pvPortMalloc 00000176  00000000  00000000  000000bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vPortFree 00000066  00000000  00000000  00000232  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xPortGetFreeHeapSize 0000000a  00000000  00000000  00000298  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.xPortGetMinimumEverFreeHeapSize 0000000a  00000000  00000000  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.vPortInitialiseBlocks 00000002  00000000  00000000  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .bss.xBlockAllocatedBit 00000002  00000000  00000000  000002ae  2**0
                  ALLOC
 10 .bss.xMinimumEverFreeBytesRemaining 00000002  00000000  00000000  000002ae  2**0
                  ALLOC
 11 .bss.xFreeBytesRemaining 00000002  00000000  00000000  000002ae  2**0
                  ALLOC
 12 .bss.pxEnd    00000002  00000000  00000000  000002ae  2**0
                  ALLOC
 13 .bss.xStart   00000004  00000000  00000000  000002ae  2**0
                  ALLOC
 14 .bss.ucHeap   000005dc  00000000  00000000  000002ae  2**0
                  ALLOC
 15 .comment      00000012  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvInsertBlockIntoFreeList:

00000000 <prvInsertBlockIntoFreeList>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	a0 e0       	ldi	r26, 0x00	; 0
   8:	b0 e0       	ldi	r27, 0x00	; 0
   a:	cd 91       	ld	r28, X+
   c:	dc 91       	ld	r29, X
   e:	11 97       	sbiw	r26, 0x01	; 1
  10:	ce 17       	cp	r28, r30
  12:	df 07       	cpc	r29, r31
  14:	00 f4       	brcc	.+0      	; 0x16 <prvInsertBlockIntoFreeList+0x16>
  16:	de 01       	movw	r26, r28
  18:	00 c0       	rjmp	.+0      	; 0x1a <prvInsertBlockIntoFreeList+0x1a>
  1a:	12 96       	adiw	r26, 0x02	; 2
  1c:	2d 91       	ld	r18, X+
  1e:	3c 91       	ld	r19, X
  20:	13 97       	sbiw	r26, 0x03	; 3
  22:	cd 01       	movw	r24, r26
  24:	82 0f       	add	r24, r18
  26:	93 1f       	adc	r25, r19
  28:	8e 17       	cp	r24, r30
  2a:	9f 07       	cpc	r25, r31
  2c:	01 f4       	brne	.+0      	; 0x2e <prvInsertBlockIntoFreeList+0x2e>
  2e:	82 81       	ldd	r24, Z+2	; 0x02
  30:	93 81       	ldd	r25, Z+3	; 0x03
  32:	82 0f       	add	r24, r18
  34:	93 1f       	adc	r25, r19
  36:	13 96       	adiw	r26, 0x03	; 3
  38:	9c 93       	st	X, r25
  3a:	8e 93       	st	-X, r24
  3c:	12 97       	sbiw	r26, 0x02	; 2
  3e:	fd 01       	movw	r30, r26
  40:	22 81       	ldd	r18, Z+2	; 0x02
  42:	33 81       	ldd	r19, Z+3	; 0x03
  44:	cf 01       	movw	r24, r30
  46:	82 0f       	add	r24, r18
  48:	93 1f       	adc	r25, r19
  4a:	8c 17       	cp	r24, r28
  4c:	9d 07       	cpc	r25, r29
  4e:	01 f4       	brne	.+0      	; 0x50 <prvInsertBlockIntoFreeList+0x50>
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	c8 17       	cp	r28, r24
  5a:	d9 07       	cpc	r29, r25
  5c:	01 f0       	breq	.+0      	; 0x5e <prvInsertBlockIntoFreeList+0x5e>
  5e:	8a 81       	ldd	r24, Y+2	; 0x02
  60:	9b 81       	ldd	r25, Y+3	; 0x03
  62:	82 0f       	add	r24, r18
  64:	93 1f       	adc	r25, r19
  66:	93 83       	std	Z+3, r25	; 0x03
  68:	82 83       	std	Z+2, r24	; 0x02
  6a:	88 81       	ld	r24, Y
  6c:	99 81       	ldd	r25, Y+1	; 0x01
  6e:	91 83       	std	Z+1, r25	; 0x01
  70:	80 83       	st	Z, r24
  72:	00 c0       	rjmp	.+0      	; 0x74 <prvInsertBlockIntoFreeList+0x74>
  74:	d1 83       	std	Z+1, r29	; 0x01
  76:	c0 83       	st	Z, r28
  78:	ae 17       	cp	r26, r30
  7a:	bf 07       	cpc	r27, r31
  7c:	01 f0       	breq	.+0      	; 0x7e <prvInsertBlockIntoFreeList+0x7e>
  7e:	ed 93       	st	X+, r30
  80:	fc 93       	st	X, r31
  82:	df 91       	pop	r29
  84:	cf 91       	pop	r28
  86:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00000088 <pvPortMalloc>:
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
  9a:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
  9e:	80 91 00 00 	lds	r24, 0x0000
  a2:	90 91 00 00 	lds	r25, 0x0000
  a6:	89 2b       	or	r24, r25
  a8:	01 f4       	brne	.+0      	; 0xaa <pvPortMalloc+0x22>
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	50 93 00 00 	sts	0x0000, r21
  b2:	40 93 00 00 	sts	0x0000, r20
  b6:	10 92 00 00 	sts	0x0000, r1
  ba:	10 92 00 00 	sts	0x0000, r1
  be:	66 27       	eor	r22, r22
  c0:	57 fd       	sbrc	r21, 7
  c2:	60 95       	com	r22
  c4:	76 2f       	mov	r23, r22
  c6:	47 52       	subi	r20, 0x27	; 39
  c8:	5a 4f       	sbci	r21, 0xFA	; 250
  ca:	6f 4f       	sbci	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	fa 01       	movw	r30, r20
  d0:	50 93 00 00 	sts	0x0000, r21
  d4:	40 93 00 00 	sts	0x0000, r20
  d8:	13 82       	std	Z+3, r1	; 0x03
  da:	12 82       	std	Z+2, r1	; 0x02
  dc:	11 82       	std	Z+1, r1	; 0x01
  de:	10 82       	st	Z, r1
  e0:	ca 01       	movw	r24, r20
  e2:	80 50       	subi	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	90 93 00 00 	sts	0x0000, r25
  ea:	80 93 00 00 	sts	0x0000, r24
  ee:	50 93 00 00 	sts	0x0000, r21
  f2:	40 93 00 00 	sts	0x0000, r20
  f6:	90 93 00 00 	sts	0x0000, r25
  fa:	80 93 00 00 	sts	0x0000, r24
  fe:	90 93 00 00 	sts	0x0000, r25
 102:	80 93 00 00 	sts	0x0000, r24
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e8       	ldi	r25, 0x80	; 128
 10a:	90 93 00 00 	sts	0x0000, r25
 10e:	80 93 00 00 	sts	0x0000, r24
 112:	e0 90 00 00 	lds	r14, 0x0000
 116:	f0 90 00 00 	lds	r15, 0x0000
 11a:	ce 01       	movw	r24, r28
 11c:	8e 21       	and	r24, r14
 11e:	9f 21       	and	r25, r15
 120:	89 2b       	or	r24, r25
 122:	01 f0       	breq	.+0      	; 0x124 <pvPortMalloc+0x9c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <pvPortMalloc+0x9e>
 126:	20 97       	sbiw	r28, 0x00	; 0
 128:	01 f4       	brne	.+0      	; 0x12a <pvPortMalloc+0xa2>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <pvPortMalloc+0xa4>
 12c:	9e 01       	movw	r18, r28
 12e:	2d 5f       	subi	r18, 0xFD	; 253
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	01 f4       	brne	.+0      	; 0x138 <pvPortMalloc+0xb0>
 138:	00 c0       	rjmp	.+0      	; 0x13a <pvPortMalloc+0xb2>
 13a:	c0 90 00 00 	lds	r12, 0x0000
 13e:	d0 90 00 00 	lds	r13, 0x0000
 142:	c2 16       	cp	r12, r18
 144:	d3 06       	cpc	r13, r19
 146:	00 f4       	brcc	.+0      	; 0x148 <pvPortMalloc+0xc0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <pvPortMalloc+0xc2>
 14a:	c0 91 00 00 	lds	r28, 0x0000
 14e:	d0 91 00 00 	lds	r29, 0x0000
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	4a 81       	ldd	r20, Y+2	; 0x02
 158:	5b 81       	ldd	r21, Y+3	; 0x03
 15a:	42 17       	cp	r20, r18
 15c:	53 07       	cpc	r21, r19
 15e:	00 f0       	brcs	.+0      	; 0x160 <pvPortMalloc+0xd8>
 160:	80 91 00 00 	lds	r24, 0x0000
 164:	90 91 00 00 	lds	r25, 0x0000
 168:	c8 17       	cp	r28, r24
 16a:	d9 07       	cpc	r29, r25
 16c:	01 f4       	brne	.+0      	; 0x16e <pvPortMalloc+0xe6>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <pvPortMalloc+0xe8>
 170:	88 81       	ld	r24, Y
 172:	99 81       	ldd	r25, Y+1	; 0x01
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	01 f0       	breq	.+0      	; 0x178 <pvPortMalloc+0xf0>
 178:	fe 01       	movw	r30, r28
 17a:	ec 01       	movw	r28, r24
 17c:	00 c0       	rjmp	.+0      	; 0x17e <pvPortMalloc+0xf6>
 17e:	00 81       	ld	r16, Z
 180:	11 81       	ldd	r17, Z+1	; 0x01
 182:	0d 5f       	subi	r16, 0xFD	; 253
 184:	1f 4f       	sbci	r17, 0xFF	; 255
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
 18e:	42 1b       	sub	r20, r18
 190:	53 0b       	sbc	r21, r19
 192:	47 30       	cpi	r20, 0x07	; 7
 194:	51 05       	cpc	r21, r1
 196:	00 f0       	brcs	.+0      	; 0x198 <pvPortMalloc+0x110>
 198:	ce 01       	movw	r24, r28
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	53 83       	std	Z+3, r21	; 0x03
 1a2:	42 83       	std	Z+2, r20	; 0x02
 1a4:	3b 83       	std	Y+3, r19	; 0x03
 1a6:	2a 83       	std	Y+2, r18	; 0x02
 1a8:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 1ac:	2a 81       	ldd	r18, Y+2	; 0x02
 1ae:	3b 81       	ldd	r19, Y+3	; 0x03
 1b0:	c6 01       	movw	r24, r12
 1b2:	82 1b       	sub	r24, r18
 1b4:	93 0b       	sbc	r25, r19
 1b6:	90 93 00 00 	sts	0x0000, r25
 1ba:	80 93 00 00 	sts	0x0000, r24
 1be:	40 91 00 00 	lds	r20, 0x0000
 1c2:	50 91 00 00 	lds	r21, 0x0000
 1c6:	84 17       	cp	r24, r20
 1c8:	95 07       	cpc	r25, r21
 1ca:	00 f4       	brcc	.+0      	; 0x1cc <pvPortMalloc+0x144>
 1cc:	90 93 00 00 	sts	0x0000, r25
 1d0:	80 93 00 00 	sts	0x0000, r24
 1d4:	e2 2a       	or	r14, r18
 1d6:	f3 2a       	or	r15, r19
 1d8:	fb 82       	std	Y+3, r15	; 0x03
 1da:	ea 82       	std	Y+2, r14	; 0x02
 1dc:	19 82       	std	Y+1, r1	; 0x01
 1de:	18 82       	st	Y, r1
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <pvPortMalloc+0x15a>
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 1ea:	c8 01       	movw	r24, r16
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	df 90       	pop	r13
 1fa:	cf 90       	pop	r12
 1fc:	08 95       	ret

Disassembly of section .text.vPortFree:

00000286 <vPortFree>:
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	01 f0       	breq	.+0      	; 0x28e <vPortFree+0x8>
 28e:	ec 01       	movw	r28, r24
 290:	23 97       	sbiw	r28, 0x03	; 3
 292:	2a 81       	ldd	r18, Y+2	; 0x02
 294:	3b 81       	ldd	r19, Y+3	; 0x03
 296:	80 91 00 00 	lds	r24, 0x0000
 29a:	90 91 00 00 	lds	r25, 0x0000
 29e:	ac 01       	movw	r20, r24
 2a0:	42 23       	and	r20, r18
 2a2:	53 23       	and	r21, r19
 2a4:	45 2b       	or	r20, r21
 2a6:	01 f0       	breq	.+0      	; 0x2a8 <vPortFree+0x22>
 2a8:	48 81       	ld	r20, Y
 2aa:	59 81       	ldd	r21, Y+1	; 0x01
 2ac:	45 2b       	or	r20, r21
 2ae:	01 f4       	brne	.+0      	; 0x2b0 <vPortFree+0x2a>
 2b0:	80 95       	com	r24
 2b2:	90 95       	com	r25
 2b4:	82 23       	and	r24, r18
 2b6:	93 23       	and	r25, r19
 2b8:	9b 83       	std	Y+3, r25	; 0x03
 2ba:	8a 83       	std	Y+2, r24	; 0x02
 2bc:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 2c0:	80 91 00 00 	lds	r24, 0x0000
 2c4:	90 91 00 00 	lds	r25, 0x0000
 2c8:	2a 81       	ldd	r18, Y+2	; 0x02
 2ca:	3b 81       	ldd	r19, Y+3	; 0x03
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	90 93 00 00 	sts	0x0000, r25
 2d4:	80 93 00 00 	sts	0x0000, r24
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	0c 94 00 00 	jmp	0	; 0x0 <xBlockAllocatedBit>
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

Disassembly of section .text.xPortGetFreeHeapSize:

00000572 <xPortGetFreeHeapSize>:
 572:	80 91 00 00 	lds	r24, 0x0000
 576:	90 91 00 00 	lds	r25, 0x0000
 57a:	08 95       	ret

Disassembly of section .text.xPortGetMinimumEverFreeHeapSize:

00000aee <xPortGetMinimumEverFreeHeapSize>:
 aee:	80 91 00 00 	lds	r24, 0x0000
 af2:	90 91 00 00 	lds	r25, 0x0000
 af6:	08 95       	ret

Disassembly of section .text.vPortInitialiseBlocks:

000015e6 <vPortInitialiseBlocks>:
    15e6:	08 95       	ret

heap_5.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvInsertBlockIntoFreeList 00000088  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.pvPortMalloc 00000102  00000000  00000000  000000bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vPortFree 00000066  00000000  00000000  000001be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xPortGetFreeHeapSize 0000000a  00000000  00000000  00000224  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.xPortGetMinimumEverFreeHeapSize 0000000a  00000000  00000000  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.vPortDefineHeapRegions 000000d0  00000000  00000000  00000238  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.xBlockAllocatedBit 00000002  00000000  00000000  00000308  2**0
                  ALLOC
 10 .bss.xMinimumEverFreeBytesRemaining 00000002  00000000  00000000  00000308  2**0
                  ALLOC
 11 .bss.xFreeBytesRemaining 00000002  00000000  00000000  00000308  2**0
                  ALLOC
 12 .bss.pxEnd    00000002  00000000  00000000  00000308  2**0
                  ALLOC
 13 .bss.xStart   00000004  00000000  00000000  00000308  2**0
                  ALLOC
 14 .comment      00000012  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvInsertBlockIntoFreeList:

00000000 <prvInsertBlockIntoFreeList>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	a0 e0       	ldi	r26, 0x00	; 0
   8:	b0 e0       	ldi	r27, 0x00	; 0
   a:	cd 91       	ld	r28, X+
   c:	dc 91       	ld	r29, X
   e:	11 97       	sbiw	r26, 0x01	; 1
  10:	ce 17       	cp	r28, r30
  12:	df 07       	cpc	r29, r31
  14:	00 f4       	brcc	.+0      	; 0x16 <prvInsertBlockIntoFreeList+0x16>
  16:	de 01       	movw	r26, r28
  18:	00 c0       	rjmp	.+0      	; 0x1a <prvInsertBlockIntoFreeList+0x1a>
  1a:	12 96       	adiw	r26, 0x02	; 2
  1c:	2d 91       	ld	r18, X+
  1e:	3c 91       	ld	r19, X
  20:	13 97       	sbiw	r26, 0x03	; 3
  22:	cd 01       	movw	r24, r26
  24:	82 0f       	add	r24, r18
  26:	93 1f       	adc	r25, r19
  28:	8e 17       	cp	r24, r30
  2a:	9f 07       	cpc	r25, r31
  2c:	01 f4       	brne	.+0      	; 0x2e <prvInsertBlockIntoFreeList+0x2e>
  2e:	82 81       	ldd	r24, Z+2	; 0x02
  30:	93 81       	ldd	r25, Z+3	; 0x03
  32:	82 0f       	add	r24, r18
  34:	93 1f       	adc	r25, r19
  36:	13 96       	adiw	r26, 0x03	; 3
  38:	9c 93       	st	X, r25
  3a:	8e 93       	st	-X, r24
  3c:	12 97       	sbiw	r26, 0x02	; 2
  3e:	fd 01       	movw	r30, r26
  40:	22 81       	ldd	r18, Z+2	; 0x02
  42:	33 81       	ldd	r19, Z+3	; 0x03
  44:	cf 01       	movw	r24, r30
  46:	82 0f       	add	r24, r18
  48:	93 1f       	adc	r25, r19
  4a:	8c 17       	cp	r24, r28
  4c:	9d 07       	cpc	r25, r29
  4e:	01 f4       	brne	.+0      	; 0x50 <prvInsertBlockIntoFreeList+0x50>
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	c8 17       	cp	r28, r24
  5a:	d9 07       	cpc	r29, r25
  5c:	01 f0       	breq	.+0      	; 0x5e <prvInsertBlockIntoFreeList+0x5e>
  5e:	8a 81       	ldd	r24, Y+2	; 0x02
  60:	9b 81       	ldd	r25, Y+3	; 0x03
  62:	82 0f       	add	r24, r18
  64:	93 1f       	adc	r25, r19
  66:	93 83       	std	Z+3, r25	; 0x03
  68:	82 83       	std	Z+2, r24	; 0x02
  6a:	88 81       	ld	r24, Y
  6c:	99 81       	ldd	r25, Y+1	; 0x01
  6e:	91 83       	std	Z+1, r25	; 0x01
  70:	80 83       	st	Z, r24
  72:	00 c0       	rjmp	.+0      	; 0x74 <prvInsertBlockIntoFreeList+0x74>
  74:	d1 83       	std	Z+1, r29	; 0x01
  76:	c0 83       	st	Z, r28
  78:	ae 17       	cp	r26, r30
  7a:	bf 07       	cpc	r27, r31
  7c:	01 f0       	breq	.+0      	; 0x7e <prvInsertBlockIntoFreeList+0x7e>
  7e:	ed 93       	st	X+, r30
  80:	fc 93       	st	X, r31
  82:	df 91       	pop	r29
  84:	cf 91       	pop	r28
  86:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00000088 <pvPortMalloc>:
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
  9a:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
  9e:	e0 90 00 00 	lds	r14, 0x0000
  a2:	f0 90 00 00 	lds	r15, 0x0000
  a6:	ce 01       	movw	r24, r28
  a8:	8e 21       	and	r24, r14
  aa:	9f 21       	and	r25, r15
  ac:	89 2b       	or	r24, r25
  ae:	01 f0       	breq	.+0      	; 0xb0 <pvPortMalloc+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <pvPortMalloc+0x2a>
  b2:	20 97       	sbiw	r28, 0x00	; 0
  b4:	01 f4       	brne	.+0      	; 0xb6 <pvPortMalloc+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <pvPortMalloc+0x30>
  b8:	9e 01       	movw	r18, r28
  ba:	2c 5f       	subi	r18, 0xFC	; 252
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	21 15       	cp	r18, r1
  c0:	31 05       	cpc	r19, r1
  c2:	01 f4       	brne	.+0      	; 0xc4 <pvPortMalloc+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <pvPortMalloc+0x3e>
  c6:	c0 90 00 00 	lds	r12, 0x0000
  ca:	d0 90 00 00 	lds	r13, 0x0000
  ce:	c2 16       	cp	r12, r18
  d0:	d3 06       	cpc	r13, r19
  d2:	00 f4       	brcc	.+0      	; 0xd4 <pvPortMalloc+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <pvPortMalloc+0x4e>
  d6:	c0 91 00 00 	lds	r28, 0x0000
  da:	d0 91 00 00 	lds	r29, 0x0000
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	4a 81       	ldd	r20, Y+2	; 0x02
  e4:	5b 81       	ldd	r21, Y+3	; 0x03
  e6:	42 17       	cp	r20, r18
  e8:	53 07       	cpc	r21, r19
  ea:	00 f0       	brcs	.+0      	; 0xec <pvPortMalloc+0x64>
  ec:	80 91 00 00 	lds	r24, 0x0000
  f0:	90 91 00 00 	lds	r25, 0x0000
  f4:	c8 17       	cp	r28, r24
  f6:	d9 07       	cpc	r29, r25
  f8:	01 f4       	brne	.+0      	; 0xfa <pvPortMalloc+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <pvPortMalloc+0x74>
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	01 f0       	breq	.+0      	; 0x104 <pvPortMalloc+0x7c>
 104:	fe 01       	movw	r30, r28
 106:	ec 01       	movw	r28, r24
 108:	00 c0       	rjmp	.+0      	; 0x10a <pvPortMalloc+0x82>
 10a:	00 81       	ld	r16, Z
 10c:	11 81       	ldd	r17, Z+1	; 0x01
 10e:	0c 5f       	subi	r16, 0xFC	; 252
 110:	1f 4f       	sbci	r17, 0xFF	; 255
 112:	88 81       	ld	r24, Y
 114:	99 81       	ldd	r25, Y+1	; 0x01
 116:	91 83       	std	Z+1, r25	; 0x01
 118:	80 83       	st	Z, r24
 11a:	42 1b       	sub	r20, r18
 11c:	53 0b       	sbc	r21, r19
 11e:	49 30       	cpi	r20, 0x09	; 9
 120:	51 05       	cpc	r21, r1
 122:	00 f0       	brcs	.+0      	; 0x124 <pvPortMalloc+0x9c>
 124:	ce 01       	movw	r24, r28
 126:	82 0f       	add	r24, r18
 128:	93 1f       	adc	r25, r19
 12a:	fc 01       	movw	r30, r24
 12c:	53 83       	std	Z+3, r21	; 0x03
 12e:	42 83       	std	Z+2, r20	; 0x02
 130:	3b 83       	std	Y+3, r19	; 0x03
 132:	2a 83       	std	Y+2, r18	; 0x02
 134:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 138:	2a 81       	ldd	r18, Y+2	; 0x02
 13a:	3b 81       	ldd	r19, Y+3	; 0x03
 13c:	c6 01       	movw	r24, r12
 13e:	82 1b       	sub	r24, r18
 140:	93 0b       	sbc	r25, r19
 142:	90 93 00 00 	sts	0x0000, r25
 146:	80 93 00 00 	sts	0x0000, r24
 14a:	40 91 00 00 	lds	r20, 0x0000
 14e:	50 91 00 00 	lds	r21, 0x0000
 152:	84 17       	cp	r24, r20
 154:	95 07       	cpc	r25, r21
 156:	00 f4       	brcc	.+0      	; 0x158 <pvPortMalloc+0xd0>
 158:	90 93 00 00 	sts	0x0000, r25
 15c:	80 93 00 00 	sts	0x0000, r24
 160:	e2 2a       	or	r14, r18
 162:	f3 2a       	or	r15, r19
 164:	fb 82       	std	Y+3, r15	; 0x03
 166:	ea 82       	std	Y+2, r14	; 0x02
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	18 82       	st	Y, r1
 16c:	00 c0       	rjmp	.+0      	; 0x16e <pvPortMalloc+0xe6>
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 176:	c8 01       	movw	r24, r16
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	08 95       	ret

Disassembly of section .text.vPortFree:

00000212 <vPortFree>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	01 f0       	breq	.+0      	; 0x21a <vPortFree+0x8>
 21a:	ec 01       	movw	r28, r24
 21c:	24 97       	sbiw	r28, 0x04	; 4
 21e:	2a 81       	ldd	r18, Y+2	; 0x02
 220:	3b 81       	ldd	r19, Y+3	; 0x03
 222:	80 91 00 00 	lds	r24, 0x0000
 226:	90 91 00 00 	lds	r25, 0x0000
 22a:	ac 01       	movw	r20, r24
 22c:	42 23       	and	r20, r18
 22e:	53 23       	and	r21, r19
 230:	45 2b       	or	r20, r21
 232:	01 f0       	breq	.+0      	; 0x234 <vPortFree+0x22>
 234:	48 81       	ld	r20, Y
 236:	59 81       	ldd	r21, Y+1	; 0x01
 238:	45 2b       	or	r20, r21
 23a:	01 f4       	brne	.+0      	; 0x23c <vPortFree+0x2a>
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	82 23       	and	r24, r18
 242:	93 23       	and	r25, r19
 244:	9b 83       	std	Y+3, r25	; 0x03
 246:	8a 83       	std	Y+2, r24	; 0x02
 248:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 24c:	80 91 00 00 	lds	r24, 0x0000
 250:	90 91 00 00 	lds	r25, 0x0000
 254:	2a 81       	ldd	r18, Y+2	; 0x02
 256:	3b 81       	ldd	r19, Y+3	; 0x03
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	90 93 00 00 	sts	0x0000, r25
 260:	80 93 00 00 	sts	0x0000, r24
 264:	ce 01       	movw	r24, r28
 266:	0e 94 00 00 	call	0	; 0x0 <xBlockAllocatedBit>
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	0c 94 00 00 	jmp	0	; 0x0 <xBlockAllocatedBit>
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

Disassembly of section .text.xPortGetFreeHeapSize:

0000048a <xPortGetFreeHeapSize>:
 48a:	80 91 00 00 	lds	r24, 0x0000
 48e:	90 91 00 00 	lds	r25, 0x0000
 492:	08 95       	ret

Disassembly of section .text.xPortGetMinimumEverFreeHeapSize:

0000091e <xPortGetMinimumEverFreeHeapSize>:
 91e:	80 91 00 00 	lds	r24, 0x0000
 922:	90 91 00 00 	lds	r25, 0x0000
 926:	08 95       	ret

Disassembly of section .text.vPortDefineHeapRegions:

00001246 <vPortDefineHeapRegions>:
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	c0 91 00 00 	lds	r28, 0x0000
    1258:	d0 91 00 00 	lds	r29, 0x0000
    125c:	fc 01       	movw	r30, r24
    125e:	f1 2c       	mov	r15, r1
    1260:	c1 2c       	mov	r12, r1
    1262:	d1 2c       	mov	r13, r1
    1264:	42 81       	ldd	r20, Z+2	; 0x02
    1266:	53 81       	ldd	r21, Z+3	; 0x03
    1268:	41 15       	cp	r20, r1
    126a:	51 05       	cpc	r21, r1
    126c:	01 f0       	breq	.+0      	; 0x126e <vPortDefineHeapRegions+0x28>
    126e:	01 90       	ld	r0, Z+
    1270:	f0 81       	ld	r31, Z
    1272:	e0 2d       	mov	r30, r0
    1274:	f1 10       	cpse	r15, r1
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <vPortDefineHeapRegions+0x32>
    1278:	f0 93 00 00 	sts	0x0000, r31
    127c:	e0 93 00 00 	sts	0x0000, r30
    1280:	10 92 00 00 	sts	0x0000, r1
    1284:	10 92 00 00 	sts	0x0000, r1
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	44 50       	subi	r20, 0x04	; 4
    128e:	51 09       	sbc	r21, r1
    1290:	61 09       	sbc	r22, r1
    1292:	71 09       	sbc	r23, r1
    1294:	8f 01       	movw	r16, r30
    1296:	22 27       	eor	r18, r18
    1298:	17 fd       	sbrc	r17, 7
    129a:	20 95       	com	r18
    129c:	32 2f       	mov	r19, r18
    129e:	40 0f       	add	r20, r16
    12a0:	51 1f       	adc	r21, r17
    12a2:	62 1f       	adc	r22, r18
    12a4:	73 1f       	adc	r23, r19
    12a6:	9a 01       	movw	r18, r20
    12a8:	da 01       	movw	r26, r20
    12aa:	13 96       	adiw	r26, 0x03	; 3
    12ac:	1c 92       	st	X, r1
    12ae:	1e 92       	st	-X, r1
    12b0:	12 97       	sbiw	r26, 0x02	; 2
    12b2:	1d 92       	st	X+, r1
    12b4:	1c 92       	st	X, r1
    12b6:	2e 1b       	sub	r18, r30
    12b8:	3f 0b       	sbc	r19, r31
    12ba:	33 83       	std	Z+3, r19	; 0x03
    12bc:	22 83       	std	Z+2, r18	; 0x02
    12be:	51 83       	std	Z+1, r21	; 0x01
    12c0:	40 83       	st	Z, r20
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	01 f0       	breq	.+0      	; 0x12c6 <vPortDefineHeapRegions+0x80>
    12c6:	f9 83       	std	Y+1, r31	; 0x01
    12c8:	e8 83       	st	Y, r30
    12ca:	c2 0e       	add	r12, r18
    12cc:	d3 1e       	adc	r13, r19
    12ce:	f3 94       	inc	r15
    12d0:	fc 01       	movw	r30, r24
    12d2:	bf 2d       	mov	r27, r15
    12d4:	24 e0       	ldi	r18, 0x04	; 4
    12d6:	b2 02       	muls	r27, r18
    12d8:	e0 0d       	add	r30, r0
    12da:	f1 1d       	adc	r31, r1
    12dc:	11 24       	eor	r1, r1
    12de:	ea 01       	movw	r28, r20
    12e0:	00 c0       	rjmp	.+0      	; 0x12e2 <vPortDefineHeapRegions+0x9c>
    12e2:	d0 93 00 00 	sts	0x0000, r29
    12e6:	c0 93 00 00 	sts	0x0000, r28
    12ea:	d0 92 00 00 	sts	0x0000, r13
    12ee:	c0 92 00 00 	sts	0x0000, r12
    12f2:	d0 92 00 00 	sts	0x0000, r13
    12f6:	c0 92 00 00 	sts	0x0000, r12
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e8       	ldi	r25, 0x80	; 128
    12fe:	90 93 00 00 	sts	0x0000, r25
    1302:	80 93 00 00 	sts	0x0000, r24
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	08 95       	ret

port.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pxPortInitialiseStack 000000d8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.xPortStartScheduler 00000074  00000000  00000000  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vPortEndScheduler 00000002  00000000  00000000  00000180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.vPortYield 000000b2  00000000  00000000  00000182  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.vPortYieldFromTick 000000b8  00000000  00000000  00000234  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_11 00000006  00000000  00000000  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .comment      00000012  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pxPortInitialiseStack:

00000000 <pxPortInitialiseStack>:
   0:	31 e1       	ldi	r19, 0x11	; 17
   2:	fc 01       	movw	r30, r24
   4:	30 83       	st	Z, r19
   6:	31 97       	sbiw	r30, 0x01	; 1
   8:	22 e2       	ldi	r18, 0x22	; 34
   a:	20 83       	st	Z, r18
   c:	31 97       	sbiw	r30, 0x01	; 1
   e:	a3 e3       	ldi	r26, 0x33	; 51
  10:	a0 83       	st	Z, r26
  12:	31 97       	sbiw	r30, 0x01	; 1
  14:	60 83       	st	Z, r22
  16:	31 97       	sbiw	r30, 0x01	; 1
  18:	70 83       	st	Z, r23
  1a:	31 97       	sbiw	r30, 0x01	; 1
  1c:	10 82       	st	Z, r1
  1e:	31 97       	sbiw	r30, 0x01	; 1
  20:	60 e8       	ldi	r22, 0x80	; 128
  22:	60 83       	st	Z, r22
  24:	31 97       	sbiw	r30, 0x01	; 1
  26:	10 82       	st	Z, r1
  28:	31 97       	sbiw	r30, 0x01	; 1
  2a:	62 e0       	ldi	r22, 0x02	; 2
  2c:	60 83       	st	Z, r22
  2e:	31 97       	sbiw	r30, 0x01	; 1
  30:	63 e0       	ldi	r22, 0x03	; 3
  32:	60 83       	st	Z, r22
  34:	31 97       	sbiw	r30, 0x01	; 1
  36:	64 e0       	ldi	r22, 0x04	; 4
  38:	60 83       	st	Z, r22
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	65 e0       	ldi	r22, 0x05	; 5
  3e:	60 83       	st	Z, r22
  40:	31 97       	sbiw	r30, 0x01	; 1
  42:	66 e0       	ldi	r22, 0x06	; 6
  44:	60 83       	st	Z, r22
  46:	31 97       	sbiw	r30, 0x01	; 1
  48:	67 e0       	ldi	r22, 0x07	; 7
  4a:	60 83       	st	Z, r22
  4c:	31 97       	sbiw	r30, 0x01	; 1
  4e:	68 e0       	ldi	r22, 0x08	; 8
  50:	60 83       	st	Z, r22
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	69 e0       	ldi	r22, 0x09	; 9
  56:	60 83       	st	Z, r22
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	60 e1       	ldi	r22, 0x10	; 16
  5c:	60 83       	st	Z, r22
  5e:	31 97       	sbiw	r30, 0x01	; 1
  60:	30 83       	st	Z, r19
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	32 e1       	ldi	r19, 0x12	; 18
  66:	30 83       	st	Z, r19
  68:	31 97       	sbiw	r30, 0x01	; 1
  6a:	33 e1       	ldi	r19, 0x13	; 19
  6c:	30 83       	st	Z, r19
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	34 e1       	ldi	r19, 0x14	; 20
  72:	30 83       	st	Z, r19
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	35 e1       	ldi	r19, 0x15	; 21
  78:	30 83       	st	Z, r19
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	36 e1       	ldi	r19, 0x16	; 22
  7e:	30 83       	st	Z, r19
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	37 e1       	ldi	r19, 0x17	; 23
  84:	30 83       	st	Z, r19
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	38 e1       	ldi	r19, 0x18	; 24
  8a:	30 83       	st	Z, r19
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	39 e1       	ldi	r19, 0x19	; 25
  90:	30 83       	st	Z, r19
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	30 e2       	ldi	r19, 0x20	; 32
  96:	30 83       	st	Z, r19
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	31 e2       	ldi	r19, 0x21	; 33
  9c:	30 83       	st	Z, r19
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	20 83       	st	Z, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	23 e2       	ldi	r18, 0x23	; 35
  a6:	20 83       	st	Z, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	40 83       	st	Z, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	50 83       	st	Z, r21
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	26 e2       	ldi	r18, 0x26	; 38
  b4:	20 83       	st	Z, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	27 e2       	ldi	r18, 0x27	; 39
  ba:	20 83       	st	Z, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	28 e2       	ldi	r18, 0x28	; 40
  c0:	20 83       	st	Z, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	29 e2       	ldi	r18, 0x29	; 41
  c6:	20 83       	st	Z, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	20 e3       	ldi	r18, 0x30	; 48
  cc:	20 83       	st	Z, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	21 e3       	ldi	r18, 0x31	; 49
  d2:	20 83       	st	Z, r18
  d4:	86 97       	sbiw	r24, 0x26	; 38
  d6:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

000000d8 <xPortStartScheduler>:
  d8:	10 92 89 00 	sts	0x0089, r1
  dc:	8c e7       	ldi	r24, 0x7C	; 124
  de:	80 93 88 00 	sts	0x0088, r24
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	80 93 81 00 	sts	0x0081, r24
  e8:	ef e6       	ldi	r30, 0x6F	; 111
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	a0 91 00 00 	lds	r26, 0x0000
  f6:	b0 91 00 00 	lds	r27, 0x0000
  fa:	cd 91       	ld	r28, X+
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	dd 91       	ld	r29, X+
 100:	de bf       	out	0x3e, r29	; 62
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	bf 90       	pop	r11
 12c:	af 90       	pop	r10
 12e:	9f 90       	pop	r9
 130:	8f 90       	pop	r8
 132:	7f 90       	pop	r7
 134:	6f 90       	pop	r6
 136:	5f 90       	pop	r5
 138:	4f 90       	pop	r4
 13a:	3f 90       	pop	r3
 13c:	2f 90       	pop	r2
 13e:	1f 90       	pop	r1
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	08 95       	ret
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret

Disassembly of section .text.vPortEndScheduler:

00000224 <vPortEndScheduler>:
 224:	08 95       	ret

Disassembly of section .text.vPortYield:

0000044a <vPortYield>:
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	0f 92       	push	r0
 452:	1f 92       	push	r1
 454:	11 24       	eor	r1, r1
 456:	2f 92       	push	r2
 458:	3f 92       	push	r3
 45a:	4f 92       	push	r4
 45c:	5f 92       	push	r5
 45e:	6f 92       	push	r6
 460:	7f 92       	push	r7
 462:	8f 92       	push	r8
 464:	9f 92       	push	r9
 466:	af 92       	push	r10
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	a0 91 00 00 	lds	r26, 0x0000
 496:	b0 91 00 00 	lds	r27, 0x0000
 49a:	0d b6       	in	r0, 0x3d	; 61
 49c:	0d 92       	st	X+, r0
 49e:	0e b6       	in	r0, 0x3e	; 62
 4a0:	0d 92       	st	X+, r0
 4a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4a6:	a0 91 00 00 	lds	r26, 0x0000
 4aa:	b0 91 00 00 	lds	r27, 0x0000
 4ae:	cd 91       	ld	r28, X+
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	dd 91       	ld	r29, X+
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	8f 90       	pop	r8
 4e6:	7f 90       	pop	r7
 4e8:	6f 90       	pop	r6
 4ea:	5f 90       	pop	r5
 4ec:	4f 90       	pop	r4
 4ee:	3f 90       	pop	r3
 4f0:	2f 90       	pop	r2
 4f2:	1f 90       	pop	r1
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000946 <vPortYieldFromTick>:
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	0f 92       	push	r0
 94e:	1f 92       	push	r1
 950:	11 24       	eor	r1, r1
 952:	2f 92       	push	r2
 954:	3f 92       	push	r3
 956:	4f 92       	push	r4
 958:	5f 92       	push	r5
 95a:	6f 92       	push	r6
 95c:	7f 92       	push	r7
 95e:	8f 92       	push	r8
 960:	9f 92       	push	r9
 962:	af 92       	push	r10
 964:	bf 92       	push	r11
 966:	cf 92       	push	r12
 968:	df 92       	push	r13
 96a:	ef 92       	push	r14
 96c:	ff 92       	push	r15
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	ef 93       	push	r30
 98c:	ff 93       	push	r31
 98e:	a0 91 00 00 	lds	r26, 0x0000
 992:	b0 91 00 00 	lds	r27, 0x0000
 996:	0d b6       	in	r0, 0x3d	; 61
 998:	0d 92       	st	X+, r0
 99a:	0e b6       	in	r0, 0x3e	; 62
 99c:	0d 92       	st	X+, r0
 99e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9a2:	81 11       	cpse	r24, r1
 9a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9a8:	a0 91 00 00 	lds	r26, 0x0000
 9ac:	b0 91 00 00 	lds	r27, 0x0000
 9b0:	cd 91       	ld	r28, X+
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	dd 91       	ld	r29, X+
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	bf 91       	pop	r27
 9c2:	af 91       	pop	r26
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	7f 91       	pop	r23
 9ca:	6f 91       	pop	r22
 9cc:	5f 91       	pop	r21
 9ce:	4f 91       	pop	r20
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	1f 91       	pop	r17
 9d6:	0f 91       	pop	r16
 9d8:	ff 90       	pop	r15
 9da:	ef 90       	pop	r14
 9dc:	df 90       	pop	r13
 9de:	cf 90       	pop	r12
 9e0:	bf 90       	pop	r11
 9e2:	af 90       	pop	r10
 9e4:	9f 90       	pop	r9
 9e6:	8f 90       	pop	r8
 9e8:	7f 90       	pop	r7
 9ea:	6f 90       	pop	r6
 9ec:	5f 90       	pop	r5
 9ee:	4f 90       	pop	r4
 9f0:	3f 90       	pop	r3
 9f2:	2f 90       	pop	r2
 9f4:	1f 90       	pop	r1
 9f6:	0f 90       	pop	r0
 9f8:	0f be       	out	0x3f, r0	; 63
 9fa:	0f 90       	pop	r0
 9fc:	08 95       	ret

Disassembly of section .text.__vector_11:

00001344 <__vector_11>:
    1344:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1348:	18 95       	reti

croutine.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.xCoRoutineCreate 000000e8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vCoRoutineAddToDelayedList 00000084  00000000  00000000  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vCoRoutineSchedule 000001c0  00000000  00000000  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xCoRoutineRemoveFromEventList 0000004a  00000000  00000000  00000360  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .bss.xPassedTicks 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
  8 .bss.xLastTickCount 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
  9 .bss.xCoRoutineTickCount 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
 10 .bss.uxTopCoRoutineReadyPriority 00000001  00000000  00000000  000003aa  2**0
                  ALLOC
 11 .bss.pxCurrentCoRoutine 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
 12 .bss.xPendingReadyCoRoutineList 00000009  00000000  00000000  000003aa  2**0
                  ALLOC
 13 .bss.pxOverflowDelayedCoRoutineList 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
 14 .bss.pxDelayedCoRoutineList 00000002  00000000  00000000  000003aa  2**0
                  ALLOC
 15 .bss.xDelayedCoRoutineList2 00000009  00000000  00000000  000003aa  2**0
                  ALLOC
 16 .bss.xDelayedCoRoutineList1 00000009  00000000  00000000  000003aa  2**0
                  ALLOC
 17 .bss.pxReadyCoRoutineLists 00000012  00000000  00000000  000003aa  2**0
                  ALLOC
 18 .comment      00000012  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY

Disassembly of section .text.xCoRoutineCreate:

00000000 <xCoRoutineCreate>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	7c 01       	movw	r14, r24
  10:	d6 2e       	mov	r13, r22
  12:	14 2f       	mov	r17, r20
  14:	8a e1       	ldi	r24, 0x1A	; 26
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  1c:	ec 01       	movw	r28, r24
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f4       	brne	.+0      	; 0x22 <xCoRoutineCreate+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <xCoRoutineCreate+0x24>
  24:	80 91 00 00 	lds	r24, 0x0000
  28:	90 91 00 00 	lds	r25, 0x0000
  2c:	89 2b       	or	r24, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <xCoRoutineCreate+0x30>
  30:	d0 93 00 00 	sts	0x0000, r29
  34:	c0 93 00 00 	sts	0x0000, r28
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	90 93 00 00 	sts	0x0000, r25
  68:	80 93 00 00 	sts	0x0000, r24
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	90 93 00 00 	sts	0x0000, r25
  74:	80 93 00 00 	sts	0x0000, r24
  78:	dd 20       	and	r13, r13
  7a:	01 f0       	breq	.+0      	; 0x7c <xCoRoutineCreate+0x7c>
  7c:	dd 24       	eor	r13, r13
  7e:	d3 94       	inc	r13
  80:	19 8e       	std	Y+25, r1	; 0x19
  82:	18 8e       	std	Y+24, r1	; 0x18
  84:	de 8a       	std	Y+22, r13	; 0x16
  86:	1f 8b       	std	Y+23, r17	; 0x17
  88:	fe 01       	movw	r30, r28
  8a:	e1 92       	st	Z+, r14
  8c:	f1 92       	st	Z+, r15
  8e:	8f 01       	movw	r16, r30
  90:	cf 01       	movw	r24, r30
  92:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  96:	ce 01       	movw	r24, r28
  98:	0c 96       	adiw	r24, 0x0c	; 12
  9a:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  9e:	d9 87       	std	Y+9, r29	; 0x09
  a0:	c8 87       	std	Y+8, r28	; 0x08
  a2:	db 8b       	std	Y+19, r29	; 0x13
  a4:	ca 8b       	std	Y+18, r28	; 0x12
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	8d 19       	sub	r24, r13
  ac:	91 09       	sbc	r25, r1
  ae:	9d 87       	std	Y+13, r25	; 0x0d
  b0:	8c 87       	std	Y+12, r24	; 0x0c
  b2:	8e 89       	ldd	r24, Y+22	; 0x16
  b4:	90 91 00 00 	lds	r25, 0x0000
  b8:	98 17       	cp	r25, r24
  ba:	00 f4       	brcc	.+0      	; 0xbc <xCoRoutineCreate+0xbc>
  bc:	80 93 00 00 	sts	0x0000, r24
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	8f 9f       	mul	r24, r31
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	b8 01       	movw	r22, r16
  ca:	80 50       	subi	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <xCoRoutineCreate+0xd6>
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	ff 90       	pop	r15
  e2:	ef 90       	pop	r14
  e4:	df 90       	pop	r13
  e6:	08 95       	ret

Disassembly of section .text.vCoRoutineAddToDelayedList:

000000e8 <vCoRoutineAddToDelayedList>:
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	8b 01       	movw	r16, r22
  f2:	c0 91 00 00 	lds	r28, 0x0000
  f6:	d0 91 00 00 	lds	r29, 0x0000
  fa:	c8 0f       	add	r28, r24
  fc:	d9 1f       	adc	r29, r25
  fe:	80 91 00 00 	lds	r24, 0x0000
 102:	90 91 00 00 	lds	r25, 0x0000
 106:	02 96       	adiw	r24, 0x02	; 2
 108:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 10c:	e0 91 00 00 	lds	r30, 0x0000
 110:	f0 91 00 00 	lds	r31, 0x0000
 114:	d3 83       	std	Z+3, r29	; 0x03
 116:	c2 83       	std	Z+2, r28	; 0x02
 118:	80 91 00 00 	lds	r24, 0x0000
 11c:	90 91 00 00 	lds	r25, 0x0000
 120:	bf 01       	movw	r22, r30
 122:	6e 5f       	subi	r22, 0xFE	; 254
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	c8 17       	cp	r28, r24
 128:	d9 07       	cpc	r29, r25
 12a:	00 f4       	brcc	.+0      	; 0x12c <vCoRoutineAddToDelayedList+0x44>
 12c:	80 91 00 00 	lds	r24, 0x0000
 130:	90 91 00 00 	lds	r25, 0x0000
 134:	00 c0       	rjmp	.+0      	; 0x136 <vCoRoutineAddToDelayedList+0x4e>
 136:	80 91 00 00 	lds	r24, 0x0000
 13a:	90 91 00 00 	lds	r25, 0x0000
 13e:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 142:	01 15       	cp	r16, r1
 144:	11 05       	cpc	r17, r1
 146:	01 f0       	breq	.+0      	; 0x148 <vCoRoutineAddToDelayedList+0x60>
 148:	60 91 00 00 	lds	r22, 0x0000
 14c:	70 91 00 00 	lds	r23, 0x0000
 150:	64 5f       	subi	r22, 0xF4	; 244
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	c8 01       	movw	r24, r16
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	0c 94 00 00 	jmp	0	; 0x0 <xPassedTicks>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

Disassembly of section .text.vCoRoutineSchedule:

00000254 <vCoRoutineSchedule>:
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	99 e0       	ldi	r25, 0x09	; 9
 260:	f9 2e       	mov	r15, r25
 262:	80 91 00 00 	lds	r24, 0x0000
 266:	88 23       	and	r24, r24
 268:	01 f0       	breq	.+0      	; 0x26a <vCoRoutineSchedule+0x16>
 26a:	f8 94       	cli
 26c:	e0 91 00 00 	lds	r30, 0x0000
 270:	f0 91 00 00 	lds	r31, 0x0000
 274:	c6 81       	ldd	r28, Z+6	; 0x06
 276:	d7 81       	ldd	r29, Z+7	; 0x07
 278:	ce 01       	movw	r24, r28
 27a:	0c 96       	adiw	r24, 0x0c	; 12
 27c:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 280:	78 94       	sei
 282:	8e 01       	movw	r16, r28
 284:	0e 5f       	subi	r16, 0xFE	; 254
 286:	1f 4f       	sbci	r17, 0xFF	; 255
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 28e:	8e 89       	ldd	r24, Y+22	; 0x16
 290:	90 91 00 00 	lds	r25, 0x0000
 294:	98 17       	cp	r25, r24
 296:	00 f4       	brcc	.+0      	; 0x298 <vCoRoutineSchedule+0x44>
 298:	80 93 00 00 	sts	0x0000, r24
 29c:	f8 9e       	mul	r15, r24
 29e:	c0 01       	movw	r24, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	b8 01       	movw	r22, r16
 2a4:	80 50       	subi	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <vCoRoutineSchedule+0x5a>
 2ae:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 2b2:	20 91 00 00 	lds	r18, 0x0000
 2b6:	30 91 00 00 	lds	r19, 0x0000
 2ba:	82 1b       	sub	r24, r18
 2bc:	93 0b       	sbc	r25, r19
 2be:	90 93 00 00 	sts	0x0000, r25
 2c2:	80 93 00 00 	sts	0x0000, r24
 2c6:	89 e0       	ldi	r24, 0x09	; 9
 2c8:	f8 2e       	mov	r15, r24
 2ca:	20 91 00 00 	lds	r18, 0x0000
 2ce:	30 91 00 00 	lds	r19, 0x0000
 2d2:	80 91 00 00 	lds	r24, 0x0000
 2d6:	90 91 00 00 	lds	r25, 0x0000
 2da:	21 15       	cp	r18, r1
 2dc:	31 05       	cpc	r19, r1
 2de:	01 f4       	brne	.+0      	; 0x2e0 <vCoRoutineSchedule+0x8c>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <vCoRoutineSchedule+0x8e>
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 00 00 	sts	0x0000, r25
 2e8:	80 93 00 00 	sts	0x0000, r24
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	31 09       	sbc	r19, r1
 2f0:	30 93 00 00 	sts	0x0000, r19
 2f4:	20 93 00 00 	sts	0x0000, r18
 2f8:	89 2b       	or	r24, r25
 2fa:	01 f0       	breq	.+0      	; 0x2fc <vCoRoutineSchedule+0xa8>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <vCoRoutineSchedule+0xaa>
 2fe:	80 91 00 00 	lds	r24, 0x0000
 302:	90 91 00 00 	lds	r25, 0x0000
 306:	20 91 00 00 	lds	r18, 0x0000
 30a:	30 91 00 00 	lds	r19, 0x0000
 30e:	30 93 00 00 	sts	0x0000, r19
 312:	20 93 00 00 	sts	0x0000, r18
 316:	90 93 00 00 	sts	0x0000, r25
 31a:	80 93 00 00 	sts	0x0000, r24
 31e:	00 c0       	rjmp	.+0      	; 0x320 <vCoRoutineSchedule+0xcc>
 320:	05 80       	ldd	r0, Z+5	; 0x05
 322:	f6 81       	ldd	r31, Z+6	; 0x06
 324:	e0 2d       	mov	r30, r0
 326:	c6 81       	ldd	r28, Z+6	; 0x06
 328:	d7 81       	ldd	r29, Z+7	; 0x07
 32a:	20 91 00 00 	lds	r18, 0x0000
 32e:	30 91 00 00 	lds	r19, 0x0000
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	9b 81       	ldd	r25, Y+3	; 0x03
 336:	28 17       	cp	r18, r24
 338:	39 07       	cpc	r19, r25
 33a:	00 f0       	brcs	.+0      	; 0x33c <vCoRoutineSchedule+0xe8>
 33c:	f8 94       	cli
 33e:	8e 01       	movw	r16, r28
 340:	0e 5f       	subi	r16, 0xFE	; 254
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	c8 01       	movw	r24, r16
 346:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 34a:	8c 89       	ldd	r24, Y+20	; 0x14
 34c:	9d 89       	ldd	r25, Y+21	; 0x15
 34e:	89 2b       	or	r24, r25
 350:	01 f0       	breq	.+0      	; 0x352 <vCoRoutineSchedule+0xfe>
 352:	ce 01       	movw	r24, r28
 354:	0c 96       	adiw	r24, 0x0c	; 12
 356:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 35a:	78 94       	sei
 35c:	8e 89       	ldd	r24, Y+22	; 0x16
 35e:	90 91 00 00 	lds	r25, 0x0000
 362:	98 17       	cp	r25, r24
 364:	00 f4       	brcc	.+0      	; 0x366 <vCoRoutineSchedule+0x112>
 366:	80 93 00 00 	sts	0x0000, r24
 36a:	f8 9e       	mul	r15, r24
 36c:	c0 01       	movw	r24, r0
 36e:	11 24       	eor	r1, r1
 370:	b8 01       	movw	r22, r16
 372:	80 50       	subi	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 37a:	e0 91 00 00 	lds	r30, 0x0000
 37e:	f0 91 00 00 	lds	r31, 0x0000
 382:	80 81       	ld	r24, Z
 384:	81 11       	cpse	r24, r1
 386:	00 c0       	rjmp	.+0      	; 0x388 <vCoRoutineSchedule+0x134>
 388:	00 c0       	rjmp	.+0      	; 0x38a <vCoRoutineSchedule+0x136>
 38a:	90 93 00 00 	sts	0x0000, r25
 38e:	80 93 00 00 	sts	0x0000, r24
 392:	80 91 00 00 	lds	r24, 0x0000
 396:	29 e0       	ldi	r18, 0x09	; 9
 398:	28 9f       	mul	r18, r24
 39a:	f0 01       	movw	r30, r0
 39c:	11 24       	eor	r1, r1
 39e:	e0 50       	subi	r30, 0x00	; 0
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	90 81       	ld	r25, Z
 3a4:	91 11       	cpse	r25, r1
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <vCoRoutineSchedule+0x154>
 3a8:	81 11       	cpse	r24, r1
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <vCoRoutineSchedule+0x158>
 3ac:	10 92 00 00 	sts	0x0000, r1
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	08 95       	ret
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <vCoRoutineSchedule+0x16c>
 3c0:	80 93 00 00 	sts	0x0000, r24
 3c4:	a1 81       	ldd	r26, Z+1	; 0x01
 3c6:	b2 81       	ldd	r27, Z+2	; 0x02
 3c8:	12 96       	adiw	r26, 0x02	; 2
 3ca:	0d 90       	ld	r0, X+
 3cc:	bc 91       	ld	r27, X
 3ce:	a0 2d       	mov	r26, r0
 3d0:	b2 83       	std	Z+2, r27	; 0x02
 3d2:	a1 83       	std	Z+1, r26	; 0x01
 3d4:	cf 01       	movw	r24, r30
 3d6:	03 96       	adiw	r24, 0x03	; 3
 3d8:	a8 17       	cp	r26, r24
 3da:	b9 07       	cpc	r27, r25
 3dc:	01 f4       	brne	.+0      	; 0x3de <vCoRoutineSchedule+0x18a>
 3de:	12 96       	adiw	r26, 0x02	; 2
 3e0:	8d 91       	ld	r24, X+
 3e2:	9c 91       	ld	r25, X
 3e4:	13 97       	sbiw	r26, 0x03	; 3
 3e6:	92 83       	std	Z+2, r25	; 0x02
 3e8:	81 83       	std	Z+1, r24	; 0x01
 3ea:	01 80       	ldd	r0, Z+1	; 0x01
 3ec:	f2 81       	ldd	r31, Z+2	; 0x02
 3ee:	e0 2d       	mov	r30, r0
 3f0:	86 81       	ldd	r24, Z+6	; 0x06
 3f2:	97 81       	ldd	r25, Z+7	; 0x07
 3f4:	90 93 00 00 	sts	0x0000, r25
 3f8:	80 93 00 00 	sts	0x0000, r24
 3fc:	dc 01       	movw	r26, r24
 3fe:	ed 91       	ld	r30, X+
 400:	fc 91       	ld	r31, X
 402:	11 97       	sbiw	r26, 0x01	; 1
 404:	57 96       	adiw	r26, 0x17	; 23
 406:	6c 91       	ld	r22, X
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	09 94       	ijmp

Disassembly of section .text.xCoRoutineRemoveFromEventList:

00000668 <xCoRoutineRemoveFromEventList>:
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	dc 01       	movw	r26, r24
 672:	15 96       	adiw	r26, 0x05	; 5
 674:	ed 91       	ld	r30, X+
 676:	fc 91       	ld	r31, X
 678:	16 97       	sbiw	r26, 0x06	; 6
 67a:	c6 81       	ldd	r28, Z+6	; 0x06
 67c:	d7 81       	ldd	r29, Z+7	; 0x07
 67e:	8e 01       	movw	r16, r28
 680:	04 5f       	subi	r16, 0xF4	; 244
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	c8 01       	movw	r24, r16
 686:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 68a:	b8 01       	movw	r22, r16
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 00 00 	call	0	; 0x0 <xPassedTicks>
 694:	e0 91 00 00 	lds	r30, 0x0000
 698:	f0 91 00 00 	lds	r31, 0x0000
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	2e 89       	ldd	r18, Y+22	; 0x16
 6a0:	96 89       	ldd	r25, Z+22	; 0x16
 6a2:	29 17       	cp	r18, r25
 6a4:	00 f4       	brcc	.+0      	; 0x6a6 <xCoRoutineRemoveFromEventList+0x3e>
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

event_groups.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.xEventGroupCreate 00000026  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.xEventGroupWaitBits 000000f0  00000000  00000000  0000005a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xEventGroupClearBits 0000001e  00000000  00000000  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.xEventGroupGetBitsFromISR 00000008  00000000  00000000  00000168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.xEventGroupSetBits 0000009c  00000000  00000000  00000170  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.xEventGroupSync 000000cc  00000000  00000000  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.vEventGroupDelete 0000002c  00000000  00000000  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.vEventGroupSetBitsCallback 00000006  00000000  00000000  00000304  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.vEventGroupClearBitsCallback 00000006  00000000  00000000  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000012  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY

Disassembly of section .text.xEventGroupCreate:

00000000 <xEventGroupCreate>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	8b e0       	ldi	r24, 0x0B	; 11
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	0e 94 00 00 	call	0	; 0x0 <xEventGroupCreate>
   c:	ec 01       	movw	r28, r24
   e:	00 97       	sbiw	r24, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <xEventGroupCreate+0x12>
  12:	fc 01       	movw	r30, r24
  14:	11 92       	st	Z+, r1
  16:	11 92       	st	Z+, r1
  18:	cf 01       	movw	r24, r30
  1a:	0e 94 00 00 	call	0	; 0x0 <xEventGroupCreate>
  1e:	ce 01       	movw	r24, r28
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text.xEventGroupWaitBits:

00000026 <xEventGroupWaitBits>:
  26:	af 92       	push	r10
  28:	bf 92       	push	r11
  2a:	cf 92       	push	r12
  2c:	df 92       	push	r13
  2e:	ef 92       	push	r14
  30:	ff 92       	push	r15
  32:	0f 93       	push	r16
  34:	1f 93       	push	r17
  36:	cf 93       	push	r28
  38:	df 93       	push	r29
  3a:	7c 01       	movw	r14, r24
  3c:	eb 01       	movw	r28, r22
  3e:	b4 2e       	mov	r11, r20
  40:	a2 2e       	mov	r10, r18
  42:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  46:	f7 01       	movw	r30, r14
  48:	c0 80       	ld	r12, Z
  4a:	d1 80       	ldd	r13, Z+1	; 0x01
  4c:	ce 01       	movw	r24, r28
  4e:	8c 21       	and	r24, r12
  50:	9d 21       	and	r25, r13
  52:	a1 10       	cpse	r10, r1
  54:	00 c0       	rjmp	.+0      	; 0x56 <xEventGroupWaitBits+0x30>
  56:	89 2b       	or	r24, r25
  58:	01 f4       	brne	.+0      	; 0x5a <xEventGroupWaitBits+0x34>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <xEventGroupWaitBits+0x36>
  5c:	8c 17       	cp	r24, r28
  5e:	9d 07       	cpc	r25, r29
  60:	01 f4       	brne	.+0      	; 0x62 <xEventGroupWaitBits+0x3c>
  62:	bb 20       	and	r11, r11
  64:	01 f0       	breq	.+0      	; 0x66 <xEventGroupWaitBits+0x40>
  66:	ce 01       	movw	r24, r28
  68:	80 95       	com	r24
  6a:	90 95       	com	r25
  6c:	8c 21       	and	r24, r12
  6e:	9d 21       	and	r25, r13
  70:	f7 01       	movw	r30, r14
  72:	91 83       	std	Z+1, r25	; 0x01
  74:	80 83       	st	Z, r24
  76:	00 e0       	ldi	r16, 0x00	; 0
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7e:	01 2b       	or	r16, r17
  80:	01 f4       	brne	.+0      	; 0x82 <xEventGroupWaitBits+0x5c>
  82:	00 c0       	rjmp	.+0      	; 0x84 <xEventGroupWaitBits+0x5e>
  84:	81 11       	cpse	r24, r1
  86:	00 c0       	rjmp	.+0      	; 0x88 <xEventGroupWaitBits+0x62>
  88:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  90:	91 fd       	sbrc	r25, 1
  92:	00 c0       	rjmp	.+0      	; 0x94 <xEventGroupWaitBits+0x6e>
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	0f 92       	push	r0
  9a:	f7 01       	movw	r30, r14
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	9e 01       	movw	r18, r28
  a2:	28 23       	and	r18, r24
  a4:	39 23       	and	r19, r25
  a6:	a1 10       	cpse	r10, r1
  a8:	00 c0       	rjmp	.+0      	; 0xaa <xEventGroupWaitBits+0x84>
  aa:	23 2b       	or	r18, r19
  ac:	01 f4       	brne	.+0      	; 0xae <xEventGroupWaitBits+0x88>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <xEventGroupWaitBits+0x8a>
  b0:	2c 17       	cp	r18, r28
  b2:	3d 07       	cpc	r19, r29
  b4:	01 f4       	brne	.+0      	; 0xb6 <xEventGroupWaitBits+0x90>
  b6:	bb 20       	and	r11, r11
  b8:	01 f0       	breq	.+0      	; 0xba <xEventGroupWaitBits+0x94>
  ba:	c0 95       	com	r28
  bc:	d0 95       	com	r29
  be:	c8 23       	and	r28, r24
  c0:	d9 23       	and	r29, r25
  c2:	f7 01       	movw	r30, r14
  c4:	d1 83       	std	Z+1, r29	; 0x01
  c6:	c0 83       	st	Z, r28
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	6c 01       	movw	r12, r24
  ce:	dd 24       	eor	r13, r13
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <xEventGroupWaitBits+0xac>
  d2:	01 15       	cp	r16, r1
  d4:	11 05       	cpc	r17, r1
  d6:	01 f0       	breq	.+0      	; 0xd8 <xEventGroupWaitBits+0xb2>
  d8:	b1 10       	cpse	r11, r1
  da:	00 c0       	rjmp	.+0      	; 0xdc <xEventGroupWaitBits+0xb6>
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <xEventGroupWaitBits+0xbc>
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	71 e0       	ldi	r23, 0x01	; 1
  e6:	a1 10       	cpse	r10, r1
  e8:	74 60       	ori	r23, 0x04	; 4
  ea:	6c 2b       	or	r22, r28
  ec:	7d 2b       	or	r23, r29
  ee:	a8 01       	movw	r20, r16
  f0:	c7 01       	movw	r24, r14
  f2:	02 96       	adiw	r24, 0x02	; 2
  f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f8:	c1 2c       	mov	r12, r1
  fa:	d1 2c       	mov	r13, r1
  fc:	00 c0       	rjmp	.+0      	; 0xfe <xEventGroupWaitBits+0xd8>
  fe:	c6 01       	movw	r24, r12
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	df 90       	pop	r13
 10e:	cf 90       	pop	r12
 110:	bf 90       	pop	r11
 112:	af 90       	pop	r10
 114:	08 95       	ret

Disassembly of section .text.xEventGroupClearBits:

0000013c <xEventGroupClearBits>:
 13c:	fc 01       	movw	r30, r24
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	0f 92       	push	r0
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	60 95       	com	r22
 14a:	70 95       	com	r23
 14c:	68 23       	and	r22, r24
 14e:	79 23       	and	r23, r25
 150:	71 83       	std	Z+1, r23	; 0x01
 152:	60 83       	st	Z, r22
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	08 95       	ret

Disassembly of section .text.xEventGroupGetBitsFromISR:

00000296 <xEventGroupGetBitsFromISR>:
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	08 95       	ret

Disassembly of section .text.xEventGroupSetBits:

00000534 <xEventGroupSetBits>:
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	ec 01       	movw	r28, r24
 546:	8b 01       	movw	r16, r22
 548:	7c 01       	movw	r14, r24
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	e8 0e       	add	r14, r24
 54e:	f1 1c       	adc	r15, r1
 550:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 554:	ef 81       	ldd	r30, Y+7	; 0x07
 556:	f8 85       	ldd	r31, Y+8	; 0x08
 558:	88 81       	ld	r24, Y
 55a:	99 81       	ldd	r25, Y+1	; 0x01
 55c:	80 2b       	or	r24, r16
 55e:	91 2b       	or	r25, r17
 560:	99 83       	std	Y+1, r25	; 0x01
 562:	88 83       	st	Y, r24
 564:	00 e0       	ldi	r16, 0x00	; 0
 566:	10 e0       	ldi	r17, 0x00	; 0
 568:	68 81       	ld	r22, Y
 56a:	79 81       	ldd	r23, Y+1	; 0x01
 56c:	ee 15       	cp	r30, r14
 56e:	ff 05       	cpc	r31, r15
 570:	01 f0       	breq	.+0      	; 0x572 <xEventGroupSetBits+0x3e>
 572:	d2 80       	ldd	r13, Z+2	; 0x02
 574:	c3 80       	ldd	r12, Z+3	; 0x03
 576:	20 81       	ld	r18, Z
 578:	31 81       	ldd	r19, Z+1	; 0x01
 57a:	c9 01       	movw	r24, r18
 57c:	99 27       	eor	r25, r25
 57e:	ac 01       	movw	r20, r24
 580:	46 23       	and	r20, r22
 582:	57 23       	and	r21, r23
 584:	32 fd       	sbrc	r19, 2
 586:	00 c0       	rjmp	.+0      	; 0x588 <xEventGroupSetBits+0x54>
 588:	45 2b       	or	r20, r21
 58a:	01 f4       	brne	.+0      	; 0x58c <xEventGroupSetBits+0x58>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <xEventGroupSetBits+0x5a>
 58e:	48 17       	cp	r20, r24
 590:	59 07       	cpc	r21, r25
 592:	01 f4       	brne	.+0      	; 0x594 <xEventGroupSetBits+0x60>
 594:	30 ff       	sbrs	r19, 0
 596:	00 c0       	rjmp	.+0      	; 0x598 <xEventGroupSetBits+0x64>
 598:	08 2b       	or	r16, r24
 59a:	19 2b       	or	r17, r25
 59c:	72 60       	ori	r23, 0x02	; 2
 59e:	cf 01       	movw	r24, r30
 5a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5a4:	ed 2d       	mov	r30, r13
 5a6:	fc 2d       	mov	r31, r12
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <xEventGroupSetBits+0x76>
 5aa:	00 95       	com	r16
 5ac:	10 95       	com	r17
 5ae:	06 23       	and	r16, r22
 5b0:	17 23       	and	r17, r23
 5b2:	19 83       	std	Y+1, r17	; 0x01
 5b4:	08 83       	st	Y, r16
 5b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5ba:	88 81       	ld	r24, Y
 5bc:	99 81       	ldd	r25, Y+1	; 0x01
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12
 5ce:	08 95       	ret

Disassembly of section .text.xEventGroupSync:

00000b04 <xEventGroupSync>:
 b04:	af 92       	push	r10
 b06:	bf 92       	push	r11
 b08:	cf 92       	push	r12
 b0a:	df 92       	push	r13
 b0c:	ef 92       	push	r14
 b0e:	ff 92       	push	r15
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	ec 01       	movw	r28, r24
 b1a:	5b 01       	movw	r10, r22
 b1c:	8a 01       	movw	r16, r20
 b1e:	69 01       	movw	r12, r18
 b20:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b24:	e8 80       	ld	r14, Y
 b26:	f9 80       	ldd	r15, Y+1	; 0x01
 b28:	b5 01       	movw	r22, r10
 b2a:	ce 01       	movw	r24, r28
 b2c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b30:	ea 28       	or	r14, r10
 b32:	fb 28       	or	r15, r11
 b34:	c7 01       	movw	r24, r14
 b36:	80 23       	and	r24, r16
 b38:	91 23       	and	r25, r17
 b3a:	80 17       	cp	r24, r16
 b3c:	91 07       	cpc	r25, r17
 b3e:	01 f4       	brne	.+0      	; 0xb40 <xEventGroupSync+0x3c>
 b40:	88 81       	ld	r24, Y
 b42:	99 81       	ldd	r25, Y+1	; 0x01
 b44:	98 01       	movw	r18, r16
 b46:	20 95       	com	r18
 b48:	30 95       	com	r19
 b4a:	82 23       	and	r24, r18
 b4c:	93 23       	and	r25, r19
 b4e:	99 83       	std	Y+1, r25	; 0x01
 b50:	88 83       	st	Y, r24
 b52:	c1 2c       	mov	r12, r1
 b54:	d1 2c       	mov	r13, r1
 b56:	00 c0       	rjmp	.+0      	; 0xb58 <xEventGroupSync+0x54>
 b58:	c1 14       	cp	r12, r1
 b5a:	d1 04       	cpc	r13, r1
 b5c:	01 f0       	breq	.+0      	; 0xb5e <xEventGroupSync+0x5a>
 b5e:	a6 01       	movw	r20, r12
 b60:	b8 01       	movw	r22, r16
 b62:	75 60       	ori	r23, 0x05	; 5
 b64:	ce 01       	movw	r24, r28
 b66:	02 96       	adiw	r24, 0x02	; 2
 b68:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b6c:	e1 2c       	mov	r14, r1
 b6e:	f1 2c       	mov	r15, r1
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <xEventGroupSync+0x6e>
 b72:	e8 80       	ld	r14, Y
 b74:	f9 80       	ldd	r15, Y+1	; 0x01
 b76:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b7a:	cd 28       	or	r12, r13
 b7c:	01 f0       	breq	.+0      	; 0xb7e <xEventGroupSync+0x7a>
 b7e:	81 11       	cpse	r24, r1
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <xEventGroupSync+0x7e>
 b82:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b8a:	91 fd       	sbrc	r25, 1
 b8c:	00 c0       	rjmp	.+0      	; 0xb8e <xEventGroupSync+0x8a>
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	f8 94       	cli
 b92:	0f 92       	push	r0
 b94:	88 81       	ld	r24, Y
 b96:	99 81       	ldd	r25, Y+1	; 0x01
 b98:	98 01       	movw	r18, r16
 b9a:	28 23       	and	r18, r24
 b9c:	39 23       	and	r19, r25
 b9e:	20 17       	cp	r18, r16
 ba0:	31 07       	cpc	r19, r17
 ba2:	01 f4       	brne	.+0      	; 0xba4 <xEventGroupSync+0xa0>
 ba4:	00 95       	com	r16
 ba6:	10 95       	com	r17
 ba8:	08 23       	and	r16, r24
 baa:	19 23       	and	r17, r25
 bac:	19 83       	std	Y+1, r17	; 0x01
 bae:	08 83       	st	Y, r16
 bb0:	0f 90       	pop	r0
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	7c 01       	movw	r14, r24
 bb6:	ff 24       	eor	r15, r15
 bb8:	c7 01       	movw	r24, r14
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	ff 90       	pop	r15
 bc4:	ef 90       	pop	r14
 bc6:	df 90       	pop	r13
 bc8:	cf 90       	pop	r12
 bca:	bf 90       	pop	r11
 bcc:	af 90       	pop	r10
 bce:	08 95       	ret

Disassembly of section .text.vEventGroupDelete:

000016d4 <vEventGroupDelete>:
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ec 01       	movw	r28, r24
    16da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	88 23       	and	r24, r24
    16e2:	01 f0       	breq	.+0      	; 0x16e4 <vEventGroupDelete+0x10>
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	72 e0       	ldi	r23, 0x02	; 2
    16e8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ea:	98 85       	ldd	r25, Y+8	; 0x08
    16ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <vEventGroupDelete+0x1e>
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.vEventGroupSetBitsCallback:

00002dd4 <vEventGroupSetBitsCallback>:
    2dd4:	ba 01       	movw	r22, r20
    2dd6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.vEventGroupClearBitsCallback:

00005bae <vEventGroupClearBitsCallback>:
    5bae:	ba 01       	movw	r22, r20
    5bb0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

list.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.vListInitialise 0000001c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.vListInitialiseItem 00000008  00000000  00000000  00000050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.vListInsertEnd 00000042  00000000  00000000  00000058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.vListInsert 00000070  00000000  00000000  0000009a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.uxListRemove 00000046  00000000  00000000  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .comment      00000012  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY

Disassembly of section .text.vListInitialise:

00000000 <vListInitialise>:
   0:	fc 01       	movw	r30, r24
   2:	03 96       	adiw	r24, 0x03	; 3
   4:	92 83       	std	Z+2, r25	; 0x02
   6:	81 83       	std	Z+1, r24	; 0x01
   8:	2f ef       	ldi	r18, 0xFF	; 255
   a:	3f ef       	ldi	r19, 0xFF	; 255
   c:	34 83       	std	Z+4, r19	; 0x04
   e:	23 83       	std	Z+3, r18	; 0x03
  10:	96 83       	std	Z+6, r25	; 0x06
  12:	85 83       	std	Z+5, r24	; 0x05
  14:	90 87       	std	Z+8, r25	; 0x08
  16:	87 83       	std	Z+7, r24	; 0x07
  18:	10 82       	st	Z, r1
  1a:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

0000001c <vListInitialiseItem>:
  1c:	fc 01       	movw	r30, r24
  1e:	11 86       	std	Z+9, r1	; 0x09
  20:	10 86       	std	Z+8, r1	; 0x08
  22:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

00000040 <vListInsertEnd>:
  40:	cf 93       	push	r28
  42:	df 93       	push	r29
  44:	9c 01       	movw	r18, r24
  46:	fb 01       	movw	r30, r22
  48:	dc 01       	movw	r26, r24
  4a:	11 96       	adiw	r26, 0x01	; 1
  4c:	cd 91       	ld	r28, X+
  4e:	dc 91       	ld	r29, X
  50:	12 97       	sbiw	r26, 0x02	; 2
  52:	d3 83       	std	Z+3, r29	; 0x03
  54:	c2 83       	std	Z+2, r28	; 0x02
  56:	8c 81       	ldd	r24, Y+4	; 0x04
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	95 83       	std	Z+5, r25	; 0x05
  5c:	84 83       	std	Z+4, r24	; 0x04
  5e:	8c 81       	ldd	r24, Y+4	; 0x04
  60:	9d 81       	ldd	r25, Y+5	; 0x05
  62:	dc 01       	movw	r26, r24
  64:	13 96       	adiw	r26, 0x03	; 3
  66:	7c 93       	st	X, r23
  68:	6e 93       	st	-X, r22
  6a:	12 97       	sbiw	r26, 0x02	; 2
  6c:	7d 83       	std	Y+5, r23	; 0x05
  6e:	6c 83       	std	Y+4, r22	; 0x04
  70:	31 87       	std	Z+9, r19	; 0x09
  72:	20 87       	std	Z+8, r18	; 0x08
  74:	f9 01       	movw	r30, r18
  76:	80 81       	ld	r24, Z
  78:	8f 5f       	subi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

Disassembly of section .text.vListInsert:

000000c2 <vListInsert>:
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	8c 01       	movw	r16, r24
  cc:	fb 01       	movw	r30, r22
  ce:	20 81       	ld	r18, Z
  d0:	31 81       	ldd	r19, Z+1	; 0x01
  d2:	2f 3f       	cpi	r18, 0xFF	; 255
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	38 07       	cpc	r19, r24
  d8:	01 f4       	brne	.+0      	; 0xda <vListInsert+0x18>
  da:	e8 01       	movw	r28, r16
  dc:	af 81       	ldd	r26, Y+7	; 0x07
  de:	b8 85       	ldd	r27, Y+8	; 0x08
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <vListInsert+0x20>
  e2:	d8 01       	movw	r26, r16
  e4:	13 96       	adiw	r26, 0x03	; 3
  e6:	12 96       	adiw	r26, 0x02	; 2
  e8:	8d 91       	ld	r24, X+
  ea:	9c 91       	ld	r25, X
  ec:	13 97       	sbiw	r26, 0x03	; 3
  ee:	ec 01       	movw	r28, r24
  f0:	48 81       	ld	r20, Y
  f2:	59 81       	ldd	r21, Y+1	; 0x01
  f4:	24 17       	cp	r18, r20
  f6:	35 07       	cpc	r19, r21
  f8:	00 f0       	brcs	.+0      	; 0xfa <vListInsert+0x38>
  fa:	dc 01       	movw	r26, r24
  fc:	00 c0       	rjmp	.+0      	; 0xfe <vListInsert+0x3c>
  fe:	12 96       	adiw	r26, 0x02	; 2
 100:	8d 91       	ld	r24, X+
 102:	9c 91       	ld	r25, X
 104:	13 97       	sbiw	r26, 0x03	; 3
 106:	93 83       	std	Z+3, r25	; 0x03
 108:	82 83       	std	Z+2, r24	; 0x02
 10a:	ec 01       	movw	r28, r24
 10c:	fd 83       	std	Y+5, r31	; 0x05
 10e:	ec 83       	std	Y+4, r30	; 0x04
 110:	b5 83       	std	Z+5, r27	; 0x05
 112:	a4 83       	std	Z+4, r26	; 0x04
 114:	13 96       	adiw	r26, 0x03	; 3
 116:	fc 93       	st	X, r31
 118:	ee 93       	st	-X, r30
 11a:	12 97       	sbiw	r26, 0x02	; 2
 11c:	11 87       	std	Z+9, r17	; 0x09
 11e:	00 87       	std	Z+8, r16	; 0x08
 120:	f8 01       	movw	r30, r16
 122:	80 81       	ld	r24, Z
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 83       	st	Z, r24
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

Disassembly of section .text.uxListRemove:

000001f4 <uxListRemove>:
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	fc 01       	movw	r30, r24
 1fa:	a0 85       	ldd	r26, Z+8	; 0x08
 1fc:	b1 85       	ldd	r27, Z+9	; 0x09
 1fe:	82 81       	ldd	r24, Z+2	; 0x02
 200:	93 81       	ldd	r25, Z+3	; 0x03
 202:	24 81       	ldd	r18, Z+4	; 0x04
 204:	35 81       	ldd	r19, Z+5	; 0x05
 206:	ec 01       	movw	r28, r24
 208:	3d 83       	std	Y+5, r19	; 0x05
 20a:	2c 83       	std	Y+4, r18	; 0x04
 20c:	c4 81       	ldd	r28, Z+4	; 0x04
 20e:	d5 81       	ldd	r29, Z+5	; 0x05
 210:	9b 83       	std	Y+3, r25	; 0x03
 212:	8a 83       	std	Y+2, r24	; 0x02
 214:	11 96       	adiw	r26, 0x01	; 1
 216:	8d 91       	ld	r24, X+
 218:	9c 91       	ld	r25, X
 21a:	12 97       	sbiw	r26, 0x02	; 2
 21c:	8e 17       	cp	r24, r30
 21e:	9f 07       	cpc	r25, r31
 220:	01 f4       	brne	.+0      	; 0x222 <uxListRemove+0x2e>
 222:	12 96       	adiw	r26, 0x02	; 2
 224:	dc 93       	st	X, r29
 226:	ce 93       	st	-X, r28
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	11 86       	std	Z+9, r1	; 0x09
 22c:	10 86       	std	Z+8, r1	; 0x08
 22e:	8c 91       	ld	r24, X
 230:	81 50       	subi	r24, 0x01	; 1
 232:	8c 93       	st	X, r24
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

queue.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvCopyDataToQueue 00000094  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.prvCopyDataFromQueue 00000034  00000000  00000000  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.prvUnlockQueue 0000007c  00000000  00000000  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xQueueGenericReset 00000074  00000000  00000000  00000178  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.xQueueGenericCreate 0000006a  00000000  00000000  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.xQueueGenericSend 00000136  00000000  00000000  00000256  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.xQueueGenericSendFromISR 0000005c  00000000  00000000  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.xQueueGiveFromISR 0000004a  00000000  00000000  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.xQueueGenericReceive 00000148  00000000  00000000  00000432  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.xQueueReceiveFromISR 0000005a  00000000  00000000  0000057a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.xQueuePeekFromISR 0000002e  00000000  00000000  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.uxQueueMessagesWaiting 00000010  00000000  00000000  00000602  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.uxQueueSpacesAvailable 00000016  00000000  00000000  00000612  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.uxQueueMessagesWaitingFromISR 00000006  00000000  00000000  00000628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.vQueueDelete 00000004  00000000  00000000  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.xQueueIsQueueEmptyFromISR 0000000c  00000000  00000000  00000632  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.xQueueIsQueueFullFromISR 0000000e  00000000  00000000  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.xQueueCRSend 0000006c  00000000  00000000  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.xQueueCRReceive 0000008c  00000000  00000000  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.xQueueCRSendFromISR 00000042  00000000  00000000  00000744  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.xQueueCRReceiveFromISR 00000076  00000000  00000000  00000786  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .comment      00000012  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvCopyDataToQueue:

00000000 <prvCopyDataToQueue>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	14 2f       	mov	r17, r20
   a:	4c 8d       	ldd	r20, Y+28	; 0x1c
   c:	44 23       	and	r20, r20
   e:	01 f0       	breq	.+0      	; 0x10 <prvCopyDataToQueue+0x10>
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	11 11       	cpse	r17, r1
  14:	00 c0       	rjmp	.+0      	; 0x16 <prvCopyDataToQueue+0x16>
  16:	8c 81       	ldd	r24, Y+4	; 0x04
  18:	9d 81       	ldd	r25, Y+5	; 0x05
  1a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  1e:	2c 8d       	ldd	r18, Y+28	; 0x1c
  20:	8c 81       	ldd	r24, Y+4	; 0x04
  22:	9d 81       	ldd	r25, Y+5	; 0x05
  24:	82 0f       	add	r24, r18
  26:	91 1d       	adc	r25, r1
  28:	9d 83       	std	Y+5, r25	; 0x05
  2a:	8c 83       	std	Y+4, r24	; 0x04
  2c:	2a 81       	ldd	r18, Y+2	; 0x02
  2e:	3b 81       	ldd	r19, Y+3	; 0x03
  30:	82 17       	cp	r24, r18
  32:	93 07       	cpc	r25, r19
  34:	00 f0       	brcs	.+0      	; 0x36 <prvCopyDataToQueue+0x36>
  36:	88 81       	ld	r24, Y
  38:	99 81       	ldd	r25, Y+1	; 0x01
  3a:	9d 83       	std	Y+5, r25	; 0x05
  3c:	8c 83       	std	Y+4, r24	; 0x04
  3e:	00 c0       	rjmp	.+0      	; 0x40 <prvCopyDataToQueue+0x40>
  40:	8e 81       	ldd	r24, Y+6	; 0x06
  42:	9f 81       	ldd	r25, Y+7	; 0x07
  44:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  48:	2c 8d       	ldd	r18, Y+28	; 0x1c
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	31 95       	neg	r19
  4e:	21 95       	neg	r18
  50:	31 09       	sbc	r19, r1
  52:	8e 81       	ldd	r24, Y+6	; 0x06
  54:	9f 81       	ldd	r25, Y+7	; 0x07
  56:	82 0f       	add	r24, r18
  58:	93 1f       	adc	r25, r19
  5a:	9f 83       	std	Y+7, r25	; 0x07
  5c:	8e 83       	std	Y+6, r24	; 0x06
  5e:	68 81       	ld	r22, Y
  60:	79 81       	ldd	r23, Y+1	; 0x01
  62:	86 17       	cp	r24, r22
  64:	97 07       	cpc	r25, r23
  66:	00 f4       	brcc	.+0      	; 0x68 <prvCopyDataToQueue+0x68>
  68:	8a 81       	ldd	r24, Y+2	; 0x02
  6a:	9b 81       	ldd	r25, Y+3	; 0x03
  6c:	82 0f       	add	r24, r18
  6e:	93 1f       	adc	r25, r19
  70:	9f 83       	std	Y+7, r25	; 0x07
  72:	8e 83       	std	Y+6, r24	; 0x06
  74:	12 30       	cpi	r17, 0x02	; 2
  76:	01 f4       	brne	.+0      	; 0x78 <prvCopyDataToQueue+0x78>
  78:	8a 8d       	ldd	r24, Y+26	; 0x1a
  7a:	88 23       	and	r24, r24
  7c:	01 f0       	breq	.+0      	; 0x7e <prvCopyDataToQueue+0x7e>
  7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
  80:	81 50       	subi	r24, 0x01	; 1
  82:	8a 8f       	std	Y+26, r24	; 0x1a
  84:	8a 8d       	ldd	r24, Y+26	; 0x1a
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	8a 8f       	std	Y+26, r24	; 0x1a
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	08 95       	ret

Disassembly of section .text.prvCopyDataFromQueue:

00000094 <prvCopyDataFromQueue>:
  94:	fc 01       	movw	r30, r24
  96:	cb 01       	movw	r24, r22
  98:	44 8d       	ldd	r20, Z+28	; 0x1c
  9a:	44 23       	and	r20, r20
  9c:	01 f0       	breq	.+0      	; 0x9e <prvCopyDataFromQueue+0xa>
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	26 81       	ldd	r18, Z+6	; 0x06
  a2:	37 81       	ldd	r19, Z+7	; 0x07
  a4:	24 0f       	add	r18, r20
  a6:	35 1f       	adc	r19, r21
  a8:	37 83       	std	Z+7, r19	; 0x07
  aa:	26 83       	std	Z+6, r18	; 0x06
  ac:	62 81       	ldd	r22, Z+2	; 0x02
  ae:	73 81       	ldd	r23, Z+3	; 0x03
  b0:	26 17       	cp	r18, r22
  b2:	37 07       	cpc	r19, r23
  b4:	00 f0       	brcs	.+0      	; 0xb6 <prvCopyDataFromQueue+0x22>
  b6:	20 81       	ld	r18, Z
  b8:	31 81       	ldd	r19, Z+1	; 0x01
  ba:	37 83       	std	Z+7, r19	; 0x07
  bc:	26 83       	std	Z+6, r18	; 0x06
  be:	66 81       	ldd	r22, Z+6	; 0x06
  c0:	77 81       	ldd	r23, Z+7	; 0x07
  c2:	0c 94 00 00 	jmp	0	; 0x0 <prvCopyDataToQueue>
  c6:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

0000015c <prvUnlockQueue>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	0f 92       	push	r0
 16c:	8c 01       	movw	r16, r24
 16e:	0f 5e       	subi	r16, 0xEF	; 239
 170:	1f 4f       	sbci	r17, 0xFF	; 255
 172:	8e 8d       	ldd	r24, Y+30	; 0x1e
 174:	18 16       	cp	r1, r24
 176:	04 f4       	brge	.+0      	; 0x178 <prvUnlockQueue+0x1c>
 178:	89 89       	ldd	r24, Y+17	; 0x11
 17a:	88 23       	and	r24, r24
 17c:	01 f0       	breq	.+0      	; 0x17e <prvUnlockQueue+0x22>
 17e:	c8 01       	movw	r24, r16
 180:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 184:	81 11       	cpse	r24, r1
 186:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 18a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	8e 8f       	std	Y+30, r24	; 0x1e
 190:	00 c0       	rjmp	.+0      	; 0x192 <prvUnlockQueue+0x36>
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8e 8f       	std	Y+30, r24	; 0x1e
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	0f 92       	push	r0
 1a0:	8e 01       	movw	r16, r28
 1a2:	08 5f       	subi	r16, 0xF8	; 248
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1a8:	18 16       	cp	r1, r24
 1aa:	04 f4       	brge	.+0      	; 0x1ac <prvUnlockQueue+0x50>
 1ac:	88 85       	ldd	r24, Y+8	; 0x08
 1ae:	88 23       	and	r24, r24
 1b0:	01 f0       	breq	.+0      	; 0x1b2 <prvUnlockQueue+0x56>
 1b2:	c8 01       	movw	r24, r16
 1b4:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 1b8:	81 11       	cpse	r24, r1
 1ba:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 1be:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	8d 8f       	std	Y+29, r24	; 0x1d
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <prvUnlockQueue+0x6a>
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	8d 8f       	std	Y+29, r24	; 0x1d
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

00000334 <xQueueGenericReset>:
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	0f 92       	push	r0
 340:	28 81       	ld	r18, Y
 342:	39 81       	ldd	r19, Y+1	; 0x01
 344:	8b 8d       	ldd	r24, Y+27	; 0x1b
 346:	7c 8d       	ldd	r23, Y+28	; 0x1c
 348:	87 9f       	mul	r24, r23
 34a:	c0 01       	movw	r24, r0
 34c:	11 24       	eor	r1, r1
 34e:	a9 01       	movw	r20, r18
 350:	48 0f       	add	r20, r24
 352:	59 1f       	adc	r21, r25
 354:	5b 83       	std	Y+3, r21	; 0x03
 356:	4a 83       	std	Y+2, r20	; 0x02
 358:	1a 8e       	std	Y+26, r1	; 0x1a
 35a:	3d 83       	std	Y+5, r19	; 0x05
 35c:	2c 83       	std	Y+4, r18	; 0x04
 35e:	87 1b       	sub	r24, r23
 360:	91 09       	sbc	r25, r1
 362:	82 0f       	add	r24, r18
 364:	93 1f       	adc	r25, r19
 366:	9f 83       	std	Y+7, r25	; 0x07
 368:	8e 83       	std	Y+6, r24	; 0x06
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	8d 8f       	std	Y+29, r24	; 0x1d
 36e:	8e 8f       	std	Y+30, r24	; 0x1e
 370:	61 11       	cpse	r22, r1
 372:	00 c0       	rjmp	.+0      	; 0x374 <xQueueGenericReset+0x40>
 374:	88 85       	ldd	r24, Y+8	; 0x08
 376:	88 23       	and	r24, r24
 378:	01 f0       	breq	.+0      	; 0x37a <xQueueGenericReset+0x46>
 37a:	ce 01       	movw	r24, r28
 37c:	08 96       	adiw	r24, 0x08	; 8
 37e:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	01 f4       	brne	.+0      	; 0x386 <xQueueGenericReset+0x52>
 386:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <xQueueGenericReset+0x58>
 38c:	ce 01       	movw	r24, r28
 38e:	08 96       	adiw	r24, 0x08	; 8
 390:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 394:	ce 01       	movw	r24, r28
 396:	41 96       	adiw	r24, 0x11	; 17
 398:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

000006dc <xQueueGenericCreate>:
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	1f 92       	push	r1
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	18 2f       	mov	r17, r24
 6ee:	66 23       	and	r22, r22
 6f0:	01 f0       	breq	.+0      	; 0x6f2 <xQueueGenericCreate+0x16>
 6f2:	86 9f       	mul	r24, r22
 6f4:	c0 01       	movw	r24, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <xQueueGenericCreate+0x20>
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	4f 96       	adiw	r24, 0x1f	; 31
 702:	69 83       	std	Y+1, r22	; 0x01
 704:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 708:	7c 01       	movw	r14, r24
 70a:	69 81       	ldd	r22, Y+1	; 0x01
 70c:	00 97       	sbiw	r24, 0x00	; 0
 70e:	01 f0       	breq	.+0      	; 0x710 <xQueueGenericCreate+0x34>
 710:	61 11       	cpse	r22, r1
 712:	00 c0       	rjmp	.+0      	; 0x714 <xQueueGenericCreate+0x38>
 714:	fc 01       	movw	r30, r24
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
 71a:	00 c0       	rjmp	.+0      	; 0x71c <xQueueGenericCreate+0x40>
 71c:	9c 01       	movw	r18, r24
 71e:	21 5e       	subi	r18, 0xE1	; 225
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	31 83       	std	Z+1, r19	; 0x01
 726:	20 83       	st	Z, r18
 728:	f7 01       	movw	r30, r14
 72a:	13 8f       	std	Z+27, r17	; 0x1b
 72c:	64 8f       	std	Z+28, r22	; 0x1c
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	c7 01       	movw	r24, r14
 732:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 736:	c7 01       	movw	r24, r14
 738:	0f 90       	pop	r0
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

00000e22 <xQueueGenericSend>:
 e22:	bf 92       	push	r11
 e24:	cf 92       	push	r12
 e26:	df 92       	push	r13
 e28:	ef 92       	push	r14
 e2a:	ff 92       	push	r15
 e2c:	0f 93       	push	r16
 e2e:	1f 93       	push	r17
 e30:	cf 93       	push	r28
 e32:	df 93       	push	r29
 e34:	00 d0       	rcall	.+0      	; 0xe36 <xQueueGenericSend+0x14>
 e36:	00 d0       	rcall	.+0      	; 0xe38 <xQueueGenericSend+0x16>
 e38:	1f 92       	push	r1
 e3a:	cd b7       	in	r28, 0x3d	; 61
 e3c:	de b7       	in	r29, 0x3e	; 62
 e3e:	8c 01       	movw	r16, r24
 e40:	6b 01       	movw	r12, r22
 e42:	5d 83       	std	Y+5, r21	; 0x05
 e44:	4c 83       	std	Y+4, r20	; 0x04
 e46:	b2 2e       	mov	r11, r18
 e48:	20 e0       	ldi	r18, 0x00	; 0
 e4a:	7c 01       	movw	r14, r24
 e4c:	88 e0       	ldi	r24, 0x08	; 8
 e4e:	e8 0e       	add	r14, r24
 e50:	f1 1c       	adc	r15, r1
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	f8 94       	cli
 e56:	0f 92       	push	r0
 e58:	f8 01       	movw	r30, r16
 e5a:	92 8d       	ldd	r25, Z+26	; 0x1a
 e5c:	83 8d       	ldd	r24, Z+27	; 0x1b
 e5e:	98 17       	cp	r25, r24
 e60:	00 f0       	brcs	.+0      	; 0xe62 <xQueueGenericSend+0x40>
 e62:	f2 e0       	ldi	r31, 0x02	; 2
 e64:	bf 12       	cpse	r11, r31
 e66:	00 c0       	rjmp	.+0      	; 0xe68 <xQueueGenericSend+0x46>
 e68:	4b 2d       	mov	r20, r11
 e6a:	b6 01       	movw	r22, r12
 e6c:	c8 01       	movw	r24, r16
 e6e:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 e72:	f8 01       	movw	r30, r16
 e74:	91 89       	ldd	r25, Z+17	; 0x11
 e76:	99 23       	and	r25, r25
 e78:	01 f0       	breq	.+0      	; 0xe7a <xQueueGenericSend+0x58>
 e7a:	c8 01       	movw	r24, r16
 e7c:	41 96       	adiw	r24, 0x11	; 17
 e7e:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 e82:	81 30       	cpi	r24, 0x01	; 1
 e84:	01 f4       	brne	.+0      	; 0xe86 <xQueueGenericSend+0x64>
 e86:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 e8a:	00 c0       	rjmp	.+0      	; 0xe8c <xQueueGenericSend+0x6a>
 e8c:	81 11       	cpse	r24, r1
 e8e:	00 c0       	rjmp	.+0      	; 0xe90 <xQueueGenericSend+0x6e>
 e90:	0f 90       	pop	r0
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	81 e0       	ldi	r24, 0x01	; 1
 e96:	00 c0       	rjmp	.+0      	; 0xe98 <xQueueGenericSend+0x76>
 e98:	8c 81       	ldd	r24, Y+4	; 0x04
 e9a:	9d 81       	ldd	r25, Y+5	; 0x05
 e9c:	89 2b       	or	r24, r25
 e9e:	01 f4       	brne	.+0      	; 0xea0 <xQueueGenericSend+0x7e>
 ea0:	0f 90       	pop	r0
 ea2:	0f be       	out	0x3f, r0	; 63
 ea4:	00 c0       	rjmp	.+0      	; 0xea6 <xQueueGenericSend+0x84>
 ea6:	21 11       	cpse	r18, r1
 ea8:	00 c0       	rjmp	.+0      	; 0xeaa <xQueueGenericSend+0x88>
 eaa:	ce 01       	movw	r24, r28
 eac:	01 96       	adiw	r24, 0x01	; 1
 eae:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 eb2:	0f 90       	pop	r0
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 eba:	0f b6       	in	r0, 0x3f	; 63
 ebc:	f8 94       	cli
 ebe:	0f 92       	push	r0
 ec0:	f8 01       	movw	r30, r16
 ec2:	85 8d       	ldd	r24, Z+29	; 0x1d
 ec4:	8f 3f       	cpi	r24, 0xFF	; 255
 ec6:	01 f4       	brne	.+0      	; 0xec8 <xQueueGenericSend+0xa6>
 ec8:	15 8e       	std	Z+29, r1	; 0x1d
 eca:	f8 01       	movw	r30, r16
 ecc:	86 8d       	ldd	r24, Z+30	; 0x1e
 ece:	8f 3f       	cpi	r24, 0xFF	; 255
 ed0:	01 f4       	brne	.+0      	; 0xed2 <xQueueGenericSend+0xb0>
 ed2:	16 8e       	std	Z+30, r1	; 0x1e
 ed4:	0f 90       	pop	r0
 ed6:	0f be       	out	0x3f, r0	; 63
 ed8:	be 01       	movw	r22, r28
 eda:	6c 5f       	subi	r22, 0xFC	; 252
 edc:	7f 4f       	sbci	r23, 0xFF	; 255
 ede:	ce 01       	movw	r24, r28
 ee0:	01 96       	adiw	r24, 0x01	; 1
 ee2:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 ee6:	81 11       	cpse	r24, r1
 ee8:	00 c0       	rjmp	.+0      	; 0xeea <xQueueGenericSend+0xc8>
 eea:	0f b6       	in	r0, 0x3f	; 63
 eec:	f8 94       	cli
 eee:	0f 92       	push	r0
 ef0:	f8 01       	movw	r30, r16
 ef2:	92 8d       	ldd	r25, Z+26	; 0x1a
 ef4:	0f 90       	pop	r0
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	f8 01       	movw	r30, r16
 efa:	83 8d       	ldd	r24, Z+27	; 0x1b
 efc:	98 13       	cpse	r25, r24
 efe:	00 c0       	rjmp	.+0      	; 0xf00 <xQueueGenericSend+0xde>
 f00:	6c 81       	ldd	r22, Y+4	; 0x04
 f02:	7d 81       	ldd	r23, Y+5	; 0x05
 f04:	c7 01       	movw	r24, r14
 f06:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f0a:	c8 01       	movw	r24, r16
 f0c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f10:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f14:	88 23       	and	r24, r24
 f16:	01 f0       	breq	.+0      	; 0xf18 <xQueueGenericSend+0xf6>
 f18:	21 e0       	ldi	r18, 0x01	; 1
 f1a:	00 c0       	rjmp	.+0      	; 0xf1c <xQueueGenericSend+0xfa>
 f1c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f20:	00 c0       	rjmp	.+0      	; 0xf22 <xQueueGenericSend+0x100>
 f22:	c8 01       	movw	r24, r16
 f24:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f28:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f2c:	00 c0       	rjmp	.+0      	; 0xf2e <xQueueGenericSend+0x10c>
 f2e:	c8 01       	movw	r24, r16
 f30:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f34:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 f38:	80 e0       	ldi	r24, 0x00	; 0
 f3a:	0f 90       	pop	r0
 f3c:	0f 90       	pop	r0
 f3e:	0f 90       	pop	r0
 f40:	0f 90       	pop	r0
 f42:	0f 90       	pop	r0
 f44:	df 91       	pop	r29
 f46:	cf 91       	pop	r28
 f48:	1f 91       	pop	r17
 f4a:	0f 91       	pop	r16
 f4c:	ff 90       	pop	r15
 f4e:	ef 90       	pop	r14
 f50:	df 90       	pop	r13
 f52:	cf 90       	pop	r12
 f54:	bf 90       	pop	r11
 f56:	08 95       	ret

Disassembly of section .text.xQueueGenericSendFromISR:

00001d7a <xQueueGenericSendFromISR>:
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ec 01       	movw	r28, r24
    1d84:	8a 01       	movw	r16, r20
    1d86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8a:	98 17       	cp	r25, r24
    1d8c:	00 f0       	brcs	.+0      	; 0x1d8e <xQueueGenericSendFromISR+0x14>
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	01 f4       	brne	.+0      	; 0x1d92 <xQueueGenericSendFromISR+0x18>
    1d92:	42 2f       	mov	r20, r18
    1d94:	ce 01       	movw	r24, r28
    1d96:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    1d9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	01 f4       	brne	.+0      	; 0x1da0 <xQueueGenericSendFromISR+0x26>
    1da0:	89 89       	ldd	r24, Y+17	; 0x11
    1da2:	88 23       	and	r24, r24
    1da4:	01 f0       	breq	.+0      	; 0x1da6 <xQueueGenericSendFromISR+0x2c>
    1da6:	ce 01       	movw	r24, r28
    1da8:	41 96       	adiw	r24, 0x11	; 17
    1daa:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    1dae:	88 23       	and	r24, r24
    1db0:	01 f0       	breq	.+0      	; 0x1db2 <xQueueGenericSendFromISR+0x38>
    1db2:	01 15       	cp	r16, r1
    1db4:	11 05       	cpc	r17, r1
    1db6:	01 f0       	breq	.+0      	; 0x1db8 <xQueueGenericSendFromISR+0x3e>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	f8 01       	movw	r30, r16
    1dbc:	80 83       	st	Z, r24
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <xQueueGenericSendFromISR+0x46>
    1dc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	8e 8f       	std	Y+30, r24	; 0x1e
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	00 c0       	rjmp	.+0      	; 0x1dca <xQueueGenericSendFromISR+0x50>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	08 95       	ret

Disassembly of section .text.xQueueGiveFromISR:

00003b50 <xQueueGiveFromISR>:
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	fc 01       	movw	r30, r24
    3b56:	eb 01       	movw	r28, r22
    3b58:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b5a:	83 8d       	ldd	r24, Z+27	; 0x1b
    3b5c:	98 17       	cp	r25, r24
    3b5e:	00 f4       	brcc	.+0      	; 0x3b60 <xQueueGiveFromISR+0x10>
    3b60:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b62:	8f 5f       	subi	r24, 0xFF	; 255
    3b64:	82 8f       	std	Z+26, r24	; 0x1a
    3b66:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b68:	8f 3f       	cpi	r24, 0xFF	; 255
    3b6a:	01 f4       	brne	.+0      	; 0x3b6c <xQueueGiveFromISR+0x1c>
    3b6c:	81 89       	ldd	r24, Z+17	; 0x11
    3b6e:	88 23       	and	r24, r24
    3b70:	01 f0       	breq	.+0      	; 0x3b72 <xQueueGiveFromISR+0x22>
    3b72:	cf 01       	movw	r24, r30
    3b74:	41 96       	adiw	r24, 0x11	; 17
    3b76:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    3b7a:	88 23       	and	r24, r24
    3b7c:	01 f0       	breq	.+0      	; 0x3b7e <xQueueGiveFromISR+0x2e>
    3b7e:	20 97       	sbiw	r28, 0x00	; 0
    3b80:	01 f0       	breq	.+0      	; 0x3b82 <xQueueGiveFromISR+0x32>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	88 83       	st	Y, r24
    3b86:	00 c0       	rjmp	.+0      	; 0x3b88 <xQueueGiveFromISR+0x38>
    3b88:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	86 8f       	std	Z+30, r24	; 0x1e
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	00 c0       	rjmp	.+0      	; 0x3b92 <xQueueGiveFromISR+0x42>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	08 95       	ret

Disassembly of section .text.xQueueGenericReceive:

000076ea <xQueueGenericReceive>:
    76ea:	bf 92       	push	r11
    76ec:	cf 92       	push	r12
    76ee:	df 92       	push	r13
    76f0:	ef 92       	push	r14
    76f2:	ff 92       	push	r15
    76f4:	0f 93       	push	r16
    76f6:	1f 93       	push	r17
    76f8:	cf 93       	push	r28
    76fa:	df 93       	push	r29
    76fc:	00 d0       	rcall	.+0      	; 0x76fe <xQueueGenericReceive+0x14>
    76fe:	00 d0       	rcall	.+0      	; 0x7700 <xQueueGenericReceive+0x16>
    7700:	1f 92       	push	r1
    7702:	cd b7       	in	r28, 0x3d	; 61
    7704:	de b7       	in	r29, 0x3e	; 62
    7706:	8c 01       	movw	r16, r24
    7708:	6b 01       	movw	r12, r22
    770a:	5d 83       	std	Y+5, r21	; 0x05
    770c:	4c 83       	std	Y+4, r20	; 0x04
    770e:	b2 2e       	mov	r11, r18
    7710:	30 e0       	ldi	r19, 0x00	; 0
    7712:	7c 01       	movw	r14, r24
    7714:	81 e1       	ldi	r24, 0x11	; 17
    7716:	e8 0e       	add	r14, r24
    7718:	f1 1c       	adc	r15, r1
    771a:	0f b6       	in	r0, 0x3f	; 63
    771c:	f8 94       	cli
    771e:	0f 92       	push	r0
    7720:	f8 01       	movw	r30, r16
    7722:	82 8d       	ldd	r24, Z+26	; 0x1a
    7724:	88 23       	and	r24, r24
    7726:	01 f0       	breq	.+0      	; 0x7728 <xQueueGenericReceive+0x3e>
    7728:	e6 80       	ldd	r14, Z+6	; 0x06
    772a:	f7 80       	ldd	r15, Z+7	; 0x07
    772c:	b6 01       	movw	r22, r12
    772e:	c8 01       	movw	r24, r16
    7730:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7734:	f8 01       	movw	r30, r16
    7736:	b1 10       	cpse	r11, r1
    7738:	00 c0       	rjmp	.+0      	; 0x773a <xQueueGenericReceive+0x50>
    773a:	82 8d       	ldd	r24, Z+26	; 0x1a
    773c:	81 50       	subi	r24, 0x01	; 1
    773e:	82 8f       	std	Z+26, r24	; 0x1a
    7740:	80 85       	ldd	r24, Z+8	; 0x08
    7742:	88 23       	and	r24, r24
    7744:	01 f0       	breq	.+0      	; 0x7746 <xQueueGenericReceive+0x5c>
    7746:	c8 01       	movw	r24, r16
    7748:	08 96       	adiw	r24, 0x08	; 8
    774a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    774e:	81 30       	cpi	r24, 0x01	; 1
    7750:	01 f4       	brne	.+0      	; 0x7752 <xQueueGenericReceive+0x68>
    7752:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7756:	00 c0       	rjmp	.+0      	; 0x7758 <xQueueGenericReceive+0x6e>
    7758:	f7 82       	std	Z+7, r15	; 0x07
    775a:	e6 82       	std	Z+6, r14	; 0x06
    775c:	81 89       	ldd	r24, Z+17	; 0x11
    775e:	88 23       	and	r24, r24
    7760:	01 f0       	breq	.+0      	; 0x7762 <xQueueGenericReceive+0x78>
    7762:	c8 01       	movw	r24, r16
    7764:	41 96       	adiw	r24, 0x11	; 17
    7766:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    776a:	81 11       	cpse	r24, r1
    776c:	00 c0       	rjmp	.+0      	; 0x776e <xQueueGenericReceive+0x84>
    776e:	0f 90       	pop	r0
    7770:	0f be       	out	0x3f, r0	; 63
    7772:	81 e0       	ldi	r24, 0x01	; 1
    7774:	00 c0       	rjmp	.+0      	; 0x7776 <xQueueGenericReceive+0x8c>
    7776:	8c 81       	ldd	r24, Y+4	; 0x04
    7778:	9d 81       	ldd	r25, Y+5	; 0x05
    777a:	89 2b       	or	r24, r25
    777c:	01 f4       	brne	.+0      	; 0x777e <xQueueGenericReceive+0x94>
    777e:	0f 90       	pop	r0
    7780:	0f be       	out	0x3f, r0	; 63
    7782:	00 c0       	rjmp	.+0      	; 0x7784 <xQueueGenericReceive+0x9a>
    7784:	31 11       	cpse	r19, r1
    7786:	00 c0       	rjmp	.+0      	; 0x7788 <xQueueGenericReceive+0x9e>
    7788:	ce 01       	movw	r24, r28
    778a:	01 96       	adiw	r24, 0x01	; 1
    778c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7790:	0f 90       	pop	r0
    7792:	0f be       	out	0x3f, r0	; 63
    7794:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7798:	0f b6       	in	r0, 0x3f	; 63
    779a:	f8 94       	cli
    779c:	0f 92       	push	r0
    779e:	f8 01       	movw	r30, r16
    77a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    77a2:	8f 3f       	cpi	r24, 0xFF	; 255
    77a4:	01 f4       	brne	.+0      	; 0x77a6 <xQueueGenericReceive+0xbc>
    77a6:	15 8e       	std	Z+29, r1	; 0x1d
    77a8:	f8 01       	movw	r30, r16
    77aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    77ac:	8f 3f       	cpi	r24, 0xFF	; 255
    77ae:	01 f4       	brne	.+0      	; 0x77b0 <xQueueGenericReceive+0xc6>
    77b0:	16 8e       	std	Z+30, r1	; 0x1e
    77b2:	0f 90       	pop	r0
    77b4:	0f be       	out	0x3f, r0	; 63
    77b6:	be 01       	movw	r22, r28
    77b8:	6c 5f       	subi	r22, 0xFC	; 252
    77ba:	7f 4f       	sbci	r23, 0xFF	; 255
    77bc:	ce 01       	movw	r24, r28
    77be:	01 96       	adiw	r24, 0x01	; 1
    77c0:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    77c4:	81 11       	cpse	r24, r1
    77c6:	00 c0       	rjmp	.+0      	; 0x77c8 <xQueueGenericReceive+0xde>
    77c8:	0f b6       	in	r0, 0x3f	; 63
    77ca:	f8 94       	cli
    77cc:	0f 92       	push	r0
    77ce:	f8 01       	movw	r30, r16
    77d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    77d2:	0f 90       	pop	r0
    77d4:	0f be       	out	0x3f, r0	; 63
    77d6:	81 11       	cpse	r24, r1
    77d8:	00 c0       	rjmp	.+0      	; 0x77da <xQueueGenericReceive+0xf0>
    77da:	6c 81       	ldd	r22, Y+4	; 0x04
    77dc:	7d 81       	ldd	r23, Y+5	; 0x05
    77de:	c7 01       	movw	r24, r14
    77e0:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    77e4:	c8 01       	movw	r24, r16
    77e6:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    77ea:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    77ee:	88 23       	and	r24, r24
    77f0:	01 f0       	breq	.+0      	; 0x77f2 <xQueueGenericReceive+0x108>
    77f2:	31 e0       	ldi	r19, 0x01	; 1
    77f4:	00 c0       	rjmp	.+0      	; 0x77f6 <xQueueGenericReceive+0x10c>
    77f6:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    77fa:	00 c0       	rjmp	.+0      	; 0x77fc <xQueueGenericReceive+0x112>
    77fc:	c8 01       	movw	r24, r16
    77fe:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7802:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7806:	00 c0       	rjmp	.+0      	; 0x7808 <xQueueGenericReceive+0x11e>
    7808:	c8 01       	movw	r24, r16
    780a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    780e:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    7812:	80 e0       	ldi	r24, 0x00	; 0
    7814:	0f 90       	pop	r0
    7816:	0f 90       	pop	r0
    7818:	0f 90       	pop	r0
    781a:	0f 90       	pop	r0
    781c:	0f 90       	pop	r0
    781e:	df 91       	pop	r29
    7820:	cf 91       	pop	r28
    7822:	1f 91       	pop	r17
    7824:	0f 91       	pop	r16
    7826:	ff 90       	pop	r15
    7828:	ef 90       	pop	r14
    782a:	df 90       	pop	r13
    782c:	cf 90       	pop	r12
    782e:	bf 90       	pop	r11
    7830:	08 95       	ret

Disassembly of section .text.xQueueReceiveFromISR:

0000ef1c <xQueueReceiveFromISR>:
    ef1c:	0f 93       	push	r16
    ef1e:	1f 93       	push	r17
    ef20:	cf 93       	push	r28
    ef22:	df 93       	push	r29
    ef24:	ec 01       	movw	r28, r24
    ef26:	8a 01       	movw	r16, r20
    ef28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ef2a:	88 23       	and	r24, r24
    ef2c:	01 f0       	breq	.+0      	; 0xef2e <xQueueReceiveFromISR+0x12>
    ef2e:	ce 01       	movw	r24, r28
    ef30:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    ef34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ef36:	81 50       	subi	r24, 0x01	; 1
    ef38:	8a 8f       	std	Y+26, r24	; 0x1a
    ef3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ef3c:	8f 3f       	cpi	r24, 0xFF	; 255
    ef3e:	01 f4       	brne	.+0      	; 0xef40 <xQueueReceiveFromISR+0x24>
    ef40:	88 85       	ldd	r24, Y+8	; 0x08
    ef42:	88 23       	and	r24, r24
    ef44:	01 f0       	breq	.+0      	; 0xef46 <xQueueReceiveFromISR+0x2a>
    ef46:	ce 01       	movw	r24, r28
    ef48:	08 96       	adiw	r24, 0x08	; 8
    ef4a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
    ef4e:	88 23       	and	r24, r24
    ef50:	01 f0       	breq	.+0      	; 0xef52 <xQueueReceiveFromISR+0x36>
    ef52:	01 15       	cp	r16, r1
    ef54:	11 05       	cpc	r17, r1
    ef56:	01 f0       	breq	.+0      	; 0xef58 <xQueueReceiveFromISR+0x3c>
    ef58:	81 e0       	ldi	r24, 0x01	; 1
    ef5a:	f8 01       	movw	r30, r16
    ef5c:	80 83       	st	Z, r24
    ef5e:	00 c0       	rjmp	.+0      	; 0xef60 <xQueueReceiveFromISR+0x44>
    ef60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ef62:	8f 5f       	subi	r24, 0xFF	; 255
    ef64:	8d 8f       	std	Y+29, r24	; 0x1d
    ef66:	81 e0       	ldi	r24, 0x01	; 1
    ef68:	00 c0       	rjmp	.+0      	; 0xef6a <xQueueReceiveFromISR+0x4e>
    ef6a:	80 e0       	ldi	r24, 0x00	; 0
    ef6c:	df 91       	pop	r29
    ef6e:	cf 91       	pop	r28
    ef70:	1f 91       	pop	r17
    ef72:	0f 91       	pop	r16
    ef74:	08 95       	ret

Disassembly of section .text.xQueuePeekFromISR:

0001de92 <xQueuePeekFromISR>:
   1de92:	0f 93       	push	r16
   1de94:	1f 93       	push	r17
   1de96:	cf 93       	push	r28
   1de98:	df 93       	push	r29
   1de9a:	ec 01       	movw	r28, r24
   1de9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1de9e:	88 23       	and	r24, r24
   1dea0:	01 f0       	breq	.+0      	; 0x1dea2 <xQueuePeekFromISR+0x10>
   1dea2:	0e 81       	ldd	r16, Y+6	; 0x06
   1dea4:	1f 81       	ldd	r17, Y+7	; 0x07
   1dea6:	ce 01       	movw	r24, r28
   1dea8:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
   1deac:	1f 83       	std	Y+7, r17	; 0x07
   1deae:	0e 83       	std	Y+6, r16	; 0x06
   1deb0:	81 e0       	ldi	r24, 0x01	; 1
   1deb2:	00 c0       	rjmp	.+0      	; 0x1deb4 <xQueuePeekFromISR+0x22>
   1deb4:	80 e0       	ldi	r24, 0x00	; 0
   1deb6:	df 91       	pop	r29
   1deb8:	cf 91       	pop	r28
   1deba:	1f 91       	pop	r17
   1debc:	0f 91       	pop	r16
   1debe:	08 95       	ret

Disassembly of section .text.uxQueueMessagesWaiting:

0003bd52 <uxQueueMessagesWaiting>:
   3bd52:	0f b6       	in	r0, 0x3f	; 63
   3bd54:	f8 94       	cli
   3bd56:	0f 92       	push	r0
   3bd58:	fc 01       	movw	r30, r24
   3bd5a:	82 8d       	ldd	r24, Z+26	; 0x1a
   3bd5c:	0f 90       	pop	r0
   3bd5e:	0f be       	out	0x3f, r0	; 63
   3bd60:	08 95       	ret

Disassembly of section .text.uxQueueSpacesAvailable:

00077ab4 <uxQueueSpacesAvailable>:
   77ab4:	0f b6       	in	r0, 0x3f	; 63
   77ab6:	f8 94       	cli
   77ab8:	0f 92       	push	r0
   77aba:	fc 01       	movw	r30, r24
   77abc:	22 8d       	ldd	r18, Z+26	; 0x1a
   77abe:	0f 90       	pop	r0
   77ac0:	0f be       	out	0x3f, r0	; 63
   77ac2:	fc 01       	movw	r30, r24
   77ac4:	83 8d       	ldd	r24, Z+27	; 0x1b
   77ac6:	82 1b       	sub	r24, r18
   77ac8:	08 95       	ret

Disassembly of section .text.uxQueueMessagesWaitingFromISR:

000ef57e <uxQueueMessagesWaitingFromISR>:
   ef57e:	fc 01       	movw	r30, r24
   ef580:	82 8d       	ldd	r24, Z+26	; 0x1a
   ef582:	08 95       	ret

Disassembly of section .text.vQueueDelete:

001deb02 <vQueueDelete>:
  1deb02:	0c 94 00 00 	jmp	0	; 0x0 <prvCopyDataToQueue>

Disassembly of section .text.xQueueIsQueueEmptyFromISR:

003bd608 <xQueueIsQueueEmptyFromISR>:
  3bd608:	fc 01       	movw	r30, r24
  3bd60a:	92 8d       	ldd	r25, Z+26	; 0x1a
  3bd60c:	81 e0       	ldi	r24, 0x01	; 1
  3bd60e:	91 11       	cpse	r25, r1
  3bd610:	80 e0       	ldi	r24, 0x00	; 0
  3bd612:	08 95       	ret

Disassembly of section .text.xQueueIsQueueFullFromISR:

0077ac1c <xQueueIsQueueFullFromISR>:
  77ac1c:	fc 01       	movw	r30, r24
  77ac1e:	22 8d       	ldd	r18, Z+26	; 0x1a
  77ac20:	81 e0       	ldi	r24, 0x01	; 1
  77ac22:	93 8d       	ldd	r25, Z+27	; 0x1b
  77ac24:	29 13       	cpse	r18, r25
  77ac26:	80 e0       	ldi	r24, 0x00	; 0
  77ac28:	08 95       	ret

Disassembly of section .text.xQueueCRSend:

00ef5846 <xQueueCRSend>:
  ef5846:	cf 93       	push	r28
  ef5848:	df 93       	push	r29
  ef584a:	ec 01       	movw	r28, r24
  ef584c:	ca 01       	movw	r24, r20
  ef584e:	f8 94       	cli
  ef5850:	0f b6       	in	r0, 0x3f	; 63
  ef5852:	f8 94       	cli
  ef5854:	0f 92       	push	r0
  ef5856:	3a 8d       	ldd	r19, Y+26	; 0x1a
  ef5858:	2b 8d       	ldd	r18, Y+27	; 0x1b
  ef585a:	0f 90       	pop	r0
  ef585c:	0f be       	out	0x3f, r0	; 63
  ef585e:	32 13       	cpse	r19, r18
  ef5860:	00 c0       	rjmp	.+0      	; 0xef5862 <xQueueCRSend+0x1c>
  ef5862:	00 97       	sbiw	r24, 0x00	; 0
  ef5864:	01 f0       	breq	.+0      	; 0xef5866 <xQueueCRSend+0x20>
  ef5866:	be 01       	movw	r22, r28
  ef5868:	68 5f       	subi	r22, 0xF8	; 248
  ef586a:	7f 4f       	sbci	r23, 0xFF	; 255
  ef586c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  ef5870:	78 94       	sei
  ef5872:	8c ef       	ldi	r24, 0xFC	; 252
  ef5874:	00 c0       	rjmp	.+0      	; 0xef5876 <xQueueCRSend+0x30>
  ef5876:	78 94       	sei
  ef5878:	80 e0       	ldi	r24, 0x00	; 0
  ef587a:	00 c0       	rjmp	.+0      	; 0xef587c <xQueueCRSend+0x36>
  ef587c:	78 94       	sei
  ef587e:	f8 94       	cli
  ef5880:	8a 8d       	ldd	r24, Y+26	; 0x1a
  ef5882:	82 17       	cp	r24, r18
  ef5884:	00 f4       	brcc	.+0      	; 0xef5886 <xQueueCRSend+0x40>
  ef5886:	40 e0       	ldi	r20, 0x00	; 0
  ef5888:	ce 01       	movw	r24, r28
  ef588a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  ef588e:	89 89       	ldd	r24, Y+17	; 0x11
  ef5890:	81 11       	cpse	r24, r1
  ef5892:	00 c0       	rjmp	.+0      	; 0xef5894 <xQueueCRSend+0x4e>
  ef5894:	81 e0       	ldi	r24, 0x01	; 1
  ef5896:	00 c0       	rjmp	.+0      	; 0xef5898 <xQueueCRSend+0x52>
  ef5898:	ce 01       	movw	r24, r28
  ef589a:	41 96       	adiw	r24, 0x11	; 17
  ef589c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  ef58a0:	88 23       	and	r24, r24
  ef58a2:	01 f0       	breq	.+0      	; 0xef58a4 <xQueueCRSend+0x5e>
  ef58a4:	8b ef       	ldi	r24, 0xFB	; 251
  ef58a6:	00 c0       	rjmp	.+0      	; 0xef58a8 <xQueueCRSend+0x62>
  ef58a8:	80 e0       	ldi	r24, 0x00	; 0
  ef58aa:	78 94       	sei
  ef58ac:	df 91       	pop	r29
  ef58ae:	cf 91       	pop	r28
  ef58b0:	08 95       	ret

Disassembly of section .text.xQueueCRReceive:

01deb0f8 <xQueueCRReceive>:
 1deb0f8:	cf 93       	push	r28
 1deb0fa:	df 93       	push	r29
 1deb0fc:	ec 01       	movw	r28, r24
 1deb0fe:	cb 01       	movw	r24, r22
 1deb100:	f8 94       	cli
 1deb102:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1deb104:	21 11       	cpse	r18, r1
 1deb106:	00 c0       	rjmp	.+0      	; 0x1deb108 <xQueueCRReceive+0x10>
 1deb108:	41 15       	cp	r20, r1
 1deb10a:	51 05       	cpc	r21, r1
 1deb10c:	01 f0       	breq	.+0      	; 0x1deb10e <xQueueCRReceive+0x16>
 1deb10e:	be 01       	movw	r22, r28
 1deb110:	6f 5e       	subi	r22, 0xEF	; 239
 1deb112:	7f 4f       	sbci	r23, 0xFF	; 255
 1deb114:	ca 01       	movw	r24, r20
 1deb116:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 1deb11a:	78 94       	sei
 1deb11c:	8c ef       	ldi	r24, 0xFC	; 252
 1deb11e:	00 c0       	rjmp	.+0      	; 0x1deb120 <xQueueCRReceive+0x28>
 1deb120:	78 94       	sei
 1deb122:	80 e0       	ldi	r24, 0x00	; 0
 1deb124:	00 c0       	rjmp	.+0      	; 0x1deb126 <xQueueCRReceive+0x2e>
 1deb126:	78 94       	sei
 1deb128:	f8 94       	cli
 1deb12a:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1deb12c:	22 23       	and	r18, r18
 1deb12e:	01 f0       	breq	.+0      	; 0x1deb130 <xQueueCRReceive+0x38>
 1deb130:	4c 8d       	ldd	r20, Y+28	; 0x1c
 1deb132:	50 e0       	ldi	r21, 0x00	; 0
 1deb134:	2e 81       	ldd	r18, Y+6	; 0x06
 1deb136:	3f 81       	ldd	r19, Y+7	; 0x07
 1deb138:	24 0f       	add	r18, r20
 1deb13a:	35 1f       	adc	r19, r21
 1deb13c:	3f 83       	std	Y+7, r19	; 0x07
 1deb13e:	2e 83       	std	Y+6, r18	; 0x06
 1deb140:	6a 81       	ldd	r22, Y+2	; 0x02
 1deb142:	7b 81       	ldd	r23, Y+3	; 0x03
 1deb144:	26 17       	cp	r18, r22
 1deb146:	37 07       	cpc	r19, r23
 1deb148:	00 f0       	brcs	.+0      	; 0x1deb14a <xQueueCRReceive+0x52>
 1deb14a:	28 81       	ld	r18, Y
 1deb14c:	39 81       	ldd	r19, Y+1	; 0x01
 1deb14e:	3f 83       	std	Y+7, r19	; 0x07
 1deb150:	2e 83       	std	Y+6, r18	; 0x06
 1deb152:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1deb154:	21 50       	subi	r18, 0x01	; 1
 1deb156:	2a 8f       	std	Y+26, r18	; 0x1a
 1deb158:	6e 81       	ldd	r22, Y+6	; 0x06
 1deb15a:	7f 81       	ldd	r23, Y+7	; 0x07
 1deb15c:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 1deb160:	88 85       	ldd	r24, Y+8	; 0x08
 1deb162:	81 11       	cpse	r24, r1
 1deb164:	00 c0       	rjmp	.+0      	; 0x1deb166 <xQueueCRReceive+0x6e>
 1deb166:	81 e0       	ldi	r24, 0x01	; 1
 1deb168:	00 c0       	rjmp	.+0      	; 0x1deb16a <xQueueCRReceive+0x72>
 1deb16a:	ce 01       	movw	r24, r28
 1deb16c:	08 96       	adiw	r24, 0x08	; 8
 1deb16e:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 1deb172:	88 23       	and	r24, r24
 1deb174:	01 f0       	breq	.+0      	; 0x1deb176 <xQueueCRReceive+0x7e>
 1deb176:	8b ef       	ldi	r24, 0xFB	; 251
 1deb178:	00 c0       	rjmp	.+0      	; 0x1deb17a <xQueueCRReceive+0x82>
 1deb17a:	80 e0       	ldi	r24, 0x00	; 0
 1deb17c:	78 94       	sei
 1deb17e:	df 91       	pop	r29
 1deb180:	cf 91       	pop	r28
 1deb182:	08 95       	ret

Disassembly of section .text.xQueueCRSendFromISR:

03bd627c <xQueueCRSendFromISR>:
 3bd627c:	1f 93       	push	r17
 3bd627e:	cf 93       	push	r28
 3bd6280:	df 93       	push	r29
 3bd6282:	ec 01       	movw	r28, r24
 3bd6284:	14 2f       	mov	r17, r20
 3bd6286:	9a 8d       	ldd	r25, Y+26	; 0x1a
 3bd6288:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3bd628a:	98 17       	cp	r25, r24
 3bd628c:	00 f0       	brcs	.+0      	; 0x3bd628e <xQueueCRSendFromISR+0x12>
 3bd628e:	41 2f       	mov	r20, r17
 3bd6290:	00 c0       	rjmp	.+0      	; 0x3bd6292 <xQueueCRSendFromISR+0x16>
 3bd6292:	40 e0       	ldi	r20, 0x00	; 0
 3bd6294:	ce 01       	movw	r24, r28
 3bd6296:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 3bd629a:	11 11       	cpse	r17, r1
 3bd629c:	00 c0       	rjmp	.+0      	; 0x3bd629e <xQueueCRSendFromISR+0x22>
 3bd629e:	89 89       	ldd	r24, Y+17	; 0x11
 3bd62a0:	88 23       	and	r24, r24
 3bd62a2:	01 f0       	breq	.+0      	; 0x3bd62a4 <xQueueCRSendFromISR+0x28>
 3bd62a4:	ce 01       	movw	r24, r28
 3bd62a6:	41 96       	adiw	r24, 0x11	; 17
 3bd62a8:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 3bd62ac:	41 e0       	ldi	r20, 0x01	; 1
 3bd62ae:	81 11       	cpse	r24, r1
 3bd62b0:	00 c0       	rjmp	.+0      	; 0x3bd62b2 <xQueueCRSendFromISR+0x36>
 3bd62b2:	40 e0       	ldi	r20, 0x00	; 0
 3bd62b4:	84 2f       	mov	r24, r20
 3bd62b6:	df 91       	pop	r29
 3bd62b8:	cf 91       	pop	r28
 3bd62ba:	1f 91       	pop	r17
 3bd62bc:	08 95       	ret

Disassembly of section .text.xQueueCRReceiveFromISR:

077ac53a <xQueueCRReceiveFromISR>:
 77ac53a:	0f 93       	push	r16
 77ac53c:	1f 93       	push	r17
 77ac53e:	cf 93       	push	r28
 77ac540:	df 93       	push	r29
 77ac542:	ec 01       	movw	r28, r24
 77ac544:	cb 01       	movw	r24, r22
 77ac546:	8a 01       	movw	r16, r20
 77ac548:	2a 8d       	ldd	r18, Y+26	; 0x1a
 77ac54a:	22 23       	and	r18, r18
 77ac54c:	01 f0       	breq	.+0      	; 0x77ac54e <xQueueCRReceiveFromISR+0x14>
 77ac54e:	4c 8d       	ldd	r20, Y+28	; 0x1c
 77ac550:	50 e0       	ldi	r21, 0x00	; 0
 77ac552:	2e 81       	ldd	r18, Y+6	; 0x06
 77ac554:	3f 81       	ldd	r19, Y+7	; 0x07
 77ac556:	24 0f       	add	r18, r20
 77ac558:	35 1f       	adc	r19, r21
 77ac55a:	3f 83       	std	Y+7, r19	; 0x07
 77ac55c:	2e 83       	std	Y+6, r18	; 0x06
 77ac55e:	6a 81       	ldd	r22, Y+2	; 0x02
 77ac560:	7b 81       	ldd	r23, Y+3	; 0x03
 77ac562:	26 17       	cp	r18, r22
 77ac564:	37 07       	cpc	r19, r23
 77ac566:	00 f0       	brcs	.+0      	; 0x77ac568 <xQueueCRReceiveFromISR+0x2e>
 77ac568:	28 81       	ld	r18, Y
 77ac56a:	39 81       	ldd	r19, Y+1	; 0x01
 77ac56c:	3f 83       	std	Y+7, r19	; 0x07
 77ac56e:	2e 83       	std	Y+6, r18	; 0x06
 77ac570:	2a 8d       	ldd	r18, Y+26	; 0x1a
 77ac572:	21 50       	subi	r18, 0x01	; 1
 77ac574:	2a 8f       	std	Y+26, r18	; 0x1a
 77ac576:	6e 81       	ldd	r22, Y+6	; 0x06
 77ac578:	7f 81       	ldd	r23, Y+7	; 0x07
 77ac57a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 77ac57e:	f8 01       	movw	r30, r16
 77ac580:	80 81       	ld	r24, Z
 77ac582:	88 23       	and	r24, r24
 77ac584:	01 f0       	breq	.+0      	; 0x77ac586 <xQueueCRReceiveFromISR+0x4c>
 77ac586:	81 e0       	ldi	r24, 0x01	; 1
 77ac588:	00 c0       	rjmp	.+0      	; 0x77ac58a <xQueueCRReceiveFromISR+0x50>
 77ac58a:	88 85       	ldd	r24, Y+8	; 0x08
 77ac58c:	88 23       	and	r24, r24
 77ac58e:	01 f0       	breq	.+0      	; 0x77ac590 <xQueueCRReceiveFromISR+0x56>
 77ac590:	ce 01       	movw	r24, r28
 77ac592:	08 96       	adiw	r24, 0x08	; 8
 77ac594:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
 77ac598:	88 23       	and	r24, r24
 77ac59a:	01 f0       	breq	.+0      	; 0x77ac59c <xQueueCRReceiveFromISR+0x62>
 77ac59c:	81 e0       	ldi	r24, 0x01	; 1
 77ac59e:	f8 01       	movw	r30, r16
 77ac5a0:	80 83       	st	Z, r24
 77ac5a2:	00 c0       	rjmp	.+0      	; 0x77ac5a4 <xQueueCRReceiveFromISR+0x6a>
 77ac5a4:	80 e0       	ldi	r24, 0x00	; 0
 77ac5a6:	df 91       	pop	r29
 77ac5a8:	cf 91       	pop	r28
 77ac5aa:	1f 91       	pop	r17
 77ac5ac:	0f 91       	pop	r16
 77ac5ae:	08 95       	ret

tasks.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvResetNextTaskUnblockTime 00000036  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.prvAddCurrentTaskToDelayedList 00000068  00000000  00000000  0000006a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xTaskGenericCreate 000001f6  00000000  00000000  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.vTaskDelete 0000008e  00000000  00000000  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .rodata.str1.1 00000005  00000000  00000000  00000356  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .text.vTaskStartScheduler 00000064  00000000  00000000  0000035b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.vTaskEndScheduler 0000000a  00000000  00000000  000003bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.vTaskSuspendAll 0000000c  00000000  00000000  000003c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.xTaskGetTickCount 00000014  00000000  00000000  000003d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.xTaskGetTickCountFromISR 0000000a  00000000  00000000  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.uxTaskGetNumberOfTasks 00000006  00000000  00000000  000003f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.xTaskIncrementTick 00000160  00000000  00000000  000003f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.xTaskResumeAll 000000e0  00000000  00000000  00000559  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.vTaskDelayUntil 00000076  00000000  00000000  00000639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.vTaskDelay 0000004a  00000000  00000000  000006af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.prvIdleTask 00000068  00000000  00000000  000006f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.vTaskSwitchContext 00000080  00000000  00000000  00000761  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.vTaskPlaceOnEventList 00000038  00000000  00000000  000007e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.vTaskPlaceOnUnorderedEventList 00000046  00000000  00000000  00000819  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.xTaskRemoveFromEventList 00000080  00000000  00000000  0000085f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.xTaskRemoveFromUnorderedEventList 00000068  00000000  00000000  000008df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.vTaskSetTimeOutState 00000016  00000000  00000000  00000947  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.xTaskCheckForTimeOut 00000058  00000000  00000000  0000095d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text.vTaskMissedYield 00000008  00000000  00000000  000009b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.uxTaskResetEventItemValue 0000002e  00000000  00000000  000009bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text.ulTaskNotifyTake 000000c6  00000000  00000000  000009eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text.xTaskNotifyWait 00000146  00000000  00000000  00000ab1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text.xTaskGenericNotify 000000e2  00000000  00000000  00000bf7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text.xTaskNotifyFromISR 000000d6  00000000  00000000  00000cd9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text.vTaskNotifyGiveFromISR 0000009e  00000000  00000000  00000daf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .bss.uxSchedulerSuspended 00000001  00000000  00000000  00000e4d  2**0
                  ALLOC
 34 .data.xNextTaskUnblockTime 00000002  00000000  00000000  00000e4d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .bss.uxTaskNumber 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 36 .bss.xNumOfOverflows 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 37 .bss.xYieldPending 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 38 .bss.uxPendedTicks 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 39 .bss.xSchedulerRunning 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 40 .bss.uxTopReadyPriority 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 41 .bss.xTickCount 00000002  00000000  00000000  00000e4f  2**0
                  ALLOC
 42 .bss.uxCurrentNumberOfTasks 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 43 .bss.uxTasksDeleted 00000001  00000000  00000000  00000e4f  2**0
                  ALLOC
 44 .bss.xTasksWaitingTermination 00000009  00000000  00000000  00000e4f  2**0
                  ALLOC
 45 .bss.xPendingReadyList 00000009  00000000  00000000  00000e4f  2**0
                  ALLOC
 46 .bss.pxOverflowDelayedTaskList 00000002  00000000  00000000  00000e4f  2**0
                  ALLOC
 47 .bss.pxDelayedTaskList 00000002  00000000  00000000  00000e4f  2**0
                  ALLOC
 48 .bss.xDelayedTaskList2 00000009  00000000  00000000  00000e4f  2**0
                  ALLOC
 49 .bss.xDelayedTaskList1 00000009  00000000  00000000  00000e4f  2**0
                  ALLOC
 50 .bss.pxReadyTasksLists 00000024  00000000  00000000  00000e4f  2**0
                  ALLOC
 51 .bss.pxCurrentTCB 00000002  00000000  00000000  00000e4f  2**0
                  ALLOC
 52 .comment      00000012  00000000  00000000  00000e4f  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvResetNextTaskUnblockTime:

00000000 <prvResetNextTaskUnblockTime>:
   0:	e0 91 00 00 	lds	r30, 0x0000
   4:	f0 91 00 00 	lds	r31, 0x0000
   8:	80 81       	ld	r24, Z
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <prvResetNextTaskUnblockTime+0xe>
   e:	8f ef       	ldi	r24, 0xFF	; 255
  10:	9f ef       	ldi	r25, 0xFF	; 255
  12:	00 c0       	rjmp	.+0      	; 0x14 <prvResetNextTaskUnblockTime+0x14>
  14:	e0 91 00 00 	lds	r30, 0x0000
  18:	f0 91 00 00 	lds	r31, 0x0000
  1c:	05 80       	ldd	r0, Z+5	; 0x05
  1e:	f6 81       	ldd	r31, Z+6	; 0x06
  20:	e0 2d       	mov	r30, r0
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	82 81       	ldd	r24, Z+2	; 0x02
  2a:	93 81       	ldd	r25, Z+3	; 0x03
  2c:	90 93 00 00 	sts	0x0000, r25
  30:	80 93 00 00 	sts	0x0000, r24
  34:	08 95       	ret

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00000036 <prvAddCurrentTaskToDelayedList>:
  36:	cf 93       	push	r28
  38:	df 93       	push	r29
  3a:	ec 01       	movw	r28, r24
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  44:	93 83       	std	Z+3, r25	; 0x03
  46:	82 83       	std	Z+2, r24	; 0x02
  48:	80 91 00 00 	lds	r24, 0x0000
  4c:	90 91 00 00 	lds	r25, 0x0000
  50:	60 91 00 00 	lds	r22, 0x0000
  54:	70 91 00 00 	lds	r23, 0x0000
  58:	c8 17       	cp	r28, r24
  5a:	d9 07       	cpc	r29, r25
  5c:	00 f4       	brcc	.+0      	; 0x5e <prvAddCurrentTaskToDelayedList+0x28>
  5e:	80 91 00 00 	lds	r24, 0x0000
  62:	90 91 00 00 	lds	r25, 0x0000
  66:	6e 5f       	subi	r22, 0xFE	; 254
  68:	7f 4f       	sbci	r23, 0xFF	; 255
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  72:	80 91 00 00 	lds	r24, 0x0000
  76:	90 91 00 00 	lds	r25, 0x0000
  7a:	6e 5f       	subi	r22, 0xFE	; 254
  7c:	7f 4f       	sbci	r23, 0xFF	; 255
  7e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  82:	80 91 00 00 	lds	r24, 0x0000
  86:	90 91 00 00 	lds	r25, 0x0000
  8a:	c8 17       	cp	r28, r24
  8c:	d9 07       	cpc	r29, r25
  8e:	00 f4       	brcc	.+0      	; 0x90 <prvAddCurrentTaskToDelayedList+0x5a>
  90:	d0 93 00 00 	sts	0x0000, r29
  94:	c0 93 00 00 	sts	0x0000, r28
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

Disassembly of section .text.xTaskGenericCreate:

000000d4 <xTaskGenericCreate>:
  d4:	5f 92       	push	r5
  d6:	6f 92       	push	r6
  d8:	7f 92       	push	r7
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	4c 01       	movw	r8, r24
  f4:	16 2f       	mov	r17, r22
  f6:	57 2e       	mov	r5, r23
  f8:	5a 01       	movw	r10, r20
  fa:	39 01       	movw	r6, r18
  fc:	c1 14       	cp	r12, r1
  fe:	d1 04       	cpc	r13, r1
 100:	01 f4       	brne	.+0      	; 0x102 <xTaskGenericCreate+0x2e>
 102:	ca 01       	movw	r24, r20
 104:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 108:	6c 01       	movw	r12, r24
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	01 f4       	brne	.+0      	; 0x10e <xTaskGenericCreate+0x3a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <xTaskGenericCreate+0x3c>
 110:	86 e2       	ldi	r24, 0x26	; 38
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 118:	ec 01       	movw	r28, r24
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	01 f0       	breq	.+0      	; 0x11e <xTaskGenericCreate+0x4a>
 11e:	d8 8e       	std	Y+24, r13	; 0x18
 120:	cf 8a       	std	Y+23, r12	; 0x17
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	a2 1a       	sub	r10, r18
 126:	b1 08       	sbc	r11, r1
 128:	ac 0c       	add	r10, r12
 12a:	bd 1c       	adc	r11, r13
 12c:	e1 2f       	mov	r30, r17
 12e:	f5 2d       	mov	r31, r5
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	00 c0       	rjmp	.+0      	; 0x136 <xTaskGenericCreate+0x62>
 136:	c6 01       	movw	r24, r12
 138:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <xTaskGenericCreate+0x6a>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	91 05       	cpc	r25, r1
 144:	01 f0       	breq	.+0      	; 0x146 <xTaskGenericCreate+0x72>
 146:	bf 01       	movw	r22, r30
 148:	41 91       	ld	r20, Z+
 14a:	9e 01       	movw	r18, r28
 14c:	28 0f       	add	r18, r24
 14e:	39 1f       	adc	r19, r25
 150:	d9 01       	movw	r26, r18
 152:	59 96       	adiw	r26, 0x19	; 25
 154:	4c 93       	st	X, r20
 156:	db 01       	movw	r26, r22
 158:	2c 91       	ld	r18, X
 15a:	21 11       	cpse	r18, r1
 15c:	00 c0       	rjmp	.+0      	; 0x15e <xTaskGenericCreate+0x8a>
 15e:	18 a2       	std	Y+32, r1	; 0x20
 160:	10 2f       	mov	r17, r16
 162:	04 30       	cpi	r16, 0x04	; 4
 164:	00 f0       	brcs	.+0      	; 0x166 <xTaskGenericCreate+0x92>
 166:	13 e0       	ldi	r17, 0x03	; 3
 168:	1e 8b       	std	Y+22, r17	; 0x16
 16a:	6e 01       	movw	r12, r28
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	cb 0e       	add	r12, r27
 170:	d1 1c       	adc	r13, r1
 172:	c6 01       	movw	r24, r12
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	ce 01       	movw	r24, r28
 17a:	0c 96       	adiw	r24, 0x0c	; 12
 17c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 180:	d9 87       	std	Y+9, r29	; 0x09
 182:	c8 87       	std	Y+8, r28	; 0x08
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	81 1b       	sub	r24, r17
 18a:	91 09       	sbc	r25, r1
 18c:	9d 87       	std	Y+13, r25	; 0x0d
 18e:	8c 87       	std	Y+12, r24	; 0x0c
 190:	db 8b       	std	Y+19, r29	; 0x13
 192:	ca 8b       	std	Y+18, r28	; 0x12
 194:	19 a2       	std	Y+33, r1	; 0x21
 196:	1a a2       	std	Y+34, r1	; 0x22
 198:	1b a2       	std	Y+35, r1	; 0x23
 19a:	1c a2       	std	Y+36, r1	; 0x24
 19c:	1d a2       	std	Y+37, r1	; 0x25
 19e:	a3 01       	movw	r20, r6
 1a0:	b4 01       	movw	r22, r8
 1a2:	c5 01       	movw	r24, r10
 1a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a8:	99 83       	std	Y+1, r25	; 0x01
 1aa:	88 83       	st	Y, r24
 1ac:	e1 14       	cp	r14, r1
 1ae:	f1 04       	cpc	r15, r1
 1b0:	01 f0       	breq	.+0      	; 0x1b2 <xTaskGenericCreate+0xde>
 1b2:	f7 01       	movw	r30, r14
 1b4:	d1 83       	std	Z+1, r29	; 0x01
 1b6:	c0 83       	st	Z, r28
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	0f 92       	push	r0
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 00 00 	sts	0x0000, r24
 1c8:	80 91 00 00 	lds	r24, 0x0000
 1cc:	90 91 00 00 	lds	r25, 0x0000
 1d0:	89 2b       	or	r24, r25
 1d2:	01 f4       	brne	.+0      	; 0x1d4 <xTaskGenericCreate+0x100>
 1d4:	d0 93 00 00 	sts	0x0000, r29
 1d8:	c0 93 00 00 	sts	0x0000, r28
 1dc:	80 91 00 00 	lds	r24, 0x0000
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <xTaskGenericCreate+0x110>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 00 00 	sts	0x0000, r25
 22c:	80 93 00 00 	sts	0x0000, r24
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 00 00 	sts	0x0000, r25
 238:	80 93 00 00 	sts	0x0000, r24
 23c:	00 c0       	rjmp	.+0      	; 0x23e <xTaskGenericCreate+0x16a>
 23e:	80 91 00 00 	lds	r24, 0x0000
 242:	81 11       	cpse	r24, r1
 244:	00 c0       	rjmp	.+0      	; 0x246 <xTaskGenericCreate+0x172>
 246:	e0 91 00 00 	lds	r30, 0x0000
 24a:	f0 91 00 00 	lds	r31, 0x0000
 24e:	86 89       	ldd	r24, Z+22	; 0x16
 250:	08 17       	cp	r16, r24
 252:	00 f0       	brcs	.+0      	; 0x254 <xTaskGenericCreate+0x180>
 254:	d0 93 00 00 	sts	0x0000, r29
 258:	c0 93 00 00 	sts	0x0000, r28
 25c:	80 91 00 00 	lds	r24, 0x0000
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 00 00 	sts	0x0000, r24
 266:	8e 89       	ldd	r24, Y+22	; 0x16
 268:	90 91 00 00 	lds	r25, 0x0000
 26c:	98 17       	cp	r25, r24
 26e:	00 f4       	brcc	.+0      	; 0x270 <xTaskGenericCreate+0x19c>
 270:	80 93 00 00 	sts	0x0000, r24
 274:	f9 e0       	ldi	r31, 0x09	; 9
 276:	8f 9f       	mul	r24, r31
 278:	c0 01       	movw	r24, r0
 27a:	11 24       	eor	r1, r1
 27c:	b6 01       	movw	r22, r12
 27e:	80 50       	subi	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	80 91 00 00 	lds	r24, 0x0000
 28e:	88 23       	and	r24, r24
 290:	01 f0       	breq	.+0      	; 0x292 <xTaskGenericCreate+0x1be>
 292:	e0 91 00 00 	lds	r30, 0x0000
 296:	f0 91 00 00 	lds	r31, 0x0000
 29a:	86 89       	ldd	r24, Z+22	; 0x16
 29c:	80 17       	cp	r24, r16
 29e:	00 f4       	brcc	.+0      	; 0x2a0 <xTaskGenericCreate+0x1cc>
 2a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <xTaskGenericCreate+0x1d4>
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	bf 90       	pop	r11
 2bc:	af 90       	pop	r10
 2be:	9f 90       	pop	r9
 2c0:	8f 90       	pop	r8
 2c2:	7f 90       	pop	r7
 2c4:	6f 90       	pop	r6
 2c6:	5f 90       	pop	r5
 2c8:	08 95       	ret

Disassembly of section .text.vTaskDelete:

0000039e <vTaskDelete>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	0f 92       	push	r0
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	01 f4       	brne	.+0      	; 0x3b2 <vTaskDelete+0x14>
 3b2:	c0 91 00 00 	lds	r28, 0x0000
 3b6:	d0 91 00 00 	lds	r29, 0x0000
 3ba:	8e 01       	movw	r16, r28
 3bc:	0e 5f       	subi	r16, 0xFE	; 254
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
 3c0:	c8 01       	movw	r24, r16
 3c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3c6:	8c 89       	ldd	r24, Y+20	; 0x14
 3c8:	9d 89       	ldd	r25, Y+21	; 0x15
 3ca:	89 2b       	or	r24, r25
 3cc:	01 f0       	breq	.+0      	; 0x3ce <vTaskDelete+0x30>
 3ce:	ce 01       	movw	r24, r28
 3d0:	0c 96       	adiw	r24, 0x0c	; 12
 3d2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3d6:	b8 01       	movw	r22, r16
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3e0:	80 91 00 00 	lds	r24, 0x0000
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 00 00 	sts	0x0000, r24
 3ea:	80 91 00 00 	lds	r24, 0x0000
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	80 93 00 00 	sts	0x0000, r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	80 91 00 00 	lds	r24, 0x0000
 3fc:	88 23       	and	r24, r24
 3fe:	01 f0       	breq	.+0      	; 0x400 <vTaskDelete+0x62>
 400:	80 91 00 00 	lds	r24, 0x0000
 404:	90 91 00 00 	lds	r25, 0x0000
 408:	c8 17       	cp	r28, r24
 40a:	d9 07       	cpc	r29, r25
 40c:	01 f4       	brne	.+0      	; 0x40e <vTaskDelete+0x70>
 40e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 412:	00 c0       	rjmp	.+0      	; 0x414 <vTaskDelete+0x76>
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	0f 92       	push	r0
 41a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00000f99 <vTaskStartScheduler>:
 f99:	af 92       	push	r10
 f9b:	bf 92       	push	r11
 f9d:	cf 92       	push	r12
 f9f:	df 92       	push	r13
 fa1:	ef 92       	push	r14
 fa3:	ff 92       	push	r15
 fa5:	0f 93       	push	r16
 fa7:	a1 2c       	mov	r10, r1
 fa9:	b1 2c       	mov	r11, r1
 fab:	c1 2c       	mov	r12, r1
 fad:	d1 2c       	mov	r13, r1
 faf:	e1 2c       	mov	r14, r1
 fb1:	f1 2c       	mov	r15, r1
 fb3:	00 e0       	ldi	r16, 0x00	; 0
 fb5:	20 e0       	ldi	r18, 0x00	; 0
 fb7:	30 e0       	ldi	r19, 0x00	; 0
 fb9:	45 e5       	ldi	r20, 0x55	; 85
 fbb:	50 e0       	ldi	r21, 0x00	; 0
 fbd:	60 e0       	ldi	r22, 0x00	; 0
 fbf:	70 e0       	ldi	r23, 0x00	; 0
 fc1:	80 e0       	ldi	r24, 0x00	; 0
 fc3:	90 e0       	ldi	r25, 0x00	; 0
 fc5:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 fc9:	81 30       	cpi	r24, 0x01	; 1
 fcb:	01 f4       	brne	.+0      	; 0xfcd <vTaskStartScheduler+0x34>
 fcd:	f8 94       	cli
 fcf:	80 93 00 00 	sts	0x0000, r24
 fd3:	10 92 00 00 	sts	0x0000, r1
 fd7:	10 92 00 00 	sts	0x0000, r1
 fdb:	0f 91       	pop	r16
 fdd:	ff 90       	pop	r15
 fdf:	ef 90       	pop	r14
 fe1:	df 90       	pop	r13
 fe3:	cf 90       	pop	r12
 fe5:	bf 90       	pop	r11
 fe7:	af 90       	pop	r10
 fe9:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 fed:	0f 91       	pop	r16
 fef:	ff 90       	pop	r15
 ff1:	ef 90       	pop	r14
 ff3:	df 90       	pop	r13
 ff5:	cf 90       	pop	r12
 ff7:	bf 90       	pop	r11
 ff9:	af 90       	pop	r10
 ffb:	08 95       	ret

Disassembly of section .text.vTaskEndScheduler:

00001f96 <vTaskEndScheduler>:
    1f96:	f8 94       	cli
    1f98:	10 92 00 00 	sts	0x0000, r1
    1f9c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.vTaskSuspendAll:

00003f36 <vTaskSuspendAll>:
    3f36:	80 91 00 00 	lds	r24, 0x0000
    3f3a:	8f 5f       	subi	r24, 0xFF	; 255
    3f3c:	80 93 00 00 	sts	0x0000, r24
    3f40:	08 95       	ret

Disassembly of section .text.xTaskGetTickCount:

00007e78 <xTaskGetTickCount>:
    7e78:	0f b6       	in	r0, 0x3f	; 63
    7e7a:	f8 94       	cli
    7e7c:	0f 92       	push	r0
    7e7e:	80 91 00 00 	lds	r24, 0x0000
    7e82:	90 91 00 00 	lds	r25, 0x0000
    7e86:	0f 90       	pop	r0
    7e88:	0f be       	out	0x3f, r0	; 63
    7e8a:	08 95       	ret

Disassembly of section .text.xTaskGetTickCountFromISR:

0000fd04 <xTaskGetTickCountFromISR>:
    fd04:	80 91 00 00 	lds	r24, 0x0000
    fd08:	90 91 00 00 	lds	r25, 0x0000
    fd0c:	08 95       	ret

Disassembly of section .text.uxTaskGetNumberOfTasks:

0001fa12 <uxTaskGetNumberOfTasks>:
   1fa12:	80 91 00 00 	lds	r24, 0x0000
   1fa16:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

0003f42a <xTaskIncrementTick>:
   3f42a:	cf 92       	push	r12
   3f42c:	df 92       	push	r13
   3f42e:	ef 92       	push	r14
   3f430:	ff 92       	push	r15
   3f432:	0f 93       	push	r16
   3f434:	1f 93       	push	r17
   3f436:	cf 93       	push	r28
   3f438:	df 93       	push	r29
   3f43a:	80 91 00 00 	lds	r24, 0x0000
   3f43e:	81 11       	cpse	r24, r1
   3f440:	00 c0       	rjmp	.+0      	; 0x3f442 <xTaskIncrementTick+0x18>
   3f442:	80 91 00 00 	lds	r24, 0x0000
   3f446:	90 91 00 00 	lds	r25, 0x0000
   3f44a:	01 96       	adiw	r24, 0x01	; 1
   3f44c:	90 93 00 00 	sts	0x0000, r25
   3f450:	80 93 00 00 	sts	0x0000, r24
   3f454:	00 91 00 00 	lds	r16, 0x0000
   3f458:	10 91 00 00 	lds	r17, 0x0000
   3f45c:	01 15       	cp	r16, r1
   3f45e:	11 05       	cpc	r17, r1
   3f460:	01 f4       	brne	.+0      	; 0x3f462 <xTaskIncrementTick+0x38>
   3f462:	80 91 00 00 	lds	r24, 0x0000
   3f466:	90 91 00 00 	lds	r25, 0x0000
   3f46a:	20 91 00 00 	lds	r18, 0x0000
   3f46e:	30 91 00 00 	lds	r19, 0x0000
   3f472:	30 93 00 00 	sts	0x0000, r19
   3f476:	20 93 00 00 	sts	0x0000, r18
   3f47a:	90 93 00 00 	sts	0x0000, r25
   3f47e:	80 93 00 00 	sts	0x0000, r24
   3f482:	80 91 00 00 	lds	r24, 0x0000
   3f486:	8f 5f       	subi	r24, 0xFF	; 255
   3f488:	80 93 00 00 	sts	0x0000, r24
   3f48c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3f490:	80 91 00 00 	lds	r24, 0x0000
   3f494:	90 91 00 00 	lds	r25, 0x0000
   3f498:	d1 2c       	mov	r13, r1
   3f49a:	08 17       	cp	r16, r24
   3f49c:	19 07       	cpc	r17, r25
   3f49e:	00 f4       	brcc	.+0      	; 0x3f4a0 <xTaskIncrementTick+0x76>
   3f4a0:	00 c0       	rjmp	.+0      	; 0x3f4a2 <xTaskIncrementTick+0x78>
   3f4a2:	89 e0       	ldi	r24, 0x09	; 9
   3f4a4:	c8 2e       	mov	r12, r24
   3f4a6:	e0 91 00 00 	lds	r30, 0x0000
   3f4aa:	f0 91 00 00 	lds	r31, 0x0000
   3f4ae:	80 81       	ld	r24, Z
   3f4b0:	81 11       	cpse	r24, r1
   3f4b2:	00 c0       	rjmp	.+0      	; 0x3f4b4 <xTaskIncrementTick+0x8a>
   3f4b4:	8f ef       	ldi	r24, 0xFF	; 255
   3f4b6:	9f ef       	ldi	r25, 0xFF	; 255
   3f4b8:	90 93 00 00 	sts	0x0000, r25
   3f4bc:	80 93 00 00 	sts	0x0000, r24
   3f4c0:	00 c0       	rjmp	.+0      	; 0x3f4c2 <xTaskIncrementTick+0x98>
   3f4c2:	e0 91 00 00 	lds	r30, 0x0000
   3f4c6:	f0 91 00 00 	lds	r31, 0x0000
   3f4ca:	05 80       	ldd	r0, Z+5	; 0x05
   3f4cc:	f6 81       	ldd	r31, Z+6	; 0x06
   3f4ce:	e0 2d       	mov	r30, r0
   3f4d0:	c6 81       	ldd	r28, Z+6	; 0x06
   3f4d2:	d7 81       	ldd	r29, Z+7	; 0x07
   3f4d4:	2a 81       	ldd	r18, Y+2	; 0x02
   3f4d6:	3b 81       	ldd	r19, Y+3	; 0x03
   3f4d8:	02 17       	cp	r16, r18
   3f4da:	13 07       	cpc	r17, r19
   3f4dc:	00 f4       	brcc	.+0      	; 0x3f4de <xTaskIncrementTick+0xb4>
   3f4de:	30 93 00 00 	sts	0x0000, r19
   3f4e2:	20 93 00 00 	sts	0x0000, r18
   3f4e6:	00 c0       	rjmp	.+0      	; 0x3f4e8 <xTaskIncrementTick+0xbe>
   3f4e8:	7e 01       	movw	r14, r28
   3f4ea:	82 e0       	ldi	r24, 0x02	; 2
   3f4ec:	e8 0e       	add	r14, r24
   3f4ee:	f1 1c       	adc	r15, r1
   3f4f0:	c7 01       	movw	r24, r14
   3f4f2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3f4f6:	2c 89       	ldd	r18, Y+20	; 0x14
   3f4f8:	3d 89       	ldd	r19, Y+21	; 0x15
   3f4fa:	23 2b       	or	r18, r19
   3f4fc:	01 f0       	breq	.+0      	; 0x3f4fe <xTaskIncrementTick+0xd4>
   3f4fe:	ce 01       	movw	r24, r28
   3f500:	0c 96       	adiw	r24, 0x0c	; 12
   3f502:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3f506:	2e 89       	ldd	r18, Y+22	; 0x16
   3f508:	80 91 00 00 	lds	r24, 0x0000
   3f50c:	82 17       	cp	r24, r18
   3f50e:	00 f4       	brcc	.+0      	; 0x3f510 <xTaskIncrementTick+0xe6>
   3f510:	20 93 00 00 	sts	0x0000, r18
   3f514:	c2 9e       	mul	r12, r18
   3f516:	c0 01       	movw	r24, r0
   3f518:	11 24       	eor	r1, r1
   3f51a:	b7 01       	movw	r22, r14
   3f51c:	80 50       	subi	r24, 0x00	; 0
   3f51e:	90 40       	sbci	r25, 0x00	; 0
   3f520:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3f524:	e0 91 00 00 	lds	r30, 0x0000
   3f528:	f0 91 00 00 	lds	r31, 0x0000
   3f52c:	9e 89       	ldd	r25, Y+22	; 0x16
   3f52e:	86 89       	ldd	r24, Z+22	; 0x16
   3f530:	98 17       	cp	r25, r24
   3f532:	00 f4       	brcc	.+0      	; 0x3f534 <xTaskIncrementTick+0x10a>
   3f534:	00 c0       	rjmp	.+0      	; 0x3f536 <xTaskIncrementTick+0x10c>
   3f536:	dd 24       	eor	r13, r13
   3f538:	d3 94       	inc	r13
   3f53a:	00 c0       	rjmp	.+0      	; 0x3f53c <xTaskIncrementTick+0x112>
   3f53c:	e0 91 00 00 	lds	r30, 0x0000
   3f540:	f0 91 00 00 	lds	r31, 0x0000
   3f544:	e6 89       	ldd	r30, Z+22	; 0x16
   3f546:	89 e0       	ldi	r24, 0x09	; 9
   3f548:	e8 9f       	mul	r30, r24
   3f54a:	f0 01       	movw	r30, r0
   3f54c:	11 24       	eor	r1, r1
   3f54e:	e0 50       	subi	r30, 0x00	; 0
   3f550:	f0 40       	sbci	r31, 0x00	; 0
   3f552:	80 81       	ld	r24, Z
   3f554:	82 30       	cpi	r24, 0x02	; 2
   3f556:	00 f0       	brcs	.+0      	; 0x3f558 <xTaskIncrementTick+0x12e>
   3f558:	dd 24       	eor	r13, r13
   3f55a:	d3 94       	inc	r13
   3f55c:	00 c0       	rjmp	.+0      	; 0x3f55e <xTaskIncrementTick+0x134>
   3f55e:	80 91 00 00 	lds	r24, 0x0000
   3f562:	8f 5f       	subi	r24, 0xFF	; 255
   3f564:	80 93 00 00 	sts	0x0000, r24
   3f568:	d1 2c       	mov	r13, r1
   3f56a:	80 91 00 00 	lds	r24, 0x0000
   3f56e:	88 23       	and	r24, r24
   3f570:	01 f0       	breq	.+0      	; 0x3f572 <xTaskIncrementTick+0x148>
   3f572:	dd 24       	eor	r13, r13
   3f574:	d3 94       	inc	r13
   3f576:	8d 2d       	mov	r24, r13
   3f578:	df 91       	pop	r29
   3f57a:	cf 91       	pop	r28
   3f57c:	1f 91       	pop	r17
   3f57e:	0f 91       	pop	r16
   3f580:	ff 90       	pop	r15
   3f582:	ef 90       	pop	r14
   3f584:	df 90       	pop	r13
   3f586:	cf 90       	pop	r12
   3f588:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

0007e9b4 <xTaskResumeAll>:
   7e9b4:	ef 92       	push	r14
   7e9b6:	ff 92       	push	r15
   7e9b8:	0f 93       	push	r16
   7e9ba:	1f 93       	push	r17
   7e9bc:	cf 93       	push	r28
   7e9be:	df 93       	push	r29
   7e9c0:	0f b6       	in	r0, 0x3f	; 63
   7e9c2:	f8 94       	cli
   7e9c4:	0f 92       	push	r0
   7e9c6:	80 91 00 00 	lds	r24, 0x0000
   7e9ca:	81 50       	subi	r24, 0x01	; 1
   7e9cc:	80 93 00 00 	sts	0x0000, r24
   7e9d0:	80 91 00 00 	lds	r24, 0x0000
   7e9d4:	88 23       	and	r24, r24
   7e9d6:	01 f0       	breq	.+0      	; 0x7e9d8 <xTaskResumeAll+0x24>
   7e9d8:	80 e0       	ldi	r24, 0x00	; 0
   7e9da:	00 c0       	rjmp	.+0      	; 0x7e9dc <xTaskResumeAll+0x28>
   7e9dc:	80 91 00 00 	lds	r24, 0x0000
   7e9e0:	88 23       	and	r24, r24
   7e9e2:	01 f0       	breq	.+0      	; 0x7e9e4 <xTaskResumeAll+0x30>
   7e9e4:	99 e0       	ldi	r25, 0x09	; 9
   7e9e6:	f9 2e       	mov	r15, r25
   7e9e8:	ee 24       	eor	r14, r14
   7e9ea:	e3 94       	inc	r14
   7e9ec:	80 91 00 00 	lds	r24, 0x0000
   7e9f0:	88 23       	and	r24, r24
   7e9f2:	01 f0       	breq	.+0      	; 0x7e9f4 <xTaskResumeAll+0x40>
   7e9f4:	e0 91 00 00 	lds	r30, 0x0000
   7e9f8:	f0 91 00 00 	lds	r31, 0x0000
   7e9fc:	c6 81       	ldd	r28, Z+6	; 0x06
   7e9fe:	d7 81       	ldd	r29, Z+7	; 0x07
   7ea00:	ce 01       	movw	r24, r28
   7ea02:	0c 96       	adiw	r24, 0x0c	; 12
   7ea04:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7ea08:	8e 01       	movw	r16, r28
   7ea0a:	0e 5f       	subi	r16, 0xFE	; 254
   7ea0c:	1f 4f       	sbci	r17, 0xFF	; 255
   7ea0e:	c8 01       	movw	r24, r16
   7ea10:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7ea14:	8e 89       	ldd	r24, Y+22	; 0x16
   7ea16:	90 91 00 00 	lds	r25, 0x0000
   7ea1a:	98 17       	cp	r25, r24
   7ea1c:	00 f4       	brcc	.+0      	; 0x7ea1e <xTaskResumeAll+0x6a>
   7ea1e:	80 93 00 00 	sts	0x0000, r24
   7ea22:	f8 9e       	mul	r15, r24
   7ea24:	c0 01       	movw	r24, r0
   7ea26:	11 24       	eor	r1, r1
   7ea28:	b8 01       	movw	r22, r16
   7ea2a:	80 50       	subi	r24, 0x00	; 0
   7ea2c:	90 40       	sbci	r25, 0x00	; 0
   7ea2e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7ea32:	e0 91 00 00 	lds	r30, 0x0000
   7ea36:	f0 91 00 00 	lds	r31, 0x0000
   7ea3a:	9e 89       	ldd	r25, Y+22	; 0x16
   7ea3c:	86 89       	ldd	r24, Z+22	; 0x16
   7ea3e:	98 17       	cp	r25, r24
   7ea40:	00 f0       	brcs	.+0      	; 0x7ea42 <xTaskResumeAll+0x8e>
   7ea42:	e0 92 00 00 	sts	0x0000, r14
   7ea46:	00 c0       	rjmp	.+0      	; 0x7ea48 <xTaskResumeAll+0x94>
   7ea48:	80 91 00 00 	lds	r24, 0x0000
   7ea4c:	81 11       	cpse	r24, r1
   7ea4e:	00 c0       	rjmp	.+0      	; 0x7ea50 <xTaskResumeAll+0x9c>
   7ea50:	80 91 00 00 	lds	r24, 0x0000
   7ea54:	81 30       	cpi	r24, 0x01	; 1
   7ea56:	01 f0       	breq	.+0      	; 0x7ea58 <xTaskResumeAll+0xa4>
   7ea58:	00 c0       	rjmp	.+0      	; 0x7ea5a <xTaskResumeAll+0xa6>
   7ea5a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7ea5e:	81 e0       	ldi	r24, 0x01	; 1
   7ea60:	00 c0       	rjmp	.+0      	; 0x7ea62 <xTaskResumeAll+0xae>
   7ea62:	c1 e0       	ldi	r28, 0x01	; 1
   7ea64:	80 91 00 00 	lds	r24, 0x0000
   7ea68:	88 23       	and	r24, r24
   7ea6a:	01 f0       	breq	.+0      	; 0x7ea6c <xTaskResumeAll+0xb8>
   7ea6c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7ea70:	81 11       	cpse	r24, r1
   7ea72:	c0 93 00 00 	sts	0x0000, r28
   7ea76:	80 91 00 00 	lds	r24, 0x0000
   7ea7a:	81 50       	subi	r24, 0x01	; 1
   7ea7c:	80 93 00 00 	sts	0x0000, r24
   7ea80:	00 c0       	rjmp	.+0      	; 0x7ea82 <xTaskResumeAll+0xce>
   7ea82:	0f 90       	pop	r0
   7ea84:	0f be       	out	0x3f, r0	; 63
   7ea86:	df 91       	pop	r29
   7ea88:	cf 91       	pop	r28
   7ea8a:	1f 91       	pop	r17
   7ea8c:	0f 91       	pop	r16
   7ea8e:	ff 90       	pop	r15
   7ea90:	ef 90       	pop	r14
   7ea92:	08 95       	ret

Disassembly of section .text.vTaskDelayUntil:

000fd448 <vTaskDelayUntil>:
   fd448:	0f 93       	push	r16
   fd44a:	1f 93       	push	r17
   fd44c:	cf 93       	push	r28
   fd44e:	df 93       	push	r29
   fd450:	8c 01       	movw	r16, r24
   fd452:	eb 01       	movw	r28, r22
   fd454:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fd458:	40 91 00 00 	lds	r20, 0x0000
   fd45c:	50 91 00 00 	lds	r21, 0x0000
   fd460:	f8 01       	movw	r30, r16
   fd462:	20 81       	ld	r18, Z
   fd464:	31 81       	ldd	r19, Z+1	; 0x01
   fd466:	c2 0f       	add	r28, r18
   fd468:	d3 1f       	adc	r29, r19
   fd46a:	42 17       	cp	r20, r18
   fd46c:	53 07       	cpc	r21, r19
   fd46e:	00 f4       	brcc	.+0      	; 0xfd470 <vTaskDelayUntil+0x28>
   fd470:	c2 17       	cp	r28, r18
   fd472:	d3 07       	cpc	r29, r19
   fd474:	00 f4       	brcc	.+0      	; 0xfd476 <vTaskDelayUntil+0x2e>
   fd476:	81 e0       	ldi	r24, 0x01	; 1
   fd478:	00 c0       	rjmp	.+0      	; 0xfd47a <vTaskDelayUntil+0x32>
   fd47a:	81 e0       	ldi	r24, 0x01	; 1
   fd47c:	c2 17       	cp	r28, r18
   fd47e:	d3 07       	cpc	r29, r19
   fd480:	00 f0       	brcs	.+0      	; 0xfd482 <vTaskDelayUntil+0x3a>
   fd482:	4c 17       	cp	r20, r28
   fd484:	5d 07       	cpc	r21, r29
   fd486:	00 f0       	brcs	.+0      	; 0xfd488 <vTaskDelayUntil+0x40>
   fd488:	80 e0       	ldi	r24, 0x00	; 0
   fd48a:	f8 01       	movw	r30, r16
   fd48c:	d1 83       	std	Z+1, r29	; 0x01
   fd48e:	c0 83       	st	Z, r28
   fd490:	88 23       	and	r24, r24
   fd492:	01 f0       	breq	.+0      	; 0xfd494 <vTaskDelayUntil+0x4c>
   fd494:	80 91 00 00 	lds	r24, 0x0000
   fd498:	90 91 00 00 	lds	r25, 0x0000
   fd49c:	02 96       	adiw	r24, 0x02	; 2
   fd49e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fd4a2:	ce 01       	movw	r24, r28
   fd4a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fd4a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fd4ac:	81 11       	cpse	r24, r1
   fd4ae:	00 c0       	rjmp	.+0      	; 0xfd4b0 <vTaskDelayUntil+0x68>
   fd4b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fd4b4:	df 91       	pop	r29
   fd4b6:	cf 91       	pop	r28
   fd4b8:	1f 91       	pop	r17
   fd4ba:	0f 91       	pop	r16
   fd4bc:	08 95       	ret

Disassembly of section .text.vTaskDelay:

001fa906 <vTaskDelay>:
  1fa906:	0f 93       	push	r16
  1fa908:	1f 93       	push	r17
  1fa90a:	cf 93       	push	r28
  1fa90c:	df 93       	push	r29
  1fa90e:	8c 01       	movw	r16, r24
  1fa910:	00 97       	sbiw	r24, 0x00	; 0
  1fa912:	01 f4       	brne	.+0      	; 0x1fa914 <vTaskDelay+0xe>
  1fa914:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1fa918:	00 c0       	rjmp	.+0      	; 0x1fa91a <vTaskDelay+0x14>
  1fa91a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1fa91e:	c0 91 00 00 	lds	r28, 0x0000
  1fa922:	d0 91 00 00 	lds	r29, 0x0000
  1fa926:	c0 0f       	add	r28, r16
  1fa928:	d1 1f       	adc	r29, r17
  1fa92a:	80 91 00 00 	lds	r24, 0x0000
  1fa92e:	90 91 00 00 	lds	r25, 0x0000
  1fa932:	02 96       	adiw	r24, 0x02	; 2
  1fa934:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1fa938:	ce 01       	movw	r24, r28
  1fa93a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1fa93e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1fa942:	88 23       	and	r24, r24
  1fa944:	01 f0       	breq	.+0      	; 0x1fa946 <vTaskDelay+0x40>
  1fa946:	df 91       	pop	r29
  1fa948:	cf 91       	pop	r28
  1fa94a:	1f 91       	pop	r17
  1fa94c:	0f 91       	pop	r16
  1fa94e:	08 95       	ret

Disassembly of section .text.prvIdleTask:

003f5256 <prvIdleTask>:
  3f5256:	80 91 00 00 	lds	r24, 0x0000
  3f525a:	88 23       	and	r24, r24
  3f525c:	01 f0       	breq	.+0      	; 0x3f525e <prvIdleTask+0x8>
  3f525e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f5262:	c0 91 00 00 	lds	r28, 0x0000
  3f5266:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f526a:	cc 23       	and	r28, r28
  3f526c:	01 f0       	breq	.+0      	; 0x3f526e <prvIdleTask+0x18>
  3f526e:	0f b6       	in	r0, 0x3f	; 63
  3f5270:	f8 94       	cli
  3f5272:	0f 92       	push	r0
  3f5274:	e0 91 00 00 	lds	r30, 0x0000
  3f5278:	f0 91 00 00 	lds	r31, 0x0000
  3f527c:	c6 81       	ldd	r28, Z+6	; 0x06
  3f527e:	d7 81       	ldd	r29, Z+7	; 0x07
  3f5280:	ce 01       	movw	r24, r28
  3f5282:	02 96       	adiw	r24, 0x02	; 2
  3f5284:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f5288:	80 91 00 00 	lds	r24, 0x0000
  3f528c:	81 50       	subi	r24, 0x01	; 1
  3f528e:	80 93 00 00 	sts	0x0000, r24
  3f5292:	80 91 00 00 	lds	r24, 0x0000
  3f5296:	81 50       	subi	r24, 0x01	; 1
  3f5298:	80 93 00 00 	sts	0x0000, r24
  3f529c:	0f 90       	pop	r0
  3f529e:	0f be       	out	0x3f, r0	; 63
  3f52a0:	8f 89       	ldd	r24, Y+23	; 0x17
  3f52a2:	98 8d       	ldd	r25, Y+24	; 0x18
  3f52a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f52a8:	ce 01       	movw	r24, r28
  3f52aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f52ae:	00 c0       	rjmp	.+0      	; 0x3f52b0 <prvIdleTask+0x5a>
  3f52b0:	80 91 00 00 	lds	r24, 0x0000
  3f52b4:	82 30       	cpi	r24, 0x02	; 2
  3f52b6:	00 f0       	brcs	.+0      	; 0x3f52b8 <prvIdleTask+0x62>
  3f52b8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3f52bc:	00 c0       	rjmp	.+0      	; 0x3f52be <prvIdleTask+0x68>

Disassembly of section .text.vTaskSwitchContext:

007ea514 <vTaskSwitchContext>:
  7ea514:	80 91 00 00 	lds	r24, 0x0000
  7ea518:	88 23       	and	r24, r24
  7ea51a:	01 f0       	breq	.+0      	; 0x7ea51c <vTaskSwitchContext+0x8>
  7ea51c:	81 e0       	ldi	r24, 0x01	; 1
  7ea51e:	80 93 00 00 	sts	0x0000, r24
  7ea522:	08 95       	ret
  7ea524:	10 92 00 00 	sts	0x0000, r1
  7ea528:	99 e0       	ldi	r25, 0x09	; 9
  7ea52a:	e0 91 00 00 	lds	r30, 0x0000
  7ea52e:	9e 9f       	mul	r25, r30
  7ea530:	f0 01       	movw	r30, r0
  7ea532:	11 24       	eor	r1, r1
  7ea534:	e0 50       	subi	r30, 0x00	; 0
  7ea536:	f0 40       	sbci	r31, 0x00	; 0
  7ea538:	80 81       	ld	r24, Z
  7ea53a:	81 11       	cpse	r24, r1
  7ea53c:	00 c0       	rjmp	.+0      	; 0x7ea53e <vTaskSwitchContext+0x2a>
  7ea53e:	80 91 00 00 	lds	r24, 0x0000
  7ea542:	81 50       	subi	r24, 0x01	; 1
  7ea544:	80 93 00 00 	sts	0x0000, r24
  7ea548:	00 c0       	rjmp	.+0      	; 0x7ea54a <vTaskSwitchContext+0x36>
  7ea54a:	e0 91 00 00 	lds	r30, 0x0000
  7ea54e:	89 e0       	ldi	r24, 0x09	; 9
  7ea550:	e8 9f       	mul	r30, r24
  7ea552:	f0 01       	movw	r30, r0
  7ea554:	11 24       	eor	r1, r1
  7ea556:	e0 50       	subi	r30, 0x00	; 0
  7ea558:	f0 40       	sbci	r31, 0x00	; 0
  7ea55a:	a1 81       	ldd	r26, Z+1	; 0x01
  7ea55c:	b2 81       	ldd	r27, Z+2	; 0x02
  7ea55e:	12 96       	adiw	r26, 0x02	; 2
  7ea560:	0d 90       	ld	r0, X+
  7ea562:	bc 91       	ld	r27, X
  7ea564:	a0 2d       	mov	r26, r0
  7ea566:	b2 83       	std	Z+2, r27	; 0x02
  7ea568:	a1 83       	std	Z+1, r26	; 0x01
  7ea56a:	cf 01       	movw	r24, r30
  7ea56c:	03 96       	adiw	r24, 0x03	; 3
  7ea56e:	a8 17       	cp	r26, r24
  7ea570:	b9 07       	cpc	r27, r25
  7ea572:	01 f4       	brne	.+0      	; 0x7ea574 <vTaskSwitchContext+0x60>
  7ea574:	12 96       	adiw	r26, 0x02	; 2
  7ea576:	8d 91       	ld	r24, X+
  7ea578:	9c 91       	ld	r25, X
  7ea57a:	13 97       	sbiw	r26, 0x03	; 3
  7ea57c:	92 83       	std	Z+2, r25	; 0x02
  7ea57e:	81 83       	std	Z+1, r24	; 0x01
  7ea580:	01 80       	ldd	r0, Z+1	; 0x01
  7ea582:	f2 81       	ldd	r31, Z+2	; 0x02
  7ea584:	e0 2d       	mov	r30, r0
  7ea586:	86 81       	ldd	r24, Z+6	; 0x06
  7ea588:	97 81       	ldd	r25, Z+7	; 0x07
  7ea58a:	90 93 00 00 	sts	0x0000, r25
  7ea58e:	80 93 00 00 	sts	0x0000, r24
  7ea592:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

00fd4aa8 <vTaskPlaceOnEventList>:
  fd4aa8:	cf 93       	push	r28
  fd4aaa:	df 93       	push	r29
  fd4aac:	eb 01       	movw	r28, r22
  fd4aae:	60 91 00 00 	lds	r22, 0x0000
  fd4ab2:	70 91 00 00 	lds	r23, 0x0000
  fd4ab6:	64 5f       	subi	r22, 0xF4	; 244
  fd4ab8:	7f 4f       	sbci	r23, 0xFF	; 255
  fd4aba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  fd4abe:	80 91 00 00 	lds	r24, 0x0000
  fd4ac2:	90 91 00 00 	lds	r25, 0x0000
  fd4ac6:	02 96       	adiw	r24, 0x02	; 2
  fd4ac8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  fd4acc:	80 91 00 00 	lds	r24, 0x0000
  fd4ad0:	90 91 00 00 	lds	r25, 0x0000
  fd4ad4:	8c 0f       	add	r24, r28
  fd4ad6:	9d 1f       	adc	r25, r29
  fd4ad8:	df 91       	pop	r29
  fd4ada:	cf 91       	pop	r28
  fd4adc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.vTaskPlaceOnUnorderedEventList:

01fa9588 <vTaskPlaceOnUnorderedEventList>:
 1fa9588:	cf 93       	push	r28
 1fa958a:	df 93       	push	r29
 1fa958c:	ea 01       	movw	r28, r20
 1fa958e:	e0 91 00 00 	lds	r30, 0x0000
 1fa9592:	f0 91 00 00 	lds	r31, 0x0000
 1fa9596:	70 68       	ori	r23, 0x80	; 128
 1fa9598:	75 87       	std	Z+13, r23	; 0x0d
 1fa959a:	64 87       	std	Z+12, r22	; 0x0c
 1fa959c:	60 91 00 00 	lds	r22, 0x0000
 1fa95a0:	70 91 00 00 	lds	r23, 0x0000
 1fa95a4:	64 5f       	subi	r22, 0xF4	; 244
 1fa95a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa95a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fa95ac:	80 91 00 00 	lds	r24, 0x0000
 1fa95b0:	90 91 00 00 	lds	r25, 0x0000
 1fa95b4:	02 96       	adiw	r24, 0x02	; 2
 1fa95b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fa95ba:	80 91 00 00 	lds	r24, 0x0000
 1fa95be:	90 91 00 00 	lds	r25, 0x0000
 1fa95c2:	8c 0f       	add	r24, r28
 1fa95c4:	9d 1f       	adc	r25, r29
 1fa95c6:	df 91       	pop	r29
 1fa95c8:	cf 91       	pop	r28
 1fa95ca:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.xTaskRemoveFromEventList:

03f52b56 <xTaskRemoveFromEventList>:
 3f52b56:	0f 93       	push	r16
 3f52b58:	1f 93       	push	r17
 3f52b5a:	cf 93       	push	r28
 3f52b5c:	df 93       	push	r29
 3f52b5e:	dc 01       	movw	r26, r24
 3f52b60:	15 96       	adiw	r26, 0x05	; 5
 3f52b62:	ed 91       	ld	r30, X+
 3f52b64:	fc 91       	ld	r31, X
 3f52b66:	16 97       	sbiw	r26, 0x06	; 6
 3f52b68:	c6 81       	ldd	r28, Z+6	; 0x06
 3f52b6a:	d7 81       	ldd	r29, Z+7	; 0x07
 3f52b6c:	8e 01       	movw	r16, r28
 3f52b6e:	04 5f       	subi	r16, 0xF4	; 244
 3f52b70:	1f 4f       	sbci	r17, 0xFF	; 255
 3f52b72:	c8 01       	movw	r24, r16
 3f52b74:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3f52b78:	80 91 00 00 	lds	r24, 0x0000
 3f52b7c:	81 11       	cpse	r24, r1
 3f52b7e:	00 c0       	rjmp	.+0      	; 0x3f52b80 <xTaskRemoveFromEventList+0x2a>
 3f52b80:	0a 50       	subi	r16, 0x0A	; 10
 3f52b82:	11 09       	sbc	r17, r1
 3f52b84:	c8 01       	movw	r24, r16
 3f52b86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3f52b8a:	8e 89       	ldd	r24, Y+22	; 0x16
 3f52b8c:	90 91 00 00 	lds	r25, 0x0000
 3f52b90:	98 17       	cp	r25, r24
 3f52b92:	00 f4       	brcc	.+0      	; 0x3f52b94 <xTaskRemoveFromEventList+0x3e>
 3f52b94:	80 93 00 00 	sts	0x0000, r24
 3f52b98:	b9 e0       	ldi	r27, 0x09	; 9
 3f52b9a:	8b 9f       	mul	r24, r27
 3f52b9c:	c0 01       	movw	r24, r0
 3f52b9e:	11 24       	eor	r1, r1
 3f52ba0:	b8 01       	movw	r22, r16
 3f52ba2:	80 50       	subi	r24, 0x00	; 0
 3f52ba4:	90 40       	sbci	r25, 0x00	; 0
 3f52ba6:	00 c0       	rjmp	.+0      	; 0x3f52ba8 <xTaskRemoveFromEventList+0x52>
 3f52ba8:	b8 01       	movw	r22, r16
 3f52baa:	80 e0       	ldi	r24, 0x00	; 0
 3f52bac:	90 e0       	ldi	r25, 0x00	; 0
 3f52bae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3f52bb2:	e0 91 00 00 	lds	r30, 0x0000
 3f52bb6:	f0 91 00 00 	lds	r31, 0x0000
 3f52bba:	9e 89       	ldd	r25, Y+22	; 0x16
 3f52bbc:	86 89       	ldd	r24, Z+22	; 0x16
 3f52bbe:	89 17       	cp	r24, r25
 3f52bc0:	00 f4       	brcc	.+0      	; 0x3f52bc2 <xTaskRemoveFromEventList+0x6c>
 3f52bc2:	81 e0       	ldi	r24, 0x01	; 1
 3f52bc4:	80 93 00 00 	sts	0x0000, r24
 3f52bc8:	00 c0       	rjmp	.+0      	; 0x3f52bca <xTaskRemoveFromEventList+0x74>
 3f52bca:	80 e0       	ldi	r24, 0x00	; 0
 3f52bcc:	df 91       	pop	r29
 3f52bce:	cf 91       	pop	r28
 3f52bd0:	1f 91       	pop	r17
 3f52bd2:	0f 91       	pop	r16
 3f52bd4:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromUnorderedEventList:

07ea572c <xTaskRemoveFromUnorderedEventList>:
 7ea572c:	0f 93       	push	r16
 7ea572e:	1f 93       	push	r17
 7ea5730:	cf 93       	push	r28
 7ea5732:	df 93       	push	r29
 7ea5734:	70 68       	ori	r23, 0x80	; 128
 7ea5736:	fc 01       	movw	r30, r24
 7ea5738:	71 83       	std	Z+1, r23	; 0x01
 7ea573a:	60 83       	st	Z, r22
 7ea573c:	c6 81       	ldd	r28, Z+6	; 0x06
 7ea573e:	d7 81       	ldd	r29, Z+7	; 0x07
 7ea5740:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 7ea5744:	8e 01       	movw	r16, r28
 7ea5746:	0e 5f       	subi	r16, 0xFE	; 254
 7ea5748:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea574a:	c8 01       	movw	r24, r16
 7ea574c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 7ea5750:	8e 89       	ldd	r24, Y+22	; 0x16
 7ea5752:	90 91 00 00 	lds	r25, 0x0000
 7ea5756:	98 17       	cp	r25, r24
 7ea5758:	00 f4       	brcc	.+0      	; 0x7ea575a <xTaskRemoveFromUnorderedEventList+0x2e>
 7ea575a:	80 93 00 00 	sts	0x0000, r24
 7ea575e:	f9 e0       	ldi	r31, 0x09	; 9
 7ea5760:	8f 9f       	mul	r24, r31
 7ea5762:	c0 01       	movw	r24, r0
 7ea5764:	11 24       	eor	r1, r1
 7ea5766:	b8 01       	movw	r22, r16
 7ea5768:	80 50       	subi	r24, 0x00	; 0
 7ea576a:	90 40       	sbci	r25, 0x00	; 0
 7ea576c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 7ea5770:	e0 91 00 00 	lds	r30, 0x0000
 7ea5774:	f0 91 00 00 	lds	r31, 0x0000
 7ea5778:	9e 89       	ldd	r25, Y+22	; 0x16
 7ea577a:	86 89       	ldd	r24, Z+22	; 0x16
 7ea577c:	89 17       	cp	r24, r25
 7ea577e:	00 f4       	brcc	.+0      	; 0x7ea5780 <xTaskRemoveFromUnorderedEventList+0x54>
 7ea5780:	81 e0       	ldi	r24, 0x01	; 1
 7ea5782:	80 93 00 00 	sts	0x0000, r24
 7ea5786:	00 c0       	rjmp	.+0      	; 0x7ea5788 <xTaskRemoveFromUnorderedEventList+0x5c>
 7ea5788:	80 e0       	ldi	r24, 0x00	; 0
 7ea578a:	df 91       	pop	r29
 7ea578c:	cf 91       	pop	r28
 7ea578e:	1f 91       	pop	r17
 7ea5790:	0f 91       	pop	r16
 7ea5792:	08 95       	ret

Disassembly of section .text.vTaskSetTimeOutState:

0fd4aec0 <vTaskSetTimeOutState>:
 fd4aec0:	20 91 00 00 	lds	r18, 0x0000
 fd4aec4:	fc 01       	movw	r30, r24
 fd4aec6:	20 83       	st	Z, r18
 fd4aec8:	20 91 00 00 	lds	r18, 0x0000
 fd4aecc:	30 91 00 00 	lds	r19, 0x0000
 fd4aed0:	32 83       	std	Z+2, r19	; 0x02
 fd4aed2:	21 83       	std	Z+1, r18	; 0x01
 fd4aed4:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

1fa95d96 <xTaskCheckForTimeOut>:
1fa95d96:	0f b6       	in	r0, 0x3f	; 63
1fa95d98:	f8 94       	cli
1fa95d9a:	0f 92       	push	r0
1fa95d9c:	40 91 00 00 	lds	r20, 0x0000
1fa95da0:	50 91 00 00 	lds	r21, 0x0000
1fa95da4:	f0 91 00 00 	lds	r31, 0x0000
1fa95da8:	dc 01       	movw	r26, r24
1fa95daa:	ec 91       	ld	r30, X
1fa95dac:	11 96       	adiw	r26, 0x01	; 1
1fa95dae:	2d 91       	ld	r18, X+
1fa95db0:	3c 91       	ld	r19, X
1fa95db2:	12 97       	sbiw	r26, 0x02	; 2
1fa95db4:	fe 17       	cp	r31, r30
1fa95db6:	01 f0       	breq	.+0      	; 0x1fa95db8 <xTaskCheckForTimeOut+0x22>
1fa95db8:	42 17       	cp	r20, r18
1fa95dba:	53 07       	cpc	r21, r19
1fa95dbc:	00 f4       	brcc	.+0      	; 0x1fa95dbe <xTaskCheckForTimeOut+0x28>
1fa95dbe:	db 01       	movw	r26, r22
1fa95dc0:	ed 91       	ld	r30, X+
1fa95dc2:	fc 91       	ld	r31, X
1fa95dc4:	da 01       	movw	r26, r20
1fa95dc6:	a2 1b       	sub	r26, r18
1fa95dc8:	b3 0b       	sbc	r27, r19
1fa95dca:	ae 17       	cp	r26, r30
1fa95dcc:	bf 07       	cpc	r27, r31
1fa95dce:	00 f4       	brcc	.+0      	; 0x1fa95dd0 <xTaskCheckForTimeOut+0x3a>
1fa95dd0:	24 1b       	sub	r18, r20
1fa95dd2:	35 0b       	sbc	r19, r21
1fa95dd4:	2e 0f       	add	r18, r30
1fa95dd6:	3f 1f       	adc	r19, r31
1fa95dd8:	fb 01       	movw	r30, r22
1fa95dda:	31 83       	std	Z+1, r19	; 0x01
1fa95ddc:	20 83       	st	Z, r18
1fa95dde:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1fa95de2:	80 e0       	ldi	r24, 0x00	; 0
1fa95de4:	00 c0       	rjmp	.+0      	; 0x1fa95de6 <xTaskCheckForTimeOut+0x50>
1fa95de6:	81 e0       	ldi	r24, 0x01	; 1
1fa95de8:	0f 90       	pop	r0
1fa95dea:	0f be       	out	0x3f, r0	; 63
1fa95dec:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

3f52bb84 <vTaskMissedYield>:
3f52bb84:	81 e0       	ldi	r24, 0x01	; 1
3f52bb86:	80 93 00 00 	sts	0x0000, r24
3f52bb8a:	08 95       	ret

Disassembly of section .text.uxTaskResetEventItemValue:

7ea57710 <uxTaskResetEventItemValue>:
7ea57710:	e0 91 00 00 	lds	r30, 0x0000
7ea57714:	f0 91 00 00 	lds	r31, 0x0000
7ea57718:	84 85       	ldd	r24, Z+12	; 0x0c
7ea5771a:	95 85       	ldd	r25, Z+13	; 0x0d
7ea5771c:	e0 91 00 00 	lds	r30, 0x0000
7ea57720:	f0 91 00 00 	lds	r31, 0x0000
7ea57724:	a0 91 00 00 	lds	r26, 0x0000
7ea57728:	b0 91 00 00 	lds	r27, 0x0000
7ea5772c:	56 96       	adiw	r26, 0x16	; 22
7ea5772e:	4c 91       	ld	r20, X
7ea57730:	24 e0       	ldi	r18, 0x04	; 4
7ea57732:	30 e0       	ldi	r19, 0x00	; 0
7ea57734:	24 1b       	sub	r18, r20
7ea57736:	31 09       	sbc	r19, r1
7ea57738:	35 87       	std	Z+13, r19	; 0x0d
7ea5773a:	24 87       	std	Z+12, r18	; 0x0c
7ea5773c:	08 95       	ret

Disassembly of section .text.ulTaskNotifyTake:

fd4aee4e <ulTaskNotifyTake>:
fd4aee4e:	0f 93       	push	r16
fd4aee50:	1f 93       	push	r17
fd4aee52:	cf 93       	push	r28
fd4aee54:	df 93       	push	r29
fd4aee56:	18 2f       	mov	r17, r24
fd4aee58:	eb 01       	movw	r28, r22
fd4aee5a:	0f b6       	in	r0, 0x3f	; 63
fd4aee5c:	f8 94       	cli
fd4aee5e:	0f 92       	push	r0
fd4aee60:	e0 91 00 00 	lds	r30, 0x0000
fd4aee64:	f0 91 00 00 	lds	r31, 0x0000
fd4aee68:	41 a1       	ldd	r20, Z+33	; 0x21
fd4aee6a:	52 a1       	ldd	r21, Z+34	; 0x22
fd4aee6c:	63 a1       	ldd	r22, Z+35	; 0x23
fd4aee6e:	74 a1       	ldd	r23, Z+36	; 0x24
fd4aee70:	45 2b       	or	r20, r21
fd4aee72:	46 2b       	or	r20, r22
fd4aee74:	47 2b       	or	r20, r23
fd4aee76:	01 f4       	brne	.+0      	; 0xfd4aee78 <ulTaskNotifyTake+0x2a>
fd4aee78:	e0 91 00 00 	lds	r30, 0x0000
fd4aee7c:	f0 91 00 00 	lds	r31, 0x0000
fd4aee80:	81 e0       	ldi	r24, 0x01	; 1
fd4aee82:	85 a3       	std	Z+37, r24	; 0x25
fd4aee84:	20 97       	sbiw	r28, 0x00	; 0
fd4aee86:	01 f0       	breq	.+0      	; 0xfd4aee88 <ulTaskNotifyTake+0x3a>
fd4aee88:	80 91 00 00 	lds	r24, 0x0000
fd4aee8c:	90 91 00 00 	lds	r25, 0x0000
fd4aee90:	02 96       	adiw	r24, 0x02	; 2
fd4aee92:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fd4aee96:	80 91 00 00 	lds	r24, 0x0000
fd4aee9a:	90 91 00 00 	lds	r25, 0x0000
fd4aee9e:	8c 0f       	add	r24, r28
fd4aeea0:	9d 1f       	adc	r25, r29
fd4aeea2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fd4aeea6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fd4aeeaa:	0f 90       	pop	r0
fd4aeeac:	0f be       	out	0x3f, r0	; 63
fd4aeeae:	0f b6       	in	r0, 0x3f	; 63
fd4aeeb0:	f8 94       	cli
fd4aeeb2:	0f 92       	push	r0
fd4aeeb4:	e0 91 00 00 	lds	r30, 0x0000
fd4aeeb8:	f0 91 00 00 	lds	r31, 0x0000
fd4aeebc:	61 a1       	ldd	r22, Z+33	; 0x21
fd4aeebe:	72 a1       	ldd	r23, Z+34	; 0x22
fd4aeec0:	83 a1       	ldd	r24, Z+35	; 0x23
fd4aeec2:	94 a1       	ldd	r25, Z+36	; 0x24
fd4aeec4:	61 15       	cp	r22, r1
fd4aeec6:	71 05       	cpc	r23, r1
fd4aeec8:	81 05       	cpc	r24, r1
fd4aeeca:	91 05       	cpc	r25, r1
fd4aeecc:	01 f0       	breq	.+0      	; 0xfd4aeece <ulTaskNotifyTake+0x80>
fd4aeece:	e0 91 00 00 	lds	r30, 0x0000
fd4aeed2:	f0 91 00 00 	lds	r31, 0x0000
fd4aeed6:	11 23       	and	r17, r17
fd4aeed8:	01 f0       	breq	.+0      	; 0xfd4aeeda <ulTaskNotifyTake+0x8c>
fd4aeeda:	11 a2       	std	Z+33, r1	; 0x21
fd4aeedc:	12 a2       	std	Z+34, r1	; 0x22
fd4aeede:	13 a2       	std	Z+35, r1	; 0x23
fd4aeee0:	14 a2       	std	Z+36, r1	; 0x24
fd4aeee2:	00 c0       	rjmp	.+0      	; 0xfd4aeee4 <ulTaskNotifyTake+0x96>
fd4aeee4:	01 a1       	ldd	r16, Z+33	; 0x21
fd4aeee6:	12 a1       	ldd	r17, Z+34	; 0x22
fd4aeee8:	23 a1       	ldd	r18, Z+35	; 0x23
fd4aeeea:	34 a1       	ldd	r19, Z+36	; 0x24
fd4aeeec:	01 50       	subi	r16, 0x01	; 1
fd4aeeee:	11 09       	sbc	r17, r1
fd4aeef0:	21 09       	sbc	r18, r1
fd4aeef2:	31 09       	sbc	r19, r1
fd4aeef4:	01 a3       	std	Z+33, r16	; 0x21
fd4aeef6:	12 a3       	std	Z+34, r17	; 0x22
fd4aeef8:	23 a3       	std	Z+35, r18	; 0x23
fd4aeefa:	34 a3       	std	Z+36, r19	; 0x24
fd4aeefc:	e0 91 00 00 	lds	r30, 0x0000
fd4aef00:	f0 91 00 00 	lds	r31, 0x0000
fd4aef04:	15 a2       	std	Z+37, r1	; 0x25
fd4aef06:	0f 90       	pop	r0
fd4aef08:	0f be       	out	0x3f, r0	; 63
fd4aef0a:	df 91       	pop	r29
fd4aef0c:	cf 91       	pop	r28
fd4aef0e:	1f 91       	pop	r17
fd4aef10:	0f 91       	pop	r16
fd4aef12:	08 95       	ret

Disassembly of section .text.xTaskNotifyWait:

fa95dd62 <xTaskNotifyWait>:
fa95dd62:	4f 92       	push	r4
fa95dd64:	5f 92       	push	r5
fa95dd66:	6f 92       	push	r6
fa95dd68:	7f 92       	push	r7
fa95dd6a:	8f 92       	push	r8
fa95dd6c:	9f 92       	push	r9
fa95dd6e:	af 92       	push	r10
fa95dd70:	bf 92       	push	r11
fa95dd72:	ef 92       	push	r14
fa95dd74:	ff 92       	push	r15
fa95dd76:	0f 93       	push	r16
fa95dd78:	1f 93       	push	r17
fa95dd7a:	cf 93       	push	r28
fa95dd7c:	df 93       	push	r29
fa95dd7e:	00 d0       	rcall	.+0      	; 0xfa95dd80 <uxTaskResetEventItemValue+0x7bf06670>
fa95dd80:	00 d0       	rcall	.+0      	; 0xfa95dd82 <uxTaskResetEventItemValue+0x7bf06672>
fa95dd82:	cd b7       	in	r28, 0x3d	; 61
fa95dd84:	de b7       	in	r29, 0x3e	; 62
fa95dd86:	0f b6       	in	r0, 0x3f	; 63
fa95dd88:	f8 94       	cli
fa95dd8a:	0f 92       	push	r0
fa95dd8c:	e0 91 00 00 	lds	r30, 0x0000
fa95dd90:	f0 91 00 00 	lds	r31, 0x0000
fa95dd94:	e5 a1       	ldd	r30, Z+37	; 0x25
fa95dd96:	e2 30       	cpi	r30, 0x02	; 2
fa95dd98:	01 f0       	breq	.+0      	; 0xfa95dd9a <uxTaskResetEventItemValue+0x7bf0668a>
fa95dd9a:	e0 91 00 00 	lds	r30, 0x0000
fa95dd9e:	f0 91 00 00 	lds	r31, 0x0000
fa95dda2:	41 a0       	ldd	r4, Z+33	; 0x21
fa95dda4:	52 a0       	ldd	r5, Z+34	; 0x22
fa95dda6:	63 a0       	ldd	r6, Z+35	; 0x23
fa95dda8:	74 a0       	ldd	r7, Z+36	; 0x24
fa95ddaa:	dc 01       	movw	r26, r24
fa95ddac:	cb 01       	movw	r24, r22
fa95ddae:	80 95       	com	r24
fa95ddb0:	90 95       	com	r25
fa95ddb2:	a0 95       	com	r26
fa95ddb4:	b0 95       	com	r27
fa95ddb6:	84 21       	and	r24, r4
fa95ddb8:	95 21       	and	r25, r5
fa95ddba:	a6 21       	and	r26, r6
fa95ddbc:	b7 21       	and	r27, r7
fa95ddbe:	81 a3       	std	Z+33, r24	; 0x21
fa95ddc0:	92 a3       	std	Z+34, r25	; 0x22
fa95ddc2:	a3 a3       	std	Z+35, r26	; 0x23
fa95ddc4:	b4 a3       	std	Z+36, r27	; 0x24
fa95ddc6:	e0 91 00 00 	lds	r30, 0x0000
fa95ddca:	f0 91 00 00 	lds	r31, 0x0000
fa95ddce:	81 e0       	ldi	r24, 0x01	; 1
fa95ddd0:	85 a3       	std	Z+37, r24	; 0x25
fa95ddd2:	e1 14       	cp	r14, r1
fa95ddd4:	f1 04       	cpc	r15, r1
fa95ddd6:	01 f0       	breq	.+0      	; 0xfa95ddd8 <uxTaskResetEventItemValue+0x7bf066c8>
fa95ddd8:	80 91 00 00 	lds	r24, 0x0000
fa95dddc:	90 91 00 00 	lds	r25, 0x0000
fa95dde0:	02 96       	adiw	r24, 0x02	; 2
fa95dde2:	29 83       	std	Y+1, r18	; 0x01
fa95dde4:	3a 83       	std	Y+2, r19	; 0x02
fa95dde6:	4b 83       	std	Y+3, r20	; 0x03
fa95dde8:	5c 83       	std	Y+4, r21	; 0x04
fa95ddea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fa95ddee:	80 91 00 00 	lds	r24, 0x0000
fa95ddf2:	90 91 00 00 	lds	r25, 0x0000
fa95ddf6:	8e 0d       	add	r24, r14
fa95ddf8:	9f 1d       	adc	r25, r15
fa95ddfa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fa95ddfe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fa95de02:	5c 81       	ldd	r21, Y+4	; 0x04
fa95de04:	4b 81       	ldd	r20, Y+3	; 0x03
fa95de06:	3a 81       	ldd	r19, Y+2	; 0x02
fa95de08:	29 81       	ldd	r18, Y+1	; 0x01
fa95de0a:	0f 90       	pop	r0
fa95de0c:	0f be       	out	0x3f, r0	; 63
fa95de0e:	0f b6       	in	r0, 0x3f	; 63
fa95de10:	f8 94       	cli
fa95de12:	0f 92       	push	r0
fa95de14:	01 15       	cp	r16, r1
fa95de16:	11 05       	cpc	r17, r1
fa95de18:	01 f0       	breq	.+0      	; 0xfa95de1a <uxTaskResetEventItemValue+0x7bf0670a>
fa95de1a:	e0 91 00 00 	lds	r30, 0x0000
fa95de1e:	f0 91 00 00 	lds	r31, 0x0000
fa95de22:	81 a1       	ldd	r24, Z+33	; 0x21
fa95de24:	92 a1       	ldd	r25, Z+34	; 0x22
fa95de26:	a3 a1       	ldd	r26, Z+35	; 0x23
fa95de28:	b4 a1       	ldd	r27, Z+36	; 0x24
fa95de2a:	f8 01       	movw	r30, r16
fa95de2c:	80 83       	st	Z, r24
fa95de2e:	91 83       	std	Z+1, r25	; 0x01
fa95de30:	a2 83       	std	Z+2, r26	; 0x02
fa95de32:	b3 83       	std	Z+3, r27	; 0x03
fa95de34:	e0 91 00 00 	lds	r30, 0x0000
fa95de38:	f0 91 00 00 	lds	r31, 0x0000
fa95de3c:	85 a1       	ldd	r24, Z+37	; 0x25
fa95de3e:	81 30       	cpi	r24, 0x01	; 1
fa95de40:	01 f0       	breq	.+0      	; 0xfa95de42 <uxTaskResetEventItemValue+0x7bf06732>
fa95de42:	e0 91 00 00 	lds	r30, 0x0000
fa95de46:	f0 91 00 00 	lds	r31, 0x0000
fa95de4a:	81 a0       	ldd	r8, Z+33	; 0x21
fa95de4c:	92 a0       	ldd	r9, Z+34	; 0x22
fa95de4e:	a3 a0       	ldd	r10, Z+35	; 0x23
fa95de50:	b4 a0       	ldd	r11, Z+36	; 0x24
fa95de52:	da 01       	movw	r26, r20
fa95de54:	c9 01       	movw	r24, r18
fa95de56:	80 95       	com	r24
fa95de58:	90 95       	com	r25
fa95de5a:	a0 95       	com	r26
fa95de5c:	b0 95       	com	r27
fa95de5e:	88 21       	and	r24, r8
fa95de60:	99 21       	and	r25, r9
fa95de62:	aa 21       	and	r26, r10
fa95de64:	bb 21       	and	r27, r11
fa95de66:	81 a3       	std	Z+33, r24	; 0x21
fa95de68:	92 a3       	std	Z+34, r25	; 0x22
fa95de6a:	a3 a3       	std	Z+35, r26	; 0x23
fa95de6c:	b4 a3       	std	Z+36, r27	; 0x24
fa95de6e:	81 e0       	ldi	r24, 0x01	; 1
fa95de70:	00 c0       	rjmp	.+0      	; 0xfa95de72 <uxTaskResetEventItemValue+0x7bf06762>
fa95de72:	80 e0       	ldi	r24, 0x00	; 0
fa95de74:	e0 91 00 00 	lds	r30, 0x0000
fa95de78:	f0 91 00 00 	lds	r31, 0x0000
fa95de7c:	15 a2       	std	Z+37, r1	; 0x25
fa95de7e:	0f 90       	pop	r0
fa95de80:	0f be       	out	0x3f, r0	; 63
fa95de82:	0f 90       	pop	r0
fa95de84:	0f 90       	pop	r0
fa95de86:	0f 90       	pop	r0
fa95de88:	0f 90       	pop	r0
fa95de8a:	df 91       	pop	r29
fa95de8c:	cf 91       	pop	r28
fa95de8e:	1f 91       	pop	r17
fa95de90:	0f 91       	pop	r16
fa95de92:	ff 90       	pop	r15
fa95de94:	ef 90       	pop	r14
fa95de96:	bf 90       	pop	r11
fa95de98:	af 90       	pop	r10
fa95de9a:	9f 90       	pop	r9
fa95de9c:	8f 90       	pop	r8
fa95de9e:	7f 90       	pop	r7
fa95dea0:	6f 90       	pop	r6
fa95dea2:	5f 90       	pop	r5
fa95dea4:	4f 90       	pop	r4
fa95dea6:	08 95       	ret

Disassembly of section .text.xTaskGenericNotify:

f52bbc0a <xTaskGenericNotify>:
f52bbc0a:	cf 92       	push	r12
f52bbc0c:	df 92       	push	r13
f52bbc0e:	ef 92       	push	r14
f52bbc10:	ff 92       	push	r15
f52bbc12:	0f 93       	push	r16
f52bbc14:	1f 93       	push	r17
f52bbc16:	cf 93       	push	r28
f52bbc18:	df 93       	push	r29
f52bbc1a:	ec 01       	movw	r28, r24
f52bbc1c:	0f b6       	in	r0, 0x3f	; 63
f52bbc1e:	f8 94       	cli
f52bbc20:	0f 92       	push	r0
f52bbc22:	01 15       	cp	r16, r1
f52bbc24:	11 05       	cpc	r17, r1
f52bbc26:	01 f0       	breq	.+0      	; 0xf52bbc28 <uxTaskResetEventItemValue+0x76864518>
f52bbc28:	c9 a0       	ldd	r12, Y+33	; 0x21
f52bbc2a:	da a0       	ldd	r13, Y+34	; 0x22
f52bbc2c:	eb a0       	ldd	r14, Y+35	; 0x23
f52bbc2e:	fc a0       	ldd	r15, Y+36	; 0x24
f52bbc30:	f8 01       	movw	r30, r16
f52bbc32:	c0 82       	st	Z, r12
f52bbc34:	d1 82       	std	Z+1, r13	; 0x01
f52bbc36:	e2 82       	std	Z+2, r14	; 0x02
f52bbc38:	f3 82       	std	Z+3, r15	; 0x03
f52bbc3a:	8d a1       	ldd	r24, Y+37	; 0x25
f52bbc3c:	92 e0       	ldi	r25, 0x02	; 2
f52bbc3e:	9d a3       	std	Y+37, r25	; 0x25
f52bbc40:	22 30       	cpi	r18, 0x02	; 2
f52bbc42:	01 f0       	breq	.+0      	; 0xf52bbc44 <uxTaskResetEventItemValue+0x76864534>
f52bbc44:	00 f4       	brcc	.+0      	; 0xf52bbc46 <uxTaskResetEventItemValue+0x76864536>
f52bbc46:	21 30       	cpi	r18, 0x01	; 1
f52bbc48:	01 f4       	brne	.+0      	; 0xf52bbc4a <uxTaskResetEventItemValue+0x7686453a>
f52bbc4a:	09 a1       	ldd	r16, Y+33	; 0x21
f52bbc4c:	1a a1       	ldd	r17, Y+34	; 0x22
f52bbc4e:	2b a1       	ldd	r18, Y+35	; 0x23
f52bbc50:	3c a1       	ldd	r19, Y+36	; 0x24
f52bbc52:	04 2b       	or	r16, r20
f52bbc54:	15 2b       	or	r17, r21
f52bbc56:	26 2b       	or	r18, r22
f52bbc58:	37 2b       	or	r19, r23
f52bbc5a:	09 a3       	std	Y+33, r16	; 0x21
f52bbc5c:	1a a3       	std	Y+34, r17	; 0x22
f52bbc5e:	2b a3       	std	Y+35, r18	; 0x23
f52bbc60:	3c a3       	std	Y+36, r19	; 0x24
f52bbc62:	00 c0       	rjmp	.+0      	; 0xf52bbc64 <uxTaskResetEventItemValue+0x76864554>
f52bbc64:	23 30       	cpi	r18, 0x03	; 3
f52bbc66:	01 f0       	breq	.+0      	; 0xf52bbc68 <uxTaskResetEventItemValue+0x76864558>
f52bbc68:	24 30       	cpi	r18, 0x04	; 4
f52bbc6a:	01 f0       	breq	.+0      	; 0xf52bbc6c <uxTaskResetEventItemValue+0x7686455c>
f52bbc6c:	00 c0       	rjmp	.+0      	; 0xf52bbc6e <uxTaskResetEventItemValue+0x7686455e>
f52bbc6e:	49 a1       	ldd	r20, Y+33	; 0x21
f52bbc70:	5a a1       	ldd	r21, Y+34	; 0x22
f52bbc72:	6b a1       	ldd	r22, Y+35	; 0x23
f52bbc74:	7c a1       	ldd	r23, Y+36	; 0x24
f52bbc76:	4f 5f       	subi	r20, 0xFF	; 255
f52bbc78:	5f 4f       	sbci	r21, 0xFF	; 255
f52bbc7a:	6f 4f       	sbci	r22, 0xFF	; 255
f52bbc7c:	7f 4f       	sbci	r23, 0xFF	; 255
f52bbc7e:	00 c0       	rjmp	.+0      	; 0xf52bbc80 <uxTaskResetEventItemValue+0x76864570>
f52bbc80:	82 30       	cpi	r24, 0x02	; 2
f52bbc82:	01 f0       	breq	.+0      	; 0xf52bbc84 <uxTaskResetEventItemValue+0x76864574>
f52bbc84:	49 a3       	std	Y+33, r20	; 0x21
f52bbc86:	5a a3       	std	Y+34, r21	; 0x22
f52bbc88:	6b a3       	std	Y+35, r22	; 0x23
f52bbc8a:	7c a3       	std	Y+36, r23	; 0x24
f52bbc8c:	81 30       	cpi	r24, 0x01	; 1
f52bbc8e:	01 f4       	brne	.+0      	; 0xf52bbc90 <uxTaskResetEventItemValue+0x76864580>
f52bbc90:	8e 01       	movw	r16, r28
f52bbc92:	0e 5f       	subi	r16, 0xFE	; 254
f52bbc94:	1f 4f       	sbci	r17, 0xFF	; 255
f52bbc96:	c8 01       	movw	r24, r16
f52bbc98:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f52bbc9c:	8e 89       	ldd	r24, Y+22	; 0x16
f52bbc9e:	90 91 00 00 	lds	r25, 0x0000
f52bbca2:	98 17       	cp	r25, r24
f52bbca4:	00 f4       	brcc	.+0      	; 0xf52bbca6 <uxTaskResetEventItemValue+0x76864596>
f52bbca6:	80 93 00 00 	sts	0x0000, r24
f52bbcaa:	f9 e0       	ldi	r31, 0x09	; 9
f52bbcac:	8f 9f       	mul	r24, r31
f52bbcae:	c0 01       	movw	r24, r0
f52bbcb0:	11 24       	eor	r1, r1
f52bbcb2:	b8 01       	movw	r22, r16
f52bbcb4:	80 50       	subi	r24, 0x00	; 0
f52bbcb6:	90 40       	sbci	r25, 0x00	; 0
f52bbcb8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f52bbcbc:	e0 91 00 00 	lds	r30, 0x0000
f52bbcc0:	f0 91 00 00 	lds	r31, 0x0000
f52bbcc4:	9e 89       	ldd	r25, Y+22	; 0x16
f52bbcc6:	86 89       	ldd	r24, Z+22	; 0x16
f52bbcc8:	89 17       	cp	r24, r25
f52bbcca:	00 f4       	brcc	.+0      	; 0xf52bbccc <uxTaskResetEventItemValue+0x768645bc>
f52bbccc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f52bbcd0:	81 e0       	ldi	r24, 0x01	; 1
f52bbcd2:	00 c0       	rjmp	.+0      	; 0xf52bbcd4 <uxTaskResetEventItemValue+0x768645c4>
f52bbcd4:	80 e0       	ldi	r24, 0x00	; 0
f52bbcd6:	0f 90       	pop	r0
f52bbcd8:	0f be       	out	0x3f, r0	; 63
f52bbcda:	df 91       	pop	r29
f52bbcdc:	cf 91       	pop	r28
f52bbcde:	1f 91       	pop	r17
f52bbce0:	0f 91       	pop	r16
f52bbce2:	ff 90       	pop	r15
f52bbce4:	ef 90       	pop	r14
f52bbce6:	df 90       	pop	r13
f52bbce8:	cf 90       	pop	r12
f52bbcea:	08 95       	ret

Disassembly of section .text.xTaskNotifyFromISR:

ea5778f6 <xTaskNotifyFromISR>:
ea5778f6:	ef 92       	push	r14
ea5778f8:	ff 92       	push	r15
ea5778fa:	0f 93       	push	r16
ea5778fc:	1f 93       	push	r17
ea5778fe:	cf 93       	push	r28
ea577900:	df 93       	push	r29
ea577902:	ec 01       	movw	r28, r24
ea577904:	3d a1       	ldd	r19, Y+37	; 0x25
ea577906:	82 e0       	ldi	r24, 0x02	; 2
ea577908:	8d a3       	std	Y+37, r24	; 0x25
ea57790a:	22 30       	cpi	r18, 0x02	; 2
ea57790c:	01 f0       	breq	.+0      	; 0xea57790e <uxTaskResetEventItemValue+0x6bb201fe>
ea57790e:	00 f4       	brcc	.+0      	; 0xea577910 <uxTaskResetEventItemValue+0x6bb20200>
ea577910:	21 30       	cpi	r18, 0x01	; 1
ea577912:	01 f4       	brne	.+0      	; 0xea577914 <uxTaskResetEventItemValue+0x6bb20204>
ea577914:	89 a1       	ldd	r24, Y+33	; 0x21
ea577916:	9a a1       	ldd	r25, Y+34	; 0x22
ea577918:	ab a1       	ldd	r26, Y+35	; 0x23
ea57791a:	bc a1       	ldd	r27, Y+36	; 0x24
ea57791c:	84 2b       	or	r24, r20
ea57791e:	95 2b       	or	r25, r21
ea577920:	a6 2b       	or	r26, r22
ea577922:	b7 2b       	or	r27, r23
ea577924:	00 c0       	rjmp	.+0      	; 0xea577926 <uxTaskResetEventItemValue+0x6bb20216>
ea577926:	23 30       	cpi	r18, 0x03	; 3
ea577928:	01 f0       	breq	.+0      	; 0xea57792a <uxTaskResetEventItemValue+0x6bb2021a>
ea57792a:	24 30       	cpi	r18, 0x04	; 4
ea57792c:	01 f0       	breq	.+0      	; 0xea57792e <uxTaskResetEventItemValue+0x6bb2021e>
ea57792e:	00 c0       	rjmp	.+0      	; 0xea577930 <uxTaskResetEventItemValue+0x6bb20220>
ea577930:	89 a1       	ldd	r24, Y+33	; 0x21
ea577932:	9a a1       	ldd	r25, Y+34	; 0x22
ea577934:	ab a1       	ldd	r26, Y+35	; 0x23
ea577936:	bc a1       	ldd	r27, Y+36	; 0x24
ea577938:	01 96       	adiw	r24, 0x01	; 1
ea57793a:	a1 1d       	adc	r26, r1
ea57793c:	b1 1d       	adc	r27, r1
ea57793e:	89 a3       	std	Y+33, r24	; 0x21
ea577940:	9a a3       	std	Y+34, r25	; 0x22
ea577942:	ab a3       	std	Y+35, r26	; 0x23
ea577944:	bc a3       	std	Y+36, r27	; 0x24
ea577946:	00 c0       	rjmp	.+0      	; 0xea577948 <uxTaskResetEventItemValue+0x6bb20238>
ea577948:	32 30       	cpi	r19, 0x02	; 2
ea57794a:	01 f0       	breq	.+0      	; 0xea57794c <uxTaskResetEventItemValue+0x6bb2023c>
ea57794c:	49 a3       	std	Y+33, r20	; 0x21
ea57794e:	5a a3       	std	Y+34, r21	; 0x22
ea577950:	6b a3       	std	Y+35, r22	; 0x23
ea577952:	7c a3       	std	Y+36, r23	; 0x24
ea577954:	31 30       	cpi	r19, 0x01	; 1
ea577956:	01 f0       	breq	.+0      	; 0xea577958 <uxTaskResetEventItemValue+0x6bb20248>
ea577958:	81 e0       	ldi	r24, 0x01	; 1
ea57795a:	00 c0       	rjmp	.+0      	; 0xea57795c <uxTaskResetEventItemValue+0x6bb2024c>
ea57795c:	80 91 00 00 	lds	r24, 0x0000
ea577960:	81 11       	cpse	r24, r1
ea577962:	00 c0       	rjmp	.+0      	; 0xea577964 <uxTaskResetEventItemValue+0x6bb20254>
ea577964:	7e 01       	movw	r14, r28
ea577966:	22 e0       	ldi	r18, 0x02	; 2
ea577968:	e2 0e       	add	r14, r18
ea57796a:	f1 1c       	adc	r15, r1
ea57796c:	c7 01       	movw	r24, r14
ea57796e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ea577972:	8e 89       	ldd	r24, Y+22	; 0x16
ea577974:	90 91 00 00 	lds	r25, 0x0000
ea577978:	98 17       	cp	r25, r24
ea57797a:	00 f4       	brcc	.+0      	; 0xea57797c <uxTaskResetEventItemValue+0x6bb2026c>
ea57797c:	80 93 00 00 	sts	0x0000, r24
ea577980:	e9 e0       	ldi	r30, 0x09	; 9
ea577982:	8e 9f       	mul	r24, r30
ea577984:	c0 01       	movw	r24, r0
ea577986:	11 24       	eor	r1, r1
ea577988:	b7 01       	movw	r22, r14
ea57798a:	80 50       	subi	r24, 0x00	; 0
ea57798c:	90 40       	sbci	r25, 0x00	; 0
ea57798e:	00 c0       	rjmp	.+0      	; 0xea577990 <uxTaskResetEventItemValue+0x6bb20280>
ea577990:	be 01       	movw	r22, r28
ea577992:	64 5f       	subi	r22, 0xF4	; 244
ea577994:	7f 4f       	sbci	r23, 0xFF	; 255
ea577996:	80 e0       	ldi	r24, 0x00	; 0
ea577998:	90 e0       	ldi	r25, 0x00	; 0
ea57799a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ea57799e:	e0 91 00 00 	lds	r30, 0x0000
ea5779a2:	f0 91 00 00 	lds	r31, 0x0000
ea5779a6:	9e 89       	ldd	r25, Y+22	; 0x16
ea5779a8:	86 89       	ldd	r24, Z+22	; 0x16
ea5779aa:	89 17       	cp	r24, r25
ea5779ac:	00 f4       	brcc	.+0      	; 0xea5779ae <uxTaskResetEventItemValue+0x6bb2029e>
ea5779ae:	01 15       	cp	r16, r1
ea5779b0:	11 05       	cpc	r17, r1
ea5779b2:	01 f0       	breq	.+0      	; 0xea5779b4 <uxTaskResetEventItemValue+0x6bb202a4>
ea5779b4:	81 e0       	ldi	r24, 0x01	; 1
ea5779b6:	f8 01       	movw	r30, r16
ea5779b8:	80 83       	st	Z, r24
ea5779ba:	00 c0       	rjmp	.+0      	; 0xea5779bc <uxTaskResetEventItemValue+0x6bb202ac>
ea5779bc:	80 e0       	ldi	r24, 0x00	; 0
ea5779be:	df 91       	pop	r29
ea5779c0:	cf 91       	pop	r28
ea5779c2:	1f 91       	pop	r17
ea5779c4:	0f 91       	pop	r16
ea5779c6:	ff 90       	pop	r15
ea5779c8:	ef 90       	pop	r14
ea5779ca:	08 95       	ret

Disassembly of section .text.vTaskNotifyGiveFromISR:

d4aef2c2 <vTaskNotifyGiveFromISR>:
d4aef2c2:	ef 92       	push	r14
d4aef2c4:	ff 92       	push	r15
d4aef2c6:	0f 93       	push	r16
d4aef2c8:	1f 93       	push	r17
d4aef2ca:	cf 93       	push	r28
d4aef2cc:	df 93       	push	r29
d4aef2ce:	ec 01       	movw	r28, r24
d4aef2d0:	8b 01       	movw	r16, r22
d4aef2d2:	8d a1       	ldd	r24, Y+37	; 0x25
d4aef2d4:	92 e0       	ldi	r25, 0x02	; 2
d4aef2d6:	9d a3       	std	Y+37, r25	; 0x25
d4aef2d8:	49 a1       	ldd	r20, Y+33	; 0x21
d4aef2da:	5a a1       	ldd	r21, Y+34	; 0x22
d4aef2dc:	6b a1       	ldd	r22, Y+35	; 0x23
d4aef2de:	7c a1       	ldd	r23, Y+36	; 0x24
d4aef2e0:	4f 5f       	subi	r20, 0xFF	; 255
d4aef2e2:	5f 4f       	sbci	r21, 0xFF	; 255
d4aef2e4:	6f 4f       	sbci	r22, 0xFF	; 255
d4aef2e6:	7f 4f       	sbci	r23, 0xFF	; 255
d4aef2e8:	49 a3       	std	Y+33, r20	; 0x21
d4aef2ea:	5a a3       	std	Y+34, r21	; 0x22
d4aef2ec:	6b a3       	std	Y+35, r22	; 0x23
d4aef2ee:	7c a3       	std	Y+36, r23	; 0x24
d4aef2f0:	81 30       	cpi	r24, 0x01	; 1
d4aef2f2:	01 f4       	brne	.+0      	; 0xd4aef2f4 <uxTaskResetEventItemValue+0x56097be4>
d4aef2f4:	80 91 00 00 	lds	r24, 0x0000
d4aef2f8:	81 11       	cpse	r24, r1
d4aef2fa:	00 c0       	rjmp	.+0      	; 0xd4aef2fc <uxTaskResetEventItemValue+0x56097bec>
d4aef2fc:	7e 01       	movw	r14, r28
d4aef2fe:	22 e0       	ldi	r18, 0x02	; 2
d4aef300:	e2 0e       	add	r14, r18
d4aef302:	f1 1c       	adc	r15, r1
d4aef304:	c7 01       	movw	r24, r14
d4aef306:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
d4aef30a:	8e 89       	ldd	r24, Y+22	; 0x16
d4aef30c:	90 91 00 00 	lds	r25, 0x0000
d4aef310:	98 17       	cp	r25, r24
d4aef312:	00 f4       	brcc	.+0      	; 0xd4aef314 <uxTaskResetEventItemValue+0x56097c04>
d4aef314:	80 93 00 00 	sts	0x0000, r24
d4aef318:	e9 e0       	ldi	r30, 0x09	; 9
d4aef31a:	8e 9f       	mul	r24, r30
d4aef31c:	c0 01       	movw	r24, r0
d4aef31e:	11 24       	eor	r1, r1
d4aef320:	b7 01       	movw	r22, r14
d4aef322:	80 50       	subi	r24, 0x00	; 0
d4aef324:	90 40       	sbci	r25, 0x00	; 0
d4aef326:	00 c0       	rjmp	.+0      	; 0xd4aef328 <uxTaskResetEventItemValue+0x56097c18>
d4aef328:	be 01       	movw	r22, r28
d4aef32a:	64 5f       	subi	r22, 0xF4	; 244
d4aef32c:	7f 4f       	sbci	r23, 0xFF	; 255
d4aef32e:	80 e0       	ldi	r24, 0x00	; 0
d4aef330:	90 e0       	ldi	r25, 0x00	; 0
d4aef332:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
d4aef336:	e0 91 00 00 	lds	r30, 0x0000
d4aef33a:	f0 91 00 00 	lds	r31, 0x0000
d4aef33e:	9e 89       	ldd	r25, Y+22	; 0x16
d4aef340:	86 89       	ldd	r24, Z+22	; 0x16
d4aef342:	89 17       	cp	r24, r25
d4aef344:	00 f4       	brcc	.+0      	; 0xd4aef346 <uxTaskResetEventItemValue+0x56097c36>
d4aef346:	01 15       	cp	r16, r1
d4aef348:	11 05       	cpc	r17, r1
d4aef34a:	01 f0       	breq	.+0      	; 0xd4aef34c <uxTaskResetEventItemValue+0x56097c3c>
d4aef34c:	81 e0       	ldi	r24, 0x01	; 1
d4aef34e:	f8 01       	movw	r30, r16
d4aef350:	80 83       	st	Z, r24
d4aef352:	df 91       	pop	r29
d4aef354:	cf 91       	pop	r28
d4aef356:	1f 91       	pop	r17
d4aef358:	0f 91       	pop	r16
d4aef35a:	ff 90       	pop	r15
d4aef35c:	ef 90       	pop	r14
d4aef35e:	08 95       	ret

timers.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY
